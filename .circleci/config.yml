version: 2.1

orbs:
  win: circleci/windows@4.1

# ------------------------------------------------
# Configurations
# ------------------------------------------------
flutter_version: &flutter_version
  FLUTTER_VERSION: "3.0.1"
repository_url: &repository_url
  REPO_URL: "https://github.com/qaul/qaul.net"
default_flutter_wdir: &default_flutter_wdir
  working_directory: ~/qaul-libp2p/qaul_ui
flutter_ios_dir: &flutter_ios_dir
  working_directory: ~/qaul-libp2p/qaul_ui/ios
checkout_to_root: &checkout_to_root
  steps:
    - checkout:
        path: ~/qaul-libp2p

aliases:
  - &restore_git_cache
    name: Restore GIT cache
    keys:
      - source-v1-{{ .Branch }}-{{ .Revision }}
      - source-v1-{{ .Branch }}-
      - source-v1-
  - &save_git_cache
    name: Save GIT cache
    key: source-v1-{{ .Branch }}-{{ .Revision }}
    paths:
      - .git

executors:
  flutter:
    docker:
      - image: cirrusci/flutter:3.0.1
    <<: *default_flutter_wdir
  android-flutter:
    docker:
      - image: cimg/android:2021.10
    resource_class: large
    <<: *default_flutter_wdir
  android-rust:
    docker:
      - image: cimg/android:2022.03-ndk
    resource_class: large

jobs:
  # ------------------------------------------------
  # Integration Jobs
  # ------------------------------------------------
  flutter-analyze:
    executor: flutter
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - install-flutter-deps
      - run: flutter analyze
  flutter-test:
    executor: flutter
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - install-flutter-deps
      - run: flutter test
  # ------------------------------------------------
  # Deploy Jobs
  # ------------------------------------------------
  # # #  -------------------------------------------
  # # #  (Deploy Jobs) Rust
  # # #  -------------------------------------------
  verify-version-rust:
    working_directory: ~/qaul-libp2p
    docker:
      - image: cimg/rust:1.60.0
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Verify that Git tag matches Rust version
          command: |
            VERSION=$(cd rust/libqaul && cargo generate-lockfile -q && cargo pkgid | cut -d# -f2 | cut -d: -f2)
            TAG="v$VERSION-rust"
            if [ $TAG != $CIRCLE_TAG ]; then
              echo "Git tag: $CIRCLE_TAG does not match the version of this app: $TAG"
              echo "Please update app version at rust/libqaul/Cargo.toml"
              exit 1
            fi
  publish-rust-github-release:
    working_directory: ~/qaul-libp2p
    docker:
      - image: cimg/rust:1.60.0
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - attach_workspace:
          at: ~/qaul-libp2p
      - run:
          name: Copy binaries to ./artifacts
          command: |
            mkdir artifacts
            # Linux
            cp rust/target/release/liblibqaul.so ./artifacts/
            cp rust/target/release/qaul-cli ./artifacts/
            cp rust/target/release/qauld ./artifacts/
            # Android
            cp -a android/blemodule/build/outputs/aar/. ./artifacts/
            cp -a android/libqaul/build/outputs/aar/. ./artifacts/
            # iOS
            cp rust/target/debug/liblibqaul.dylib ./artifacts/
            # MacOS
            cp rust/target/universal/release/liblibqaul.a ./artifacts/
            # Windows
            cp rust/target/debug/libqaul.dll ./artifacts/
      - run:
          name: Install ghr
          command: |
            GHR_VERSION=0.14.0
            GHR_URL=https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            wget "$GHR_URL"
            tar xzf ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            rm -r ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            echo "export PATH=ghr_v${GHR_VERSION}_linux_amd64:${PATH}" >> $BASH_ENV
      - run:
          name: Publish Release on GitHub
          command: |
            VERSION=$(cd rust/libqaul && cargo generate-lockfile -q && cargo pkgid | cut -d# -f2 | cut -d: -f2)
            TAG="v${VERSION}-rust"
            DESCRIPTION=$(cat docs/rust-release-template.md | sed "s/TAGNAME/${TAG}/g")

            echo "Version Found: $VERSION"
            echo "Tag built:     $TAG"
            echo "Description:\n$DESCRIPTION"
            echo ""

            ghr -t "${GITHUB_TOKEN}" \
              -u "${CIRCLE_PROJECT_USERNAME}" \
              -r "${CIRCLE_PROJECT_REPONAME}" \
              -c "${CIRCLE_SHA1}" \
              -n "Rust - v${VERSION}" \
              -b "${DESCRIPTION}" \
              -delete \
              "${TAG}" artifacts/
  # # #  -------------------------------------------
  # # #  (Deploy Jobs) Flutter
  # # #  -------------------------------------------
  verify-version-flutter:
    working_directory: ~/qaul-libp2p/qaul_ui
    docker:
      - image: cimg/base:2022.05
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Verify that Git tag matches Flutter version
          command: |
            VERSION=$(grep "version:" pubspec.yaml | awk '{ print $2}')
            TAG="v${VERSION}-flutter"
            if [ $TAG != $CIRCLE_TAG ]; then
              echo "Git tag: $CIRCLE_TAG does not match the version of this app: $TAG"
              echo "Please update app version at qaul_ui/pubspec.yaml"
              exit 1
            fi
  publish-flutter-github-release:
    working_directory: ~/qaul-libp2p/qaul_ui
    docker:
      - image: cimg/base:2022.05
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - attach_workspace:
          at: ~/qaul-libp2p
      - run:
          name: Copy executables to ./artifacts
          command: |
            mkdir artifacts
            # Android
            cp build/app/outputs/bundle/release/*.aab ./artifacts/
            # iOS
            cp build/ios/ipa/*.ipa ./artifacts/
            cp build/ios/archive/*.xcarchive ./artifacts/
            # MacOS
            cp installers/macos/qaul.dmg ./artifacts/
            # Windows
            cp installers/windows/qaul.exe ./artifacts/
            # Linux
            cp installers/linux/*.snap ./artifacts/
      - run:
          name: Install ghr
          command: |
            GHR_VERSION=0.14.0
            GHR_URL=https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            wget "$GHR_URL"
            tar xzf ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            rm -r ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            echo "export PATH=ghr_v${GHR_VERSION}_linux_amd64:${PATH}" >> $BASH_ENV
      - run:
          name: Publish Release on GitHub
          command: |
            VERSION=$(grep "version:" pubspec.yaml | awk '{ print $2}')
            TAG="v${VERSION}-flutter"

            SNAP_FILE=$(find artifacts -maxdepth 1 -name '*.snap' -type f -exec basename {} \; | sed 's/\.snap//')
            AAB_FILE=$(find artifacts -maxdepth 1 -name '*.aab' -type f -exec basename {} \; | cut -f 1 -d '.')
            IPA_FILE=$(find artifacts -maxdepth 1 -name '*.ipa' -type f -exec basename {} \; | cut -f 1 -d '.')
            XCA_FILE=$(find artifacts -maxdepth 1 -name '*.xcarchive' -type f -exec basename {} \; | cut -f 1 -d '.')

            DESCRIPTION=$(cat ../docs/flutter-release-template.md | sed "s/TAGNAME/${TAG}/g" | sed "s/SNAPVERSION/${SNAP_FILE}/g" | sed "s/ANDROIDVERSION/${AAB_FILE}/g" | sed "s/IPAVERSION/${IPA_FILE}/g" | sed "s/XCAVERSION/${XCA_FILE}/g")

            echo "Version Found: $VERSION"
            echo "Tag built:     $TAG"
            echo "Description built:"
            echo "$DESCRIPTION"
            echo ""

            ghr -t "${GITHUB_TOKEN}" \
              -u "${CIRCLE_PROJECT_USERNAME}" \
              -r "${CIRCLE_PROJECT_REPONAME}" \
              -c "${CIRCLE_SHA1}" \
              -n "Flutter - v${VERSION}" \
              -b "${DESCRIPTION}" \
              -delete \
              "${TAG}" artifacts/
  # #  ---------------------------------------------
  # #  Rust
  # #  ---------------------------------------------
  # # #  -------------------------------------------
  # # #  (Rust) Linux
  # # #  -------------------------------------------
  build-libqaul-linux:
    docker:
      - image: cimg/rust:1.60.0
    working_directory: ~/qaul-libp2p
    shell: /bin/bash --login -o pipefail
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Build Libqaul for Linux
          command: cd rust && cargo build --release
      - save-sccache-cache
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - rust/target/release/liblibqaul.so
            - rust/target/release/qaul-cli
            - rust/target/release/qauld
  # # #  -------------------------------------------
  # # #  (Rust) Android
  # # #  -------------------------------------------
  build-libqaul-android:
    executor: android-rust
    working_directory: ~/qaul-libp2p
    shell: /bin/bash --login -o pipefail
    environment:
      ANDROID_NDK_HOME: /home/circleci/android-sdk/ndk/22.1.7171670
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install Rust
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Install build targets for android in rust
          command: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
      - run:
          name: Install Cargo NDK
          command: cd rust/libqaul && cargo install cargo-ndk
      - run:
          name: Build Libqaul JniLibs for Android
          command: cd rust/libqaul && sh build_libqaul_android.sh
      - save-sccache-cache
      - restore_cache:
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/libqaul/build.gradle" }}-{{ checksum  "android/blemodule/build.gradle" }}
      - run:
          name: Build AAR Library
          command: cd android && sh gradlew assemble
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/libqaul/build.gradle" }}-{{ checksum  "android/blemodule/build.gradle" }}
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - android/blemodule/build/outputs/aar/blemodule-debug.aar
            - android/libqaul/build/outputs/aar/libqaul-debug.aar
  # # #  -------------------------------------------
  # # #  (Rust) iOS
  # # #  -------------------------------------------
  build-libqaul-ios:
    macos:
      xcode: 13.0.0
    working_directory: ~/qaul-libp2p
    shell: /bin/bash --login -o pipefail
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install CMake
          command: brew install cmake
      - run:
          name: Install Rust
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Install build targets for iOS in rust
          command: rustup target add aarch64-apple-ios x86_64-apple-ios
      - run:
          name: Install Cargo Lipo
          command: cd rust/libqaul && cargo install cargo-lipo
      - run:
          name: Build Libqaul *.a Library for iOS
          command: cd rust/libqaul && sh build_libqaul_ios.sh
      - save-sccache-cache
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
              - rust/target/universal/release/liblibqaul.a
  # # #  -------------------------------------------
  # # #  (Rust) MacOS
  # # #  -------------------------------------------
  build-libqaul-macos:
    macos:
      xcode: 13.0.0
    working_directory: ~/qaul-libp2p
    shell: /bin/bash --login -o pipefail
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install CMake
          command: brew install cmake
      - run:
          name: Install Rust
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Build Libqaul *.dylib Library for MacOS
          command: cd rust && cargo build
      - save-sccache-cache
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
              - rust/target/debug/liblibqaul.dylib
  # # #  -------------------------------------------
  # # #  (Rust) Windows
  # # #  -------------------------------------------
  build-libqaul-windows:
    executor:
      name: win/default
      size: "medium"
      shell: bash.exe
    working_directory: ~/qaul-libp2p
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install CMake
          shell: powershell.exe
          command: choco install cmake -y
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            export PATH="/c/Users/circleci/.cargo/bin:$PATH"
            cargo --version
            rustup --version
            rustc --version
      - run:
          name: Build dll Libqaul
          no_output_timeout: 30m
          command: |
            export PATH="/c/Users/circleci/.cargo/bin:/c/Program Files/CMake/bin:$PATH"
            cd rust && cargo build
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - rust/target/debug/libqaul.dll
  # #  ---------------------------------------------
  # #  Flutter
  # #  ---------------------------------------------
  # # #  -------------------------------------------
  # # #  (Flutter) Android
  # # #  -------------------------------------------
  android-beta-deploy:
    executor: android-flutter
    working_directory: ~/qaul-libp2p/qaul_ui/android
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: upload_beta_playstore
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      _JAVA_OPTIONS: "-Xmx2048m"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
      SUPPLY_JSON_KEY: ~/qaul-libp2p/qaul_ui/android/fastlane/google-credentials.json
      <<: *flutter_version
      <<: *repository_url
    shell: /bin/bash --login -o pipefail
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install Github CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
      - run:
          name: Download Libqaul AAR Files from latest Github Release
          command: |
            LATEST_TAG=$(gh release list --repo "$REPO_URL" | grep -E "v[0-9]+\.[0-9]+\.[0-9]+-rust" | cut -f 3 | sort --reverse --version-sort | head -n 1)
            gh release download "$LATEST_TAG" --pattern "libqaul-debug.aar" --repo "$REPO_URL" --dir ../../android/libqaul/build/outputs/aar
            gh release download "$LATEST_TAG" --pattern "blemodule-debug.aar" --repo "$REPO_URL" --dir ../../android/blemodule/build/outputs/aar
      - install-flutter:
          version: "$FLUTTER_VERSION"
      - install-flutter-deps
      - run:
          name: Install Bundler
          command: ruby --version && sudo gem install bundler -N -v "$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)"
      - install-bundler-deps
      - run: echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
      - run: echo "$PLAY_STORE_UPLOAD_KEY_INFO" | base64 --decode > key.properties
      - run: echo "$PLAY_STORE_JSON_KEY" | base64 --decode > fastlane/google-credentials.json
      - run:
          name: fastlane
          command: bundle exec fastlane $FASTLANE_LANE
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - qaul_ui/build/app/outputs/bundle/release/*.aab
  # # #  -------------------------------------------
  # # #  (Flutter) iOS
  # # #  -------------------------------------------
  ios-beta-deploy:
    macos:
      xcode: 13.0.0
    <<: *flutter_ios_dir
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: upload_testflight
      <<: *flutter_version
      <<: *repository_url
    shell: /bin/bash --login -o pipefail
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install Github CLI
          command: brew install gh
      - run:
          name: Download Libqaul *.a File from latest Github Release
          command: |
            LATEST_TAG=$(gh release list --repo "$REPO_URL" | grep -E "v[0-9]+\.[0-9]+\.[0-9]+-rust" | cut -f 3 | sort --reverse --version-sort | head -n 1)
            gh release download "$LATEST_TAG" --pattern "*.a" --repo "$REPO_URL" --dir ../../rust/target/universal/release
      - install-flutter:
          version: "$FLUTTER_VERSION"
      - install-flutter-deps
      - install-bundler-deps
      - install-cocoapods-deps
      - run:
          name: Build Flutter iOS Configuration
          command: flutter build ios --release --no-codesign --config-only
      - run:
          name: fastlane
          command: bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output
          destination: output
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - qaul_ui/build/ios/ipa/*.ipa
            - qaul_ui/build/ios/archive/*.xcarchive
  # # #  -------------------------------------------
  # # #  (Flutter) MacOS
  # # #  -------------------------------------------
  macos-flutter-build:
    macos:
      xcode: 13.0.0
    working_directory: ~/qaul-libp2p/qaul_ui
    environment:
      <<: *flutter_version
      <<: *repository_url
    shell: /bin/bash --login -o pipefail
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install Github CLI
          command: brew install gh
      - run:
          # TODO(brenodt): After upgrading flutter to 3.0.1, build fails due to missing arch:
          # TODO:    /Users/distiller/qaul-libp2p/qaul_ui/macos/Runner.xcodeproj: error:
          # TODO:      The linked and embedded library 'liblibqaul.dylib' is missing one or more architectures required
          # TODO:      by this target: arm64. (in target 'Runner' from project 'Runner')
          name: Download Libqaul *.dylib File from latest Github Release
          command: |
            LATEST_TAG=$(gh release list --repo "$REPO_URL" | grep -E "v[0-9]+\.[0-9]+\.[0-9]+-rust" | cut -f 3 | sort --reverse --version-sort | head -n 1)
            gh release download "$LATEST_TAG" --pattern "*.dylib" --repo "$REPO_URL" --dir macos
      - run:
          name: Install node-appdmg
          command: |
            npm install -g appdmg
            appdmg --version || npx appdmg --version
      - install-flutter:
          version: "$FLUTTER_VERSION"
      - install-flutter-deps
      - run:
          name: Build MacOS Application
          command: |
            flutter config --enable-macos-desktop
            flutter build macos

            ls build/macos/Build/Products/Release
      - run:
          name: Build *.dmg File
          command: |
            cd installers/macos
            appdmg ./config.json ./qaul.dmg
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - qaul_ui/installers/macos/qaul.dmg
  # # #  -------------------------------------------
  # # #  (Flutter) Windows
  # # #  -------------------------------------------
  windows-flutter-build:
    executor:
      name: win/server-2022
      size: "medium"
      shell: bash.exe
    working_directory: ~/qaul-libp2p/qaul_ui
    environment:
      <<: *flutter_version
      <<: *repository_url
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - attach_workspace:
          at: ~/qaul-libp2p
      - run:
          name: Install InnoSetup
          command: choco install innosetup -y
      - run:
          name: Install Github CLI
          command: choco install gh -y
      - run:
          name: Download Libqaul *.dll File from latest Github Release
          command: |
            echo "Using repo: $REPO_URL"

            export PATH="/c/Program Files/Github CLI:${PATH}"

            LATEST_TAG=$(gh release list --repo "$REPO_URL" | grep -E "v[0-9]+\.[0-9]+\.[0-9]+-rust" | cut -f 3 | /usr/bin/sort --reverse --version-sort | head -n 1)
            echo "Found latest tag: $LATEST_TAG"

            gh release download "$LATEST_TAG" --pattern "*.dll" --repo "$REPO_URL" --dir ../rust/target/debug
      - install-flutter:
          version: "$FLUTTER_VERSION"
      - run:
          name: Build Flutter Application for Windows
          command: |
            export PATH="${HOME}/development/flutter/bin:${PATH}"
            flutter config --enable-windows-desktop
            flutter build windows
      - run:
          name: Run iscc
          command: cd bin && bash build_windows_installer
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - qaul_ui\installers\windows\qaul.exe
  # # #  -------------------------------------------
  # # #  (Flutter) Linux
  # # #  -------------------------------------------
  linux-flutter-build:
    docker:
        - image: snapcore/snapcraft:edge
    working_directory: ~/qaul-libp2p/qaul_ui
    environment:
      <<: *flutter_version
      <<: *repository_url
    steps:
      - restore_cache: *restore_git_cache
      - checkout-project
      - save_cache: *save_git_cache
      - run:
          name: Install core package dependencies
          command: apt-get update && apt-get install -y curl apt-transport-https xz-utils
      - run:
          name: Install Github CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
      - run:
          name: Download Libqaul *.so File from latest Github Release
          command: |
            LATEST_TAG=$(gh release list --repo "$REPO_URL" | grep -E "v[0-9]+\.[0-9]+\.[0-9]+-rust" | cut -f 3 | sort --reverse --version-sort | head -n 1)
            gh release download "$LATEST_TAG" --pattern "*.so" --repo "$REPO_URL" --dir ../rust/target/release
      - install-flutter:
          version: "$FLUTTER_VERSION"
      - install-flutter-deps
      - run:
          name: Build Flutter Application for Linux
          command: |
            SNAP_PATH=$(cd installers/linux && bash snapbuild | tail -n1 )
            echo "Resulting snap file can be found at: $SNAP_PATH"
      - persist_to_workspace:
          root: ~/qaul-libp2p
          paths:
            - qaul_ui/installers/linux/*.snap

# ------------------------------------------------
# Workflows
# ------------------------------------------------
workflows:
#  flutter-test-analyze:
#    jobs:
#      - flutter-test
#      - flutter-analyze
  flutter-build-and-deploy:
    jobs:
      - verify-version-flutter:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - flutter-test:
          requires:
            - verify-version-flutter
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - flutter-analyze:
          requires:
            - verify-version-flutter
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - android-beta-deploy:
          requires:
            - flutter-test
            - flutter-analyze
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - ios-beta-deploy:
          requires:
            - flutter-test
            - flutter-analyze
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - macos-flutter-build:
          requires:
            - flutter-test
            - flutter-analyze
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - windows-flutter-build:
          requires:
            - flutter-test
            - flutter-analyze
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - linux-flutter-build:
          requires:
            - flutter-test
            - flutter-analyze
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
      - publish-flutter-github-release:
          requires:
            - android-beta-deploy
            - ios-beta-deploy
            - macos-flutter-build
            - windows-flutter-build
            - linux-flutter-build
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-flutter$/
            branches:
              ignore: /.*/
  rust-build-and-deploy:
    jobs:
      - verify-version-rust:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-rust$/
            branches:
              ignore: /.*/
      - build-libqaul-linux:
          requires:
            - verify-version-rust
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-rust$/
            branches:
              ignore: /.*/
      - build-libqaul-android:
          requires:
            - verify-version-rust
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-rust$/
            branches:
              ignore: /.*/
      - build-libqaul-ios:
          requires:
            - verify-version-rust
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-rust$/
            branches:
              ignore: /.*/
      - build-libqaul-macos:
          requires:
            - verify-version-rust
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-rust$/
            branches:
              ignore: /.*/
      - build-libqaul-windows:
          requires:
            - verify-version-rust
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-rust$/
            branches:
              ignore: /.*/
      - publish-rust-github-release:
          requires:
            - build-libqaul-linux
            - build-libqaul-android
            - build-libqaul-ios
            - build-libqaul-macos
            - build-libqaul-windows
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(\+\d)*-rust$/
            branches:
              ignore: /.*/

# ------------------------------------------------
# Reusable commands
# ------------------------------------------------
commands:
  checkout-project:
    description: "Invokes the checkout CircleCI step, declaring `path` as the root of the project (defined by `checkout_to_project_root` anchor)"
    <<: *checkout_to_root


  # ------------------------------------------------
  # Flutter-related commands
  # ------------------------------------------------
  install-flutter:
    description: "Install Flutter SDK & add bin folder to BASH_ENV"
    parameters:
      version:
        type: string
    steps:
      - run:
          name: "Install Flutter"
          command: |
            FL_PATH=$(bash <(curl -s https://raw.githubusercontent.com/brenodt/flutter_utilities/main/bin/flinstall) << parameters.version >>)
            echo "export PATH=${FL_PATH}:${PATH}" >> $BASH_ENV
  install-flutter-deps:
    description: "Install Flutter dependencies"
    parameters:
      pub-cache:
        type: string
        default: "~/.pub-cache"
      dart-tool-cache:
        type: string
        default: ".dart_tool"
    steps:
      - run: flutter doctor --verbose
      - run:
          name: "Prepare For Cache Key"
          command: |
            cat "$(find .. -iname "pubspec.lock" | head -n 1)" > pubspec.rev
      - restore_cache:
          name: Restore Flutter pub cache
          key: pub-cache-v3-{{ arch }}-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ checksum "pubspec.rev" }}
      - run:
          name: Install Flutter Dependencies
          command: flutter pub get
      - save_cache:
          name: Save Flutter pub cache
          key: pub-cache-v3-{{ arch }}-{{ .Environment.CIRCLE_WORKING_DIRECTORY }}-{{ checksum "pubspec.rev" }}
          paths:
            - << parameters.dart-tool-cache >>
            - << parameters.pub-cache >>

  install-bundler-deps:
    description: "Install Bundle dependencies"
    steps:
      - restore_cache:
          name: Restore Bundle cache
          keys:
            - gem-cache-v2-{{ arch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v2-{{ arch }}-
      - run:
          name: Install Bundle
          command: bundle check || sudo bundle install --path vendor/bundle
      - save_cache:
          name: Save Bundle cache
          key: gem-cache-v2-{{ arch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

  install-cocoapods-deps:
    description: "Install Pods dependencies"
    steps:
      - restore_cache:
          name: Restore CocoaPods cache
          key: pods-cache-v1-{{ arch }}-{{ checksum "Podfile.lock" }}
      - run:
          name: Install CocoaPods
          command: pod install
      - save_cache:
          name: Save CocoaPods cache
          key: pods-cache-v1-{{ arch }}-{{ checksum "Podfile.lock" }}
          paths:
            - ./Pods


  # ------------------------------------------------
  # Rust-related commands
  # ------------------------------------------------
  setup-sccache:
    description: "Installs and configures sccache as a wrapper for rustc"
    steps:
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"