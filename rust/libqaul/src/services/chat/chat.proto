syntax = "proto3";
package qaul.rpc.chat;

// Chat service RPC message container
message Chat {
    // message type
    oneof message {
        // request an overview over the last conversations
        ChatOverviewRequest overview_request = 1;
        // contains the overview list
        ChatOverviewList overview_list = 2;

        // request a specific conversation
        ChatConversationRequest conversation_request = 3;
        // list of a chat conversation
        ChatConversationList conversation_list = 4;

        // send a new chat message
        ChatMessageSend send = 5;
    }
}

// request for overview list of all conversations
// this request shall be sent continuously when the view is open
//
// at the moment always the entire list is sent
message ChatOverviewRequest {}

// overview list of conversations
// this can eighter be the entire list or the last updates
message ChatOverviewList {
    repeated ChatOverview overview_list = 1;
}

// a chat conversation overview item
message ChatOverview {
    // id of the user
    bytes conversation_id = 1;
    // last message id
    uint64 last_message_index = 2;
    // name of the conversation
    string name = 3;
    // time when last message was sent or received
    uint64 last_message_at = 4;
    // unread messages
    int32 unread = 5;
    // content type
    ChatContentType content_type = 6;
    // preview text of the last message
    bytes content = 7;
    // sender of the last message
    bytes last_message_sender_id = 8;
}

// request messages of a specific chat conversation
message ChatConversationRequest {
    bytes conversation_id = 1;
    // send only changes that are newer than the last received
    uint64 last_index = 2;
}

// list of chat messages of a specific conversation
message ChatConversationList {
    bytes conversation_id             = 1;
    repeated ChatMessage message_list = 2;
}

// a single chat message
message ChatMessage {
    // index
    uint64 index = 1;
    // id of the sending user
    bytes sender_id = 2;
    // message id or member id
    bytes message_id = 3;
    // message status
    MessageStatus status = 4;
    // message reception confirmed
    //
    // When a user receives a message, sent by us,
    // the user is confirming the reception of this message.
    // We are only getting this confirmation if we are the sender of this
    // message.
    repeated MessageReceptionConfirmed message_reception_confirmed = 10;
    // conversation id
    bytes conversation_id = 5;
    // time when the message was sent
    uint64 sent_at = 6;
    // time when the message was received
    uint64 received_at = 7;
    // content type
    ChatContentType content_type = 8;
    // content of the message
    bytes content = 9;
}

// Chat Content Type
//
// describes the message content type
// of the message encoded in the ChatMessage content field
enum ChatContentType {
    // Undefined / Error
    NONE = 0;
    // chat content message
    // ChatContent
    CHAT = 1;
    // file content message
    // FileContent
    FILE = 2;
    // group event information
    // GroupEvent
    GROUP = 3;
    // RTC event information
    RTC = 4;
}

// Sending status of sent messages
enum MessageStatus {
    // message not sent yet
    //
    // this state is used for receiving files too
    SENDING = 0;
    // message sent
    SENT = 1;
    // message received
    RECEIVED = 2;
    // all group members received the message successfully
    // this option is only used for groups with more then 2 members
    RECEIVED_BY_ALL = 3;
}

// message reception confirmed
message MessageReceptionConfirmed {
    // user id
    bytes user_id = 1;
    // time of confirmation
    uint64 confirmed_at = 2;
}

// chat content
message ChatContent {
    // message text
    string text = 1;
}

// file content
message FileContent {
    // file id
    uint64 file_id = 1;

    // file name
    string file_name = 2;

    // file extension
    string file_extension = 3;
    // file size
    uint32 file_size = 4;

    // file description
    string file_description = 5;
}

// Group event information
// this message is purely informational
message GroupEvent {
    // group event type
    GroupEventType event_type = 1;
    // user ID of user joined or left
    bytes user_id = 2;
}

// Group info type definition
enum GroupEventType {
    // default value, undefined message
    // ignore this message
    DEFAULT = 0;
    // user invited to group
    INVITED = 1;
    // user joined group
    JOINED = 2;
    // user left group
    LEFT = 3;
    // group was closed
    CLOSED = 4;
}

// send chat message
message ChatMessageSend {
    // conversation id to which this message is sent
    bytes conversation_id = 1;
    // content of the message
    string content = 2;
}
