syntax = "proto3";
package qaul.rpc.chat;


// Chat service RPC message container
message Chat {
    // message type
    oneof message {
        // request an overview over the last conversations
        ChatOverviewRequest overview_request = 1;
        // contains the overview list
        ChatOverviewList overview_list = 2;

        // request a specific conversation
        ChatConversationRequest conversation_request = 3;
        // list of a chat conversation
        ChatConversationList conversation_list = 4;

        // send a new chat message
        ChatMessageSend send = 5;
    }
}

// request for overview list of all conversations
// this request shall be sent continuously when the view is open
// 
// at the moment always the entire list is sent
message ChatOverviewRequest {
}

// overview list of conversations
// this can eighter be the entire list or the last updates
message ChatOverviewList {
    repeated ChatOverview overview_list = 1;
}

// a chat conversation overview item
message ChatOverview {
    // id of the user
    bytes conversation_id = 1;
    // last message id
    uint64 last_message_index = 2;
    // name of the conversation
    string name = 3;
    // time when last message was sent or received
    uint64 last_message_at = 4;
    // unread messages
    int32 unread = 5;
    // content type
    ContentType content_type = 6;
    // preview text of the last message
    bytes content = 7;
    // sender of the last message
    bytes last_message_sender_id = 8;
}

// request messages of a specific chat conversation
message ChatConversationRequest {
    bytes conversation_id = 1;
    // send only changes that are newer than the last received
    uint64 last_index = 2;
}

// list of chat messages of a specific conversation
message ChatConversationList {
    bytes conversation_id = 1;
    repeated ChatMessage message_list = 2;
}

// Content Type
//
// These power settings relate to the android
// power modes.
enum ContentType {
    // chat
    chat = 0;
    // group management 
    group = 1;
    // file
    file = 2;
    // rtc management
    rtc = 4;
}


// a single chat message
message ChatMessage {
    // index
    uint64 index = 1;
    // id of the sending user
    bytes sender_id = 2;
    // message id or member id
    bytes message_id = 3;        
    // message status
    // 0 = nothing
    // 1 = sent
    // 2 = received
    uint32 status = 4;
    // conversation id
    bytes conversation_id = 5;
    // time when the message was sent
    uint64 sent_at = 6;
    // time when the message was received
    uint64 received_at = 7;
    // content type
    ContentType content_type = 8;
    // content of the message    
    bytes content = 9;
}

// send chat message
message ChatMessageSend {
    // conversation id to which this message is sent
    bytes conversation_id = 1;
    // content of the message
    string content = 2;
}

