syntax = "proto3";
package qaul.net.messaging;

// qaul network messaging service
//
// is responsible to distribute messages to users
// the container contains the entire message with signature
message Container {
    // signed by sending user
    bytes signature = 1;
    // Message envelope
    Envelope envelope = 2;
}

// message envelop with sender and receiver
message Envelope {
    // the qaul ID of the sender
    bytes sender_id = 1;
    // the qaul ID of the receiver
    bytes receiver_id = 2;
    // payload
    bytes payload = 3;
}

// envelop payload
message EnvelopPayload{
    oneof payload {
        // encrypted message data
        Encrypted encrypted = 1;
        // DTN message
        bytes dtn = 2;
    }
}


// encrypted message data
message Encrypted {
    //repeated Data data = 1;
    bytes data = 1;
}

// encrypted message data
message Data {
    // message nonce for encryption
    uint64 nonce = 1;
    // the encrypted message data
    bytes data = 2;
}

// messaging unified message
message Messaging {   
    oneof message {
        // confirm chat message
        Confirmation confirmation_message = 1;
        // crypto service
        CryptoService crypto_service = 2;
        // rtc stream 
        RtcStreamMessage rtc_stream_message = 3;
        // group notify
        GroupNotifyMessage group_notify_message = 4;
        // common message
        CommonMessage common_message = 5;
    }
}

// Crypto Service Message
//
// This message is for crypto specific tasks,
// such as completing a handshake.
message CryptoService {

}

// message received confirmation
// 
// every message that was received by a user
// sends an acknowledgment package, to the sender
// to confirm the receive.
message Confirmation {
    // message ID
    bytes signature = 1;
    // receveived at timestamp
    uint64 received_at = 2;
}


// common message
message CommonMessage{
    // message ID
    bytes message_id = 1;

    // conversation id
    bytes conversation_id = 2;

    // conversation id
    uint64 sent_at = 3;
    
    // payload
    oneof payload {
        // chat message
        ChatMessage chat_message = 4;
        // file message
        FileMessage file_message = 5;                
        // group message
        GroupMessage group_message = 6;
        // rtc message
        RtcMessage rtc_message = 7;
    }
}

// chat content
message ChatMessage {
    // content
    string content = 1;
}

// file message
message FileMessage {
    bytes content = 1;
}

// rtc message
message RtcMessage {
    bytes content = 1;
}
// rtc stream mesasge
message RtcStreamMessage {
    bytes content = 1;
}


// group message
message GroupMessage {
    bytes content = 1;
}

// group notify message
message GroupNotifyMessage {
    bytes content = 1;
}


// DTN message
message Dtn {
    oneof message {
        // message container
        bytes container = 1;
        // message received response
        DtnResponse response = 2;
    }
}

// DTN response
message DtnResponse {
    // the enum definition of the type
    enum Type {
        // the message was accepted for storage
        ACCEPTED = 0;
        // the message was rejected
        REJECTED = 1;
    }
    // the type of the message
    Type type = 1;
    // message signature reference
    bytes signature = 2;
    // the enum definition of the rejection reason
    enum Reason {
        // this user is not accepted
        USER_NOT_ACCEPTED = 0;
        // overall quota reached
        OVERALL_QUOTA = 1;
        // user quota reached
        USER_QUOTA = 2;
    }
    // reason of rejection
    Reason reason = 3;
}