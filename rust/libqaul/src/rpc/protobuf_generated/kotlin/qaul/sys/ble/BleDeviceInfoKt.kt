// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connections/ble/ble.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package qaul.sys.ble;

@kotlin.jvm.JvmName("-initializebleDeviceInfo")
public inline fun bleDeviceInfo(block: qaul.sys.ble.BleDeviceInfoKt.Dsl.() -> kotlin.Unit): qaul.sys.ble.BleOuterClass.BleDeviceInfo =
  qaul.sys.ble.BleDeviceInfoKt.Dsl._create(qaul.sys.ble.BleOuterClass.BleDeviceInfo.newBuilder()).apply { block() }._build()
/**
 * ```
 * BLE device information
 * ```
 *
 * Protobuf type `qaul.sys.ble.BleDeviceInfo`
 */
public object BleDeviceInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.sys.ble.BleOuterClass.BleDeviceInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.sys.ble.BleOuterClass.BleDeviceInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.sys.ble.BleOuterClass.BleDeviceInfo = _builder.build()

    /**
     * ```
     * Check if Bluetooth / Bluetooth Low Energy is supported 
     *
     * Android: check if a bluetooth adapter is found
     * ```
     *
     * `bool ble_support = 1;`
     */
    public var bleSupport: kotlin.Boolean
      @JvmName("getBleSupport")
      get() = _builder.getBleSupport()
      @JvmName("setBleSupport")
      set(value) {
        _builder.setBleSupport(value)
      }
    /**
     * ```
     * Check if Bluetooth / Bluetooth Low Energy is supported 
     *
     * Android: check if a bluetooth adapter is found
     * ```
     *
     * `bool ble_support = 1;`
     */
    public fun clearBleSupport() {
      _builder.clearBleSupport()
    }

    /**
     * ```
     * Bluetooth device address
     * 48 bit unique Bluetooth device addr
     * e.g. 80:86:F2:08:C7:98
     * 
     * Android: BluetoothAdapter getAddress()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#getAddress()
     * ```
     *
     * `string id = 2;`
     */
    public var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * ```
     * Bluetooth device address
     * 48 bit unique Bluetooth device addr
     * e.g. 80:86:F2:08:C7:98
     * 
     * Android: BluetoothAdapter getAddress()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#getAddress()
     * ```
     *
     * `string id = 2;`
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * ```
     * Get Bluetooth Name
     * this is field is purely informative
     *
     * Android: BluetoothAdapter getName()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#getName()
     * ```
     *
     * `string name = 3;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * ```
     * Get Bluetooth Name
     * this is field is purely informative
     *
     * Android: BluetoothAdapter getName()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#getName()
     * ```
     *
     * `string name = 3;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * Bluetooth is enable / powered on
     *
     * Android: BluetoothAdapter isEnabled()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#isEnabled() 
     * ```
     *
     * `bool bluetooth_on = 4;`
     */
    public var bluetoothOn: kotlin.Boolean
      @JvmName("getBluetoothOn")
      get() = _builder.getBluetoothOn()
      @JvmName("setBluetoothOn")
      set(value) {
        _builder.setBluetoothOn(value)
      }
    /**
     * ```
     * Bluetooth is enable / powered on
     *
     * Android: BluetoothAdapter isEnabled()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#isEnabled() 
     * ```
     *
     * `bool bluetooth_on = 4;`
     */
    public fun clearBluetoothOn() {
      _builder.clearBluetoothOn()
    }

    /**
     * ```
     * Is extended advertisement supported?
     *
     * Android: BluetoothAdapter isLeExtendedAdvertisingSupported ()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLeExtendedAdvertisingSupported()
     * ```
     *
     * `bool adv_extended = 5;`
     */
    public var advExtended: kotlin.Boolean
      @JvmName("getAdvExtended")
      get() = _builder.getAdvExtended()
      @JvmName("setAdvExtended")
      set(value) {
        _builder.setAdvExtended(value)
      }
    /**
     * ```
     * Is extended advertisement supported?
     *
     * Android: BluetoothAdapter isLeExtendedAdvertisingSupported ()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLeExtendedAdvertisingSupported()
     * ```
     *
     * `bool adv_extended = 5;`
     */
    public fun clearAdvExtended() {
      _builder.clearAdvExtended()
    }

    /**
     * ```
     * what is the maximal amount of bytes sendable via advertising?
     *
     * Android: BluetoothAdapter getLeMaximumAdvertisingDataLength() 
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#getLeMaximumAdvertisingDataLength()
     * ```
     *
     * `uint32 adv_extended_bytes = 6;`
     */
    public var advExtendedBytes: kotlin.Int
      @JvmName("getAdvExtendedBytes")
      get() = _builder.getAdvExtendedBytes()
      @JvmName("setAdvExtendedBytes")
      set(value) {
        _builder.setAdvExtendedBytes(value)
      }
    /**
     * ```
     * what is the maximal amount of bytes sendable via advertising?
     *
     * Android: BluetoothAdapter getLeMaximumAdvertisingDataLength() 
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#getLeMaximumAdvertisingDataLength()
     * ```
     *
     * `uint32 adv_extended_bytes = 6;`
     */
    public fun clearAdvExtendedBytes() {
      _builder.clearAdvExtendedBytes()
    }

    /**
     * ```
     * Is 2M phy supported?
     *
     * Android: BluetoothAdapter isLe2MPhySupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLe2MPhySupported()
     * ```
     *
     * `bool le_2m = 7;`
     */
    public var le2M: kotlin.Boolean
      @JvmName("getLe2M")
      get() = _builder.getLe2M()
      @JvmName("setLe2M")
      set(value) {
        _builder.setLe2M(value)
      }
    /**
     * ```
     * Is 2M phy supported?
     *
     * Android: BluetoothAdapter isLe2MPhySupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLe2MPhySupported()
     * ```
     *
     * `bool le_2m = 7;`
     */
    public fun clearLe2M() {
      _builder.clearLe2M()
    }

    /**
     * ```
     * is extended advertising supported in coded
     * mode? (For long distance connections)
     *
     * Android: BluetoothAdapter isLeCodedPhySupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLeCodedPhySupported()
     * ```
     *
     * `bool le_coded = 8;`
     */
    public var leCoded: kotlin.Boolean
      @JvmName("getLeCoded")
      get() = _builder.getLeCoded()
      @JvmName("setLeCoded")
      set(value) {
        _builder.setLeCoded(value)
      }
    /**
     * ```
     * is extended advertising supported in coded
     * mode? (For long distance connections)
     *
     * Android: BluetoothAdapter isLeCodedPhySupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLeCodedPhySupported()
     * ```
     *
     * `bool le_coded = 8;`
     */
    public fun clearLeCoded() {
      _builder.clearLeCoded()
    }

    /**
     * ```
     * is LE audio supported?
     *
     * This is the most recent BLE feature, supported on:
     *
     * * android 12 and above
     * * linux ?
     * * ios ?
     * * macos ?
     * * windows ?
     *
     * Android: AndroidAdapter isLeAudioSupported()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#isLeAudioSupported()
     * ```
     *
     * `bool le_audio = 9;`
     */
    public var leAudio: kotlin.Boolean
      @JvmName("getLeAudio")
      get() = _builder.getLeAudio()
      @JvmName("setLeAudio")
      set(value) {
        _builder.setLeAudio(value)
      }
    /**
     * ```
     * is LE audio supported?
     *
     * This is the most recent BLE feature, supported on:
     *
     * * android 12 and above
     * * linux ?
     * * ios ?
     * * macos ?
     * * windows ?
     *
     * Android: AndroidAdapter isLeAudioSupported()
     * https://developer.android.com/reference/kotlin/android/bluetooth/BluetoothAdapter#isLeAudioSupported()
     * ```
     *
     * `bool le_audio = 9;`
     */
    public fun clearLeAudio() {
      _builder.clearLeAudio()
    }

    /**
     * ```
     * is periodic advertisment supported?
     *
     * Android: BluetoothAdapter isLePeriodicAdvertisingSupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLePeriodicAdvertisingSupported()
     * ```
     *
     * `bool le_periodic_adv_support = 14;`
     */
    public var lePeriodicAdvSupport: kotlin.Boolean
      @JvmName("getLePeriodicAdvSupport")
      get() = _builder.getLePeriodicAdvSupport()
      @JvmName("setLePeriodicAdvSupport")
      set(value) {
        _builder.setLePeriodicAdvSupport(value)
      }
    /**
     * ```
     * is periodic advertisment supported?
     *
     * Android: BluetoothAdapter isLePeriodicAdvertisingSupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isLePeriodicAdvertisingSupported()
     * ```
     *
     * `bool le_periodic_adv_support = 14;`
     */
    public fun clearLePeriodicAdvSupport() {
      _builder.clearLePeriodicAdvSupport()
    }

    /**
     * ```
     * Is multi advertisement supported?
     *
     * When multi advertisement is supported one can have different
     * advertisement types parallely. Each advertisement has a 
     * different device address.
     * For scanning devices it looks, as if multiple devices devices
     * would advertise themselves.
     * This is helpful to support several incompatible advertisement
     * modes at the same time.
     *
     * Android: BluetoothAdapter isMultipleAdvertisementSupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isMultipleAdvertisementSupported()
     * ```
     *
     * `bool le_multiple_adv_support = 15;`
     */
    public var leMultipleAdvSupport: kotlin.Boolean
      @JvmName("getLeMultipleAdvSupport")
      get() = _builder.getLeMultipleAdvSupport()
      @JvmName("setLeMultipleAdvSupport")
      set(value) {
        _builder.setLeMultipleAdvSupport(value)
      }
    /**
     * ```
     * Is multi advertisement supported?
     *
     * When multi advertisement is supported one can have different
     * advertisement types parallely. Each advertisement has a 
     * different device address.
     * For scanning devices it looks, as if multiple devices devices
     * would advertise themselves.
     * This is helpful to support several incompatible advertisement
     * modes at the same time.
     *
     * Android: BluetoothAdapter isMultipleAdvertisementSupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isMultipleAdvertisementSupported()
     * ```
     *
     * `bool le_multiple_adv_support = 15;`
     */
    public fun clearLeMultipleAdvSupport() {
      _builder.clearLeMultipleAdvSupport()
    }

    /**
     * ```
     * Android Specific: is Offloaded Filtering Supported?
     *
     * Android: BluetoothAdapter isOffloadedFilteringSupported()
     * 
     * ```
     *
     * `bool offload_filter_support = 16;`
     */
    public var offloadFilterSupport: kotlin.Boolean
      @JvmName("getOffloadFilterSupport")
      get() = _builder.getOffloadFilterSupport()
      @JvmName("setOffloadFilterSupport")
      set(value) {
        _builder.setOffloadFilterSupport(value)
      }
    /**
     * ```
     * Android Specific: is Offloaded Filtering Supported?
     *
     * Android: BluetoothAdapter isOffloadedFilteringSupported()
     * 
     * ```
     *
     * `bool offload_filter_support = 16;`
     */
    public fun clearOffloadFilterSupport() {
      _builder.clearOffloadFilterSupport()
    }

    /**
     * ```
     * Android Specific: is Offloaded Scan Batching Supported?
     *
     * Android: BluetoothAdapter isOffloadedScanBatchingSupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isOffloadedScanBatchingSupported()
     * ```
     *
     * `bool offload_scan_batching_support = 17;`
     */
    public var offloadScanBatchingSupport: kotlin.Boolean
      @JvmName("getOffloadScanBatchingSupport")
      get() = _builder.getOffloadScanBatchingSupport()
      @JvmName("setOffloadScanBatchingSupport")
      set(value) {
        _builder.setOffloadScanBatchingSupport(value)
      }
    /**
     * ```
     * Android Specific: is Offloaded Scan Batching Supported?
     *
     * Android: BluetoothAdapter isOffloadedScanBatchingSupported()
     * https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#isOffloadedScanBatchingSupported()
     * ```
     *
     * `bool offload_scan_batching_support = 17;`
     */
    public fun clearOffloadScanBatchingSupport() {
      _builder.clearOffloadScanBatchingSupport()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.sys.ble.BleOuterClass.BleDeviceInfo.copy(block: qaul.sys.ble.BleDeviceInfoKt.Dsl.() -> kotlin.Unit): qaul.sys.ble.BleOuterClass.BleDeviceInfo =
  qaul.sys.ble.BleDeviceInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

