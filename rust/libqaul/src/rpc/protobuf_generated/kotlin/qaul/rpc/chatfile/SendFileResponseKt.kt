// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/chat/chatfile_rpc.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package qaul.rpc.chatfile;

@kotlin.jvm.JvmName("-initializesendFileResponse")
public inline fun sendFileResponse(block: qaul.rpc.chatfile.SendFileResponseKt.Dsl.() -> kotlin.Unit): qaul.rpc.chatfile.ChatfileRpc.SendFileResponse =
  qaul.rpc.chatfile.SendFileResponseKt.Dsl._create(qaul.rpc.chatfile.ChatfileRpc.SendFileResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * Send File Response
 *
 * sends the result of the file send request to the UI
 * ```
 *
 * Protobuf type `qaul.rpc.chatfile.SendFileResponse`
 */
public object SendFileResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.rpc.chatfile.ChatfileRpc.SendFileResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.chatfile.ChatfileRpc.SendFileResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.chatfile.ChatfileRpc.SendFileResponse = _builder.build()

    /**
     * ```
     * was the file processing successful
     *
     * a success does not mean the file has been sent,
     * but that it was successfully scheduled for sending.
     * ```
     *
     * `bool success = 1;`
     */
    public var success: kotlin.Boolean
      @JvmName("getSuccess")
      get() = _builder.getSuccess()
      @JvmName("setSuccess")
      set(value) {
        _builder.setSuccess(value)
      }
    /**
     * ```
     * was the file processing successful
     *
     * a success does not mean the file has been sent,
     * but that it was successfully scheduled for sending.
     * ```
     *
     * `bool success = 1;`
     */
    public fun clearSuccess() {
      _builder.clearSuccess()
    }

    /**
     * ```
     * error reason
     * ```
     *
     * `string error = 2;`
     */
    public var error: kotlin.String
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * ```
     * error reason
     * ```
     *
     * `string error = 2;`
     */
    public fun clearError() {
      _builder.clearError()
    }

    /**
     * ```
     * file ID (only present if the sending was a success)
     * ```
     *
     * `uint64 file_id = 3;`
     */
    public var fileId: kotlin.Long
      @JvmName("getFileId")
      get() = _builder.getFileId()
      @JvmName("setFileId")
      set(value) {
        _builder.setFileId(value)
      }
    /**
     * ```
     * file ID (only present if the sending was a success)
     * ```
     *
     * `uint64 file_id = 3;`
     */
    public fun clearFileId() {
      _builder.clearFileId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.rpc.chatfile.ChatfileRpc.SendFileResponse.copy(block: qaul.rpc.chatfile.SendFileResponseKt.Dsl.() -> kotlin.Unit): qaul.rpc.chatfile.ChatfileRpc.SendFileResponse =
  qaul.rpc.chatfile.SendFileResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

