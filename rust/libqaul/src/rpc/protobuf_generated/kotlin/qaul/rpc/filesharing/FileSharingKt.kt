//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/filesharing/filesharing_rpc.proto

package qaul.rpc.filesharing;

@kotlin.jvm.JvmName("-initializefileSharing")
inline fun fileSharing(block: qaul.rpc.filesharing.FileSharingKt.Dsl.() -> kotlin.Unit): qaul.rpc.filesharing.FilesharingRpc.FileSharing =
  qaul.rpc.filesharing.FileSharingKt.Dsl._create(qaul.rpc.filesharing.FilesharingRpc.FileSharing.newBuilder()).apply { block() }._build()
object FileSharingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.rpc.filesharing.FilesharingRpc.FileSharing.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.filesharing.FilesharingRpc.FileSharing.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.filesharing.FilesharingRpc.FileSharing = _builder.build()

    /**
     * <pre>
     * request for sending file
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.SendFileRequest send_file_request = 1;</code>
     */
    var sendFileRequest: qaul.rpc.filesharing.FilesharingRpc.SendFileRequest
      @JvmName("getSendFileRequest")
      get() = _builder.getSendFileRequest()
      @JvmName("setSendFileRequest")
      set(value) {
        _builder.setSendFileRequest(value)
      }
    /**
     * <pre>
     * request for sending file
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.SendFileRequest send_file_request = 1;</code>
     */
    fun clearSendFileRequest() {
      _builder.clearSendFileRequest()
    }
    /**
     * <pre>
     * request for sending file
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.SendFileRequest send_file_request = 1;</code>
     * @return Whether the sendFileRequest field is set.
     */
    fun hasSendFileRequest(): kotlin.Boolean {
      return _builder.hasSendFileRequest()
    }

    /**
     * <pre>
     * file history request
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.FileHistoryRequest file_history = 2;</code>
     */
    var fileHistory: qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest
      @JvmName("getFileHistory")
      get() = _builder.getFileHistory()
      @JvmName("setFileHistory")
      set(value) {
        _builder.setFileHistory(value)
      }
    /**
     * <pre>
     * file history request
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.FileHistoryRequest file_history = 2;</code>
     */
    fun clearFileHistory() {
      _builder.clearFileHistory()
    }
    /**
     * <pre>
     * file history request
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.FileHistoryRequest file_history = 2;</code>
     * @return Whether the fileHistory field is set.
     */
    fun hasFileHistory(): kotlin.Boolean {
      return _builder.hasFileHistory()
    }

    /**
     * <pre>
     * file history response
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.FileHistoryResponse file_history_response = 3;</code>
     */
    var fileHistoryResponse: qaul.rpc.filesharing.FilesharingRpc.FileHistoryResponse
      @JvmName("getFileHistoryResponse")
      get() = _builder.getFileHistoryResponse()
      @JvmName("setFileHistoryResponse")
      set(value) {
        _builder.setFileHistoryResponse(value)
      }
    /**
     * <pre>
     * file history response
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.FileHistoryResponse file_history_response = 3;</code>
     */
    fun clearFileHistoryResponse() {
      _builder.clearFileHistoryResponse()
    }
    /**
     * <pre>
     * file history response
     * </pre>
     *
     * <code>.qaul.rpc.filesharing.FileHistoryResponse file_history_response = 3;</code>
     * @return Whether the fileHistoryResponse field is set.
     */
    fun hasFileHistoryResponse(): kotlin.Boolean {
      return _builder.hasFileHistoryResponse()
    }
    val messageCase: qaul.rpc.filesharing.FilesharingRpc.FileSharing.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.rpc.filesharing.FilesharingRpc.FileSharing.copy(block: qaul.rpc.filesharing.FileSharingKt.Dsl.() -> kotlin.Unit): qaul.rpc.filesharing.FilesharingRpc.FileSharing =
  qaul.rpc.filesharing.FileSharingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val qaul.rpc.filesharing.FilesharingRpc.FileSharingOrBuilder.sendFileRequestOrNull: qaul.rpc.filesharing.FilesharingRpc.SendFileRequest?
  get() = if (hasSendFileRequest()) getSendFileRequest() else null

val qaul.rpc.filesharing.FilesharingRpc.FileSharingOrBuilder.fileHistoryOrNull: qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest?
  get() = if (hasFileHistory()) getFileHistory() else null

val qaul.rpc.filesharing.FilesharingRpc.FileSharingOrBuilder.fileHistoryResponseOrNull: qaul.rpc.filesharing.FilesharingRpc.FileHistoryResponse?
  get() = if (hasFileHistoryResponse()) getFileHistoryResponse() else null

