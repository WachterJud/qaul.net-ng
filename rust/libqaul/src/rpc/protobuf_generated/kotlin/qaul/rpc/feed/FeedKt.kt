// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/feed/feed.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package qaul.rpc.feed;

@kotlin.jvm.JvmName("-initializefeed")
public inline fun feed(block: qaul.rpc.feed.FeedKt.Dsl.() -> kotlin.Unit): qaul.rpc.feed.FeedOuterClass.Feed =
  qaul.rpc.feed.FeedKt.Dsl._create(qaul.rpc.feed.FeedOuterClass.Feed.newBuilder()).apply { block() }._build()
/**
 * ```
 * Feed service RPC message container
 * ```
 *
 * Protobuf type `qaul.rpc.feed.Feed`
 */
public object FeedKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.rpc.feed.FeedOuterClass.Feed.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.feed.FeedOuterClass.Feed.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.feed.FeedOuterClass.Feed = _builder.build()

    /**
     * ```
     * received messages
     * ```
     *
     * `.qaul.rpc.feed.FeedMessageList received = 1;`
     */
    public var received: qaul.rpc.feed.FeedOuterClass.FeedMessageList
      @JvmName("getReceived")
      get() = _builder.getReceived()
      @JvmName("setReceived")
      set(value) {
        _builder.setReceived(value)
      }
    /**
     * ```
     * received messages
     * ```
     *
     * `.qaul.rpc.feed.FeedMessageList received = 1;`
     */
    public fun clearReceived() {
      _builder.clearReceived()
    }
    /**
     * ```
     * received messages
     * ```
     *
     * `.qaul.rpc.feed.FeedMessageList received = 1;`
     * @return Whether the received field is set.
     */
    public fun hasReceived(): kotlin.Boolean {
      return _builder.hasReceived()
    }

    /**
     * ```
     * send a new feed message
     * ```
     *
     * `.qaul.rpc.feed.SendMessage send = 2;`
     */
    public var send: qaul.rpc.feed.FeedOuterClass.SendMessage
      @JvmName("getSend")
      get() = _builder.getSend()
      @JvmName("setSend")
      set(value) {
        _builder.setSend(value)
      }
    /**
     * ```
     * send a new feed message
     * ```
     *
     * `.qaul.rpc.feed.SendMessage send = 2;`
     */
    public fun clearSend() {
      _builder.clearSend()
    }
    /**
     * ```
     * send a new feed message
     * ```
     *
     * `.qaul.rpc.feed.SendMessage send = 2;`
     * @return Whether the send field is set.
     */
    public fun hasSend(): kotlin.Boolean {
      return _builder.hasSend()
    }

    /**
     * ```
     * request received messages
     * ```
     *
     * `.qaul.rpc.feed.FeedMessageRequest request = 3;`
     */
    public var request: qaul.rpc.feed.FeedOuterClass.FeedMessageRequest
      @JvmName("getRequest")
      get() = _builder.getRequest()
      @JvmName("setRequest")
      set(value) {
        _builder.setRequest(value)
      }
    /**
     * ```
     * request received messages
     * ```
     *
     * `.qaul.rpc.feed.FeedMessageRequest request = 3;`
     */
    public fun clearRequest() {
      _builder.clearRequest()
    }
    /**
     * ```
     * request received messages
     * ```
     *
     * `.qaul.rpc.feed.FeedMessageRequest request = 3;`
     * @return Whether the request field is set.
     */
    public fun hasRequest(): kotlin.Boolean {
      return _builder.hasRequest()
    }
    public val messageCase: qaul.rpc.feed.FeedOuterClass.Feed.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.rpc.feed.FeedOuterClass.Feed.copy(block: qaul.rpc.feed.FeedKt.Dsl.() -> kotlin.Unit): qaul.rpc.feed.FeedOuterClass.Feed =
  qaul.rpc.feed.FeedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val qaul.rpc.feed.FeedOuterClass.FeedOrBuilder.receivedOrNull: qaul.rpc.feed.FeedOuterClass.FeedMessageList?
  get() = if (hasReceived()) getReceived() else null

public val qaul.rpc.feed.FeedOuterClass.FeedOrBuilder.sendOrNull: qaul.rpc.feed.FeedOuterClass.SendMessage?
  get() = if (hasSend()) getSend() else null

public val qaul.rpc.feed.FeedOuterClass.FeedOrBuilder.requestOrNull: qaul.rpc.feed.FeedOuterClass.FeedMessageRequest?
  get() = if (hasRequest()) getRequest() else null

