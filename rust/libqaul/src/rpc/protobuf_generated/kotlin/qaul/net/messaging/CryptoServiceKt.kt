// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/messaging/messaging.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package qaul.net.messaging;

@kotlin.jvm.JvmName("-initializecryptoService")
public inline fun cryptoService(block: qaul.net.messaging.CryptoServiceKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.CryptoService =
  qaul.net.messaging.CryptoServiceKt.Dsl._create(qaul.net.messaging.MessagingOuterClass.CryptoService.newBuilder()).apply { block() }._build()
/**
 * ```
 * Crypto Service Message
 *
 * This message is for crypto specific tasks,
 * such as completing a handshake.
 * ```
 *
 * Protobuf type `qaul.net.messaging.CryptoService`
 */
public object CryptoServiceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.net.messaging.MessagingOuterClass.CryptoService.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.net.messaging.MessagingOuterClass.CryptoService.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.net.messaging.MessagingOuterClass.CryptoService = _builder.build()

    /**
     * ```
     * message data
     * ```
     *
     * `bytes content = 1;`
     */
    public var content: com.google.protobuf.ByteString
      @JvmName("getContent")
      get() = _builder.getContent()
      @JvmName("setContent")
      set(value) {
        _builder.setContent(value)
      }
    /**
     * ```
     * message data
     * ```
     *
     * `bytes content = 1;`
     */
    public fun clearContent() {
      _builder.clearContent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.net.messaging.MessagingOuterClass.CryptoService.copy(block: qaul.net.messaging.CryptoServiceKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.CryptoService =
  qaul.net.messaging.CryptoServiceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

