// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/messaging/messaging.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package qaul.net.messaging;

@kotlin.jvm.JvmName("-initializeenvelopPayload")
public inline fun envelopPayload(block: qaul.net.messaging.EnvelopPayloadKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.EnvelopPayload =
  qaul.net.messaging.EnvelopPayloadKt.Dsl._create(qaul.net.messaging.MessagingOuterClass.EnvelopPayload.newBuilder()).apply { block() }._build()
/**
 * ```
 * envelop payload
 * ```
 *
 * Protobuf type `qaul.net.messaging.EnvelopPayload`
 */
public object EnvelopPayloadKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.net.messaging.MessagingOuterClass.EnvelopPayload.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.net.messaging.MessagingOuterClass.EnvelopPayload.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.net.messaging.MessagingOuterClass.EnvelopPayload = _builder.build()

    /**
     * ```
     * encrypted message data
     * ```
     *
     * `.qaul.net.messaging.Encrypted encrypted = 1;`
     */
    public var encrypted: qaul.net.messaging.MessagingOuterClass.Encrypted
      @JvmName("getEncrypted")
      get() = _builder.getEncrypted()
      @JvmName("setEncrypted")
      set(value) {
        _builder.setEncrypted(value)
      }
    /**
     * ```
     * encrypted message data
     * ```
     *
     * `.qaul.net.messaging.Encrypted encrypted = 1;`
     */
    public fun clearEncrypted() {
      _builder.clearEncrypted()
    }
    /**
     * ```
     * encrypted message data
     * ```
     *
     * `.qaul.net.messaging.Encrypted encrypted = 1;`
     * @return Whether the encrypted field is set.
     */
    public fun hasEncrypted(): kotlin.Boolean {
      return _builder.hasEncrypted()
    }

    /**
     * ```
     * DTN message
     * ```
     *
     * `bytes dtn = 2;`
     */
    public var dtn: com.google.protobuf.ByteString
      @JvmName("getDtn")
      get() = _builder.getDtn()
      @JvmName("setDtn")
      set(value) {
        _builder.setDtn(value)
      }
    /**
     * ```
     * DTN message
     * ```
     *
     * `bytes dtn = 2;`
     */
    public fun clearDtn() {
      _builder.clearDtn()
    }
    /**
     * ```
     * DTN message
     * ```
     *
     * `bytes dtn = 2;`
     * @return Whether the dtn field is set.
     */
    public fun hasDtn(): kotlin.Boolean {
      return _builder.hasDtn()
    }
    public val payloadCase: qaul.net.messaging.MessagingOuterClass.EnvelopPayload.PayloadCase
      @JvmName("getPayloadCase")
      get() = _builder.getPayloadCase()

    public fun clearPayload() {
      _builder.clearPayload()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.net.messaging.MessagingOuterClass.EnvelopPayload.copy(block: qaul.net.messaging.EnvelopPayloadKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.EnvelopPayload =
  qaul.net.messaging.EnvelopPayloadKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val qaul.net.messaging.MessagingOuterClass.EnvelopPayloadOrBuilder.encryptedOrNull: qaul.net.messaging.MessagingOuterClass.Encrypted?
  get() = if (hasEncrypted()) getEncrypted() else null

