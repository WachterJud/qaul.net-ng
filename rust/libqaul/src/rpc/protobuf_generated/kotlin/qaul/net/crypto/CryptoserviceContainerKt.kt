// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/crypto/crypto_net.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package qaul.net.crypto;

@kotlin.jvm.JvmName("-initializecryptoserviceContainer")
public inline fun cryptoserviceContainer(block: qaul.net.crypto.CryptoserviceContainerKt.Dsl.() -> kotlin.Unit): qaul.net.crypto.CryptoNet.CryptoserviceContainer =
  qaul.net.crypto.CryptoserviceContainerKt.Dsl._create(qaul.net.crypto.CryptoNet.CryptoserviceContainer.newBuilder()).apply { block() }._build()
/**
 * ```
 * Cryptoservice sending container
 * ```
 *
 * Protobuf type `qaul.net.crypto.CryptoserviceContainer`
 */
public object CryptoserviceContainerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.net.crypto.CryptoNet.CryptoserviceContainer.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.net.crypto.CryptoNet.CryptoserviceContainer.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.net.crypto.CryptoNet.CryptoserviceContainer = _builder.build()

    /**
     * ```
     * Second Handshake Message
     * ```
     *
     * `.qaul.net.crypto.SecondHandshake second_handshake = 1;`
     */
    public var secondHandshake: qaul.net.crypto.CryptoNet.SecondHandshake
      @JvmName("getSecondHandshake")
      get() = _builder.getSecondHandshake()
      @JvmName("setSecondHandshake")
      set(value) {
        _builder.setSecondHandshake(value)
      }
    /**
     * ```
     * Second Handshake Message
     * ```
     *
     * `.qaul.net.crypto.SecondHandshake second_handshake = 1;`
     */
    public fun clearSecondHandshake() {
      _builder.clearSecondHandshake()
    }
    /**
     * ```
     * Second Handshake Message
     * ```
     *
     * `.qaul.net.crypto.SecondHandshake second_handshake = 1;`
     * @return Whether the secondHandshake field is set.
     */
    public fun hasSecondHandshake(): kotlin.Boolean {
      return _builder.hasSecondHandshake()
    }
    public val messageCase: qaul.net.crypto.CryptoNet.CryptoserviceContainer.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.net.crypto.CryptoNet.CryptoserviceContainer.copy(block: qaul.net.crypto.CryptoserviceContainerKt.Dsl.() -> kotlin.Unit): qaul.net.crypto.CryptoNet.CryptoserviceContainer =
  qaul.net.crypto.CryptoserviceContainerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val qaul.net.crypto.CryptoNet.CryptoserviceContainerOrBuilder.secondHandshakeOrNull: qaul.net.crypto.CryptoNet.SecondHandshake?
  get() = if (hasSecondHandshake()) getSecondHandshake() else null

