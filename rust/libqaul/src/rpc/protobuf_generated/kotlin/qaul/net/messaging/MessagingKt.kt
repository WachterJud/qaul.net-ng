//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/messaging/messaging.proto

package qaul.net.messaging;

@kotlin.jvm.JvmName("-initializemessaging")
public inline fun messaging(block: qaul.net.messaging.MessagingKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.Messaging =
  qaul.net.messaging.MessagingKt.Dsl._create(qaul.net.messaging.MessagingOuterClass.Messaging.newBuilder()).apply { block() }._build()
public object MessagingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.net.messaging.MessagingOuterClass.Messaging.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.net.messaging.MessagingOuterClass.Messaging.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.net.messaging.MessagingOuterClass.Messaging = _builder.build()

    /**
     * <code>.qaul.net.messaging.Confirmation confirmation_message = 1;</code>
     */
    public var confirmationMessage: qaul.net.messaging.MessagingOuterClass.Confirmation
      @JvmName("getConfirmationMessage")
      get() = _builder.getConfirmationMessage()
      @JvmName("setConfirmationMessage")
      set(value) {
        _builder.setConfirmationMessage(value)
      }
    /**
     * <code>.qaul.net.messaging.Confirmation confirmation_message = 1;</code>
     */
    public fun clearConfirmationMessage() {
      _builder.clearConfirmationMessage()
    }
    /**
     * <code>.qaul.net.messaging.Confirmation confirmation_message = 1;</code>
     * @return Whether the confirmationMessage field is set.
     */
    public fun hasConfirmationMessage(): kotlin.Boolean {
      return _builder.hasConfirmationMessage()
    }

    /**
     * <code>.qaul.net.messaging.ChatMessage chat_message = 2;</code>
     */
    public var chatMessage: qaul.net.messaging.MessagingOuterClass.ChatMessage
      @JvmName("getChatMessage")
      get() = _builder.getChatMessage()
      @JvmName("setChatMessage")
      set(value) {
        _builder.setChatMessage(value)
      }
    /**
     * <code>.qaul.net.messaging.ChatMessage chat_message = 2;</code>
     */
    public fun clearChatMessage() {
      _builder.clearChatMessage()
    }
    /**
     * <code>.qaul.net.messaging.ChatMessage chat_message = 2;</code>
     * @return Whether the chatMessage field is set.
     */
    public fun hasChatMessage(): kotlin.Boolean {
      return _builder.hasChatMessage()
    }

    /**
     * <code>.qaul.net.messaging.CryptoService crypto_service = 3;</code>
     */
    public var cryptoService: qaul.net.messaging.MessagingOuterClass.CryptoService
      @JvmName("getCryptoService")
      get() = _builder.getCryptoService()
      @JvmName("setCryptoService")
      set(value) {
        _builder.setCryptoService(value)
      }
    /**
     * <code>.qaul.net.messaging.CryptoService crypto_service = 3;</code>
     */
    public fun clearCryptoService() {
      _builder.clearCryptoService()
    }
    /**
     * <code>.qaul.net.messaging.CryptoService crypto_service = 3;</code>
     * @return Whether the cryptoService field is set.
     */
    public fun hasCryptoService(): kotlin.Boolean {
      return _builder.hasCryptoService()
    }
    public val messageCase: qaul.net.messaging.MessagingOuterClass.Messaging.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.net.messaging.MessagingOuterClass.Messaging.copy(block: qaul.net.messaging.MessagingKt.Dsl.() -> kotlin.Unit): qaul.net.messaging.MessagingOuterClass.Messaging =
  qaul.net.messaging.MessagingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val qaul.net.messaging.MessagingOuterClass.MessagingOrBuilder.confirmationMessageOrNull: qaul.net.messaging.MessagingOuterClass.Confirmation?
  get() = if (hasConfirmationMessage()) getConfirmationMessage() else null

val qaul.net.messaging.MessagingOuterClass.MessagingOrBuilder.chatMessageOrNull: qaul.net.messaging.MessagingOuterClass.ChatMessage?
  get() = if (hasChatMessage()) getChatMessage() else null

val qaul.net.messaging.MessagingOuterClass.MessagingOrBuilder.cryptoServiceOrNull: qaul.net.messaging.MessagingOuterClass.CryptoService?
  get() = if (hasCryptoService()) getCryptoService() else null

