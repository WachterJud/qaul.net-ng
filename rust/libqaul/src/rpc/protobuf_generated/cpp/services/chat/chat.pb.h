// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/chat/chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fchat_2fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fchat_2fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fchat_2fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fchat_2fchat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fchat_2fchat_2eproto;
namespace qaul {
namespace rpc {
namespace chat {
class Chat;
struct ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class ChatConversationList;
struct ChatConversationListDefaultTypeInternal;
extern ChatConversationListDefaultTypeInternal _ChatConversationList_default_instance_;
class ChatConversationRequest;
struct ChatConversationRequestDefaultTypeInternal;
extern ChatConversationRequestDefaultTypeInternal _ChatConversationRequest_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ChatMessageSend;
struct ChatMessageSendDefaultTypeInternal;
extern ChatMessageSendDefaultTypeInternal _ChatMessageSend_default_instance_;
class ChatOverview;
struct ChatOverviewDefaultTypeInternal;
extern ChatOverviewDefaultTypeInternal _ChatOverview_default_instance_;
class ChatOverviewList;
struct ChatOverviewListDefaultTypeInternal;
extern ChatOverviewListDefaultTypeInternal _ChatOverviewList_default_instance_;
class ChatOverviewRequest;
struct ChatOverviewRequestDefaultTypeInternal;
extern ChatOverviewRequestDefaultTypeInternal _ChatOverviewRequest_default_instance_;
class GroupEvent;
struct GroupEventDefaultTypeInternal;
extern GroupEventDefaultTypeInternal _GroupEvent_default_instance_;
}  // namespace chat
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::chat::Chat* Arena::CreateMaybeMessage<::qaul::rpc::chat::Chat>(Arena*);
template<> ::qaul::rpc::chat::ChatConversationList* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatConversationList>(Arena*);
template<> ::qaul::rpc::chat::ChatConversationRequest* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatConversationRequest>(Arena*);
template<> ::qaul::rpc::chat::ChatMessage* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatMessage>(Arena*);
template<> ::qaul::rpc::chat::ChatMessageSend* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatMessageSend>(Arena*);
template<> ::qaul::rpc::chat::ChatOverview* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatOverview>(Arena*);
template<> ::qaul::rpc::chat::ChatOverviewList* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatOverviewList>(Arena*);
template<> ::qaul::rpc::chat::ChatOverviewRequest* Arena::CreateMaybeMessage<::qaul::rpc::chat::ChatOverviewRequest>(Arena*);
template<> ::qaul::rpc::chat::GroupEvent* Arena::CreateMaybeMessage<::qaul::rpc::chat::GroupEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace chat {

enum ContentType : int {
  chat = 0,
  group = 1,
  file = 2,
  rtc = 3,
  group_event = 4,
  ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ContentType_IsValid(int value);
constexpr ContentType ContentType_MIN = chat;
constexpr ContentType ContentType_MAX = group_event;
constexpr int ContentType_ARRAYSIZE = ContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentType_descriptor();
template<typename T>
inline const std::string& ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContentType_descriptor(), enum_t_value);
}
inline bool ContentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContentType>(
    ContentType_descriptor(), name, value);
}
enum MessageStatus : int {
  SENDING = 0,
  SENT = 1,
  RECEIVED = 2,
  RECEIVED_BY_ALL = 3,
  MessageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageStatus_IsValid(int value);
constexpr MessageStatus MessageStatus_MIN = SENDING;
constexpr MessageStatus MessageStatus_MAX = RECEIVED_BY_ALL;
constexpr int MessageStatus_ARRAYSIZE = MessageStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageStatus_descriptor();
template<typename T>
inline const std::string& MessageStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageStatus_descriptor(), enum_t_value);
}
inline bool MessageStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageStatus>(
    MessageStatus_descriptor(), name, value);
}
enum GroupEventType : int {
  NONE = 0,
  GROUP_JOINED = 1,
  GROUP_LEFT = 2,
  GroupEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupEventType_IsValid(int value);
constexpr GroupEventType GroupEventType_MIN = NONE;
constexpr GroupEventType GroupEventType_MAX = GROUP_LEFT;
constexpr int GroupEventType_ARRAYSIZE = GroupEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupEventType_descriptor();
template<typename T>
inline const std::string& GroupEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupEventType_descriptor(), enum_t_value);
}
inline bool GroupEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupEventType>(
    GroupEventType_descriptor(), name, value);
}
// ===================================================================

class Chat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.Chat) */ {
 public:
  inline Chat() : Chat(nullptr) {}
  ~Chat() override;
  explicit PROTOBUF_CONSTEXPR Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kOverviewRequest = 1,
    kOverviewList = 2,
    kConversationRequest = 3,
    kConversationList = 4,
    kSend = 5,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Chat& from) {
    Chat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.Chat";
  }
  protected:
  explicit Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverviewRequestFieldNumber = 1,
    kOverviewListFieldNumber = 2,
    kConversationRequestFieldNumber = 3,
    kConversationListFieldNumber = 4,
    kSendFieldNumber = 5,
  };
  // .qaul.rpc.chat.ChatOverviewRequest overview_request = 1;
  bool has_overview_request() const;
  private:
  bool _internal_has_overview_request() const;
  public:
  void clear_overview_request();
  const ::qaul::rpc::chat::ChatOverviewRequest& overview_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatOverviewRequest* release_overview_request();
  ::qaul::rpc::chat::ChatOverviewRequest* mutable_overview_request();
  void set_allocated_overview_request(::qaul::rpc::chat::ChatOverviewRequest* overview_request);
  private:
  const ::qaul::rpc::chat::ChatOverviewRequest& _internal_overview_request() const;
  ::qaul::rpc::chat::ChatOverviewRequest* _internal_mutable_overview_request();
  public:
  void unsafe_arena_set_allocated_overview_request(
      ::qaul::rpc::chat::ChatOverviewRequest* overview_request);
  ::qaul::rpc::chat::ChatOverviewRequest* unsafe_arena_release_overview_request();

  // .qaul.rpc.chat.ChatOverviewList overview_list = 2;
  bool has_overview_list() const;
  private:
  bool _internal_has_overview_list() const;
  public:
  void clear_overview_list();
  const ::qaul::rpc::chat::ChatOverviewList& overview_list() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatOverviewList* release_overview_list();
  ::qaul::rpc::chat::ChatOverviewList* mutable_overview_list();
  void set_allocated_overview_list(::qaul::rpc::chat::ChatOverviewList* overview_list);
  private:
  const ::qaul::rpc::chat::ChatOverviewList& _internal_overview_list() const;
  ::qaul::rpc::chat::ChatOverviewList* _internal_mutable_overview_list();
  public:
  void unsafe_arena_set_allocated_overview_list(
      ::qaul::rpc::chat::ChatOverviewList* overview_list);
  ::qaul::rpc::chat::ChatOverviewList* unsafe_arena_release_overview_list();

  // .qaul.rpc.chat.ChatConversationRequest conversation_request = 3;
  bool has_conversation_request() const;
  private:
  bool _internal_has_conversation_request() const;
  public:
  void clear_conversation_request();
  const ::qaul::rpc::chat::ChatConversationRequest& conversation_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatConversationRequest* release_conversation_request();
  ::qaul::rpc::chat::ChatConversationRequest* mutable_conversation_request();
  void set_allocated_conversation_request(::qaul::rpc::chat::ChatConversationRequest* conversation_request);
  private:
  const ::qaul::rpc::chat::ChatConversationRequest& _internal_conversation_request() const;
  ::qaul::rpc::chat::ChatConversationRequest* _internal_mutable_conversation_request();
  public:
  void unsafe_arena_set_allocated_conversation_request(
      ::qaul::rpc::chat::ChatConversationRequest* conversation_request);
  ::qaul::rpc::chat::ChatConversationRequest* unsafe_arena_release_conversation_request();

  // .qaul.rpc.chat.ChatConversationList conversation_list = 4;
  bool has_conversation_list() const;
  private:
  bool _internal_has_conversation_list() const;
  public:
  void clear_conversation_list();
  const ::qaul::rpc::chat::ChatConversationList& conversation_list() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatConversationList* release_conversation_list();
  ::qaul::rpc::chat::ChatConversationList* mutable_conversation_list();
  void set_allocated_conversation_list(::qaul::rpc::chat::ChatConversationList* conversation_list);
  private:
  const ::qaul::rpc::chat::ChatConversationList& _internal_conversation_list() const;
  ::qaul::rpc::chat::ChatConversationList* _internal_mutable_conversation_list();
  public:
  void unsafe_arena_set_allocated_conversation_list(
      ::qaul::rpc::chat::ChatConversationList* conversation_list);
  ::qaul::rpc::chat::ChatConversationList* unsafe_arena_release_conversation_list();

  // .qaul.rpc.chat.ChatMessageSend send = 5;
  bool has_send() const;
  private:
  bool _internal_has_send() const;
  public:
  void clear_send();
  const ::qaul::rpc::chat::ChatMessageSend& send() const;
  PROTOBUF_NODISCARD ::qaul::rpc::chat::ChatMessageSend* release_send();
  ::qaul::rpc::chat::ChatMessageSend* mutable_send();
  void set_allocated_send(::qaul::rpc::chat::ChatMessageSend* send);
  private:
  const ::qaul::rpc::chat::ChatMessageSend& _internal_send() const;
  ::qaul::rpc::chat::ChatMessageSend* _internal_mutable_send();
  public:
  void unsafe_arena_set_allocated_send(
      ::qaul::rpc::chat::ChatMessageSend* send);
  ::qaul::rpc::chat::ChatMessageSend* unsafe_arena_release_send();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.Chat)
 private:
  class _Internal;
  void set_has_overview_request();
  void set_has_overview_list();
  void set_has_conversation_request();
  void set_has_conversation_list();
  void set_has_send();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::chat::ChatOverviewRequest* overview_request_;
      ::qaul::rpc::chat::ChatOverviewList* overview_list_;
      ::qaul::rpc::chat::ChatConversationRequest* conversation_request_;
      ::qaul::rpc::chat::ChatConversationList* conversation_list_;
      ::qaul::rpc::chat::ChatMessageSend* send_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatOverviewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatOverviewRequest) */ {
 public:
  inline ChatOverviewRequest() : ChatOverviewRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChatOverviewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatOverviewRequest(const ChatOverviewRequest& from);
  ChatOverviewRequest(ChatOverviewRequest&& from) noexcept
    : ChatOverviewRequest() {
    *this = ::std::move(from);
  }

  inline ChatOverviewRequest& operator=(const ChatOverviewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatOverviewRequest& operator=(ChatOverviewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatOverviewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatOverviewRequest* internal_default_instance() {
    return reinterpret_cast<const ChatOverviewRequest*>(
               &_ChatOverviewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatOverviewRequest& a, ChatOverviewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatOverviewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatOverviewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatOverviewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatOverviewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChatOverviewRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChatOverviewRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatOverviewRequest";
  }
  protected:
  explicit ChatOverviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatOverviewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatOverviewList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatOverviewList) */ {
 public:
  inline ChatOverviewList() : ChatOverviewList(nullptr) {}
  ~ChatOverviewList() override;
  explicit PROTOBUF_CONSTEXPR ChatOverviewList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatOverviewList(const ChatOverviewList& from);
  ChatOverviewList(ChatOverviewList&& from) noexcept
    : ChatOverviewList() {
    *this = ::std::move(from);
  }

  inline ChatOverviewList& operator=(const ChatOverviewList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatOverviewList& operator=(ChatOverviewList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatOverviewList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatOverviewList* internal_default_instance() {
    return reinterpret_cast<const ChatOverviewList*>(
               &_ChatOverviewList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatOverviewList& a, ChatOverviewList& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatOverviewList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatOverviewList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatOverviewList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatOverviewList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatOverviewList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatOverviewList& from) {
    ChatOverviewList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatOverviewList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatOverviewList";
  }
  protected:
  explicit ChatOverviewList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverviewListFieldNumber = 1,
  };
  // repeated .qaul.rpc.chat.ChatOverview overview_list = 1;
  int overview_list_size() const;
  private:
  int _internal_overview_list_size() const;
  public:
  void clear_overview_list();
  ::qaul::rpc::chat::ChatOverview* mutable_overview_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatOverview >*
      mutable_overview_list();
  private:
  const ::qaul::rpc::chat::ChatOverview& _internal_overview_list(int index) const;
  ::qaul::rpc::chat::ChatOverview* _internal_add_overview_list();
  public:
  const ::qaul::rpc::chat::ChatOverview& overview_list(int index) const;
  ::qaul::rpc::chat::ChatOverview* add_overview_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatOverview >&
      overview_list() const;

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatOverviewList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatOverview > overview_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatOverview final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatOverview) */ {
 public:
  inline ChatOverview() : ChatOverview(nullptr) {}
  ~ChatOverview() override;
  explicit PROTOBUF_CONSTEXPR ChatOverview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatOverview(const ChatOverview& from);
  ChatOverview(ChatOverview&& from) noexcept
    : ChatOverview() {
    *this = ::std::move(from);
  }

  inline ChatOverview& operator=(const ChatOverview& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatOverview& operator=(ChatOverview&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatOverview& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatOverview* internal_default_instance() {
    return reinterpret_cast<const ChatOverview*>(
               &_ChatOverview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatOverview& a, ChatOverview& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatOverview* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatOverview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatOverview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatOverview>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatOverview& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatOverview& from) {
    ChatOverview::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatOverview* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatOverview";
  }
  protected:
  explicit ChatOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationIdFieldNumber = 1,
    kNameFieldNumber = 3,
    kContentFieldNumber = 7,
    kLastMessageSenderIdFieldNumber = 8,
    kLastMessageIndexFieldNumber = 2,
    kLastMessageAtFieldNumber = 4,
    kUnreadFieldNumber = 5,
    kContentTypeFieldNumber = 6,
  };
  // bytes conversation_id = 1;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes content = 7;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // bytes last_message_sender_id = 8;
  void clear_last_message_sender_id();
  const std::string& last_message_sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_message_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_message_sender_id();
  PROTOBUF_NODISCARD std::string* release_last_message_sender_id();
  void set_allocated_last_message_sender_id(std::string* last_message_sender_id);
  private:
  const std::string& _internal_last_message_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_message_sender_id(const std::string& value);
  std::string* _internal_mutable_last_message_sender_id();
  public:

  // uint64 last_message_index = 2;
  void clear_last_message_index();
  uint64_t last_message_index() const;
  void set_last_message_index(uint64_t value);
  private:
  uint64_t _internal_last_message_index() const;
  void _internal_set_last_message_index(uint64_t value);
  public:

  // uint64 last_message_at = 4;
  void clear_last_message_at();
  uint64_t last_message_at() const;
  void set_last_message_at(uint64_t value);
  private:
  uint64_t _internal_last_message_at() const;
  void _internal_set_last_message_at(uint64_t value);
  public:

  // int32 unread = 5;
  void clear_unread();
  int32_t unread() const;
  void set_unread(int32_t value);
  private:
  int32_t _internal_unread() const;
  void _internal_set_unread(int32_t value);
  public:

  // .qaul.rpc.chat.ContentType content_type = 6;
  void clear_content_type();
  ::qaul::rpc::chat::ContentType content_type() const;
  void set_content_type(::qaul::rpc::chat::ContentType value);
  private:
  ::qaul::rpc::chat::ContentType _internal_content_type() const;
  void _internal_set_content_type(::qaul::rpc::chat::ContentType value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatOverview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_message_sender_id_;
    uint64_t last_message_index_;
    uint64_t last_message_at_;
    int32_t unread_;
    int content_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatConversationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatConversationRequest) */ {
 public:
  inline ChatConversationRequest() : ChatConversationRequest(nullptr) {}
  ~ChatConversationRequest() override;
  explicit PROTOBUF_CONSTEXPR ChatConversationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatConversationRequest(const ChatConversationRequest& from);
  ChatConversationRequest(ChatConversationRequest&& from) noexcept
    : ChatConversationRequest() {
    *this = ::std::move(from);
  }

  inline ChatConversationRequest& operator=(const ChatConversationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatConversationRequest& operator=(ChatConversationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatConversationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatConversationRequest* internal_default_instance() {
    return reinterpret_cast<const ChatConversationRequest*>(
               &_ChatConversationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatConversationRequest& a, ChatConversationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatConversationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatConversationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatConversationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatConversationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatConversationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatConversationRequest& from) {
    ChatConversationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatConversationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatConversationRequest";
  }
  protected:
  explicit ChatConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationIdFieldNumber = 1,
    kLastIndexFieldNumber = 2,
  };
  // bytes conversation_id = 1;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // uint64 last_index = 2;
  void clear_last_index();
  uint64_t last_index() const;
  void set_last_index(uint64_t value);
  private:
  uint64_t _internal_last_index() const;
  void _internal_set_last_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatConversationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
    uint64_t last_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatConversationList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatConversationList) */ {
 public:
  inline ChatConversationList() : ChatConversationList(nullptr) {}
  ~ChatConversationList() override;
  explicit PROTOBUF_CONSTEXPR ChatConversationList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatConversationList(const ChatConversationList& from);
  ChatConversationList(ChatConversationList&& from) noexcept
    : ChatConversationList() {
    *this = ::std::move(from);
  }

  inline ChatConversationList& operator=(const ChatConversationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatConversationList& operator=(ChatConversationList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatConversationList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatConversationList* internal_default_instance() {
    return reinterpret_cast<const ChatConversationList*>(
               &_ChatConversationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatConversationList& a, ChatConversationList& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatConversationList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatConversationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatConversationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatConversationList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatConversationList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatConversationList& from) {
    ChatConversationList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatConversationList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatConversationList";
  }
  protected:
  explicit ChatConversationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageListFieldNumber = 2,
    kConversationIdFieldNumber = 1,
  };
  // repeated .qaul.rpc.chat.ChatMessage message_list = 2;
  int message_list_size() const;
  private:
  int _internal_message_list_size() const;
  public:
  void clear_message_list();
  ::qaul::rpc::chat::ChatMessage* mutable_message_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >*
      mutable_message_list();
  private:
  const ::qaul::rpc::chat::ChatMessage& _internal_message_list(int index) const;
  ::qaul::rpc::chat::ChatMessage* _internal_add_message_list();
  public:
  const ::qaul::rpc::chat::ChatMessage& message_list(int index) const;
  ::qaul::rpc::chat::ChatMessage* add_message_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >&
      message_list() const;

  // bytes conversation_id = 1;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatConversationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage > message_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kConversationIdFieldNumber = 5,
    kContentFieldNumber = 9,
    kIndexFieldNumber = 1,
    kSentAtFieldNumber = 6,
    kStatusFieldNumber = 4,
    kContentTypeFieldNumber = 8,
    kReceivedAtFieldNumber = 7,
  };
  // bytes sender_id = 2;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // bytes message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bytes conversation_id = 5;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // bytes content = 9;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 index = 1;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint64 sent_at = 6;
  void clear_sent_at();
  uint64_t sent_at() const;
  void set_sent_at(uint64_t value);
  private:
  uint64_t _internal_sent_at() const;
  void _internal_set_sent_at(uint64_t value);
  public:

  // .qaul.rpc.chat.MessageStatus status = 4;
  void clear_status();
  ::qaul::rpc::chat::MessageStatus status() const;
  void set_status(::qaul::rpc::chat::MessageStatus value);
  private:
  ::qaul::rpc::chat::MessageStatus _internal_status() const;
  void _internal_set_status(::qaul::rpc::chat::MessageStatus value);
  public:

  // .qaul.rpc.chat.ContentType content_type = 8;
  void clear_content_type();
  ::qaul::rpc::chat::ContentType content_type() const;
  void set_content_type(::qaul::rpc::chat::ContentType value);
  private:
  ::qaul::rpc::chat::ContentType _internal_content_type() const;
  void _internal_set_content_type(::qaul::rpc::chat::ContentType value);
  public:

  // uint64 received_at = 7;
  void clear_received_at();
  uint64_t received_at() const;
  void set_received_at(uint64_t value);
  private:
  uint64_t _internal_received_at() const;
  void _internal_set_received_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t index_;
    uint64_t sent_at_;
    int status_;
    int content_type_;
    uint64_t received_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessageSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.ChatMessageSend) */ {
 public:
  inline ChatMessageSend() : ChatMessageSend(nullptr) {}
  ~ChatMessageSend() override;
  explicit PROTOBUF_CONSTEXPR ChatMessageSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessageSend(const ChatMessageSend& from);
  ChatMessageSend(ChatMessageSend&& from) noexcept
    : ChatMessageSend() {
    *this = ::std::move(from);
  }

  inline ChatMessageSend& operator=(const ChatMessageSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageSend& operator=(ChatMessageSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessageSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessageSend* internal_default_instance() {
    return reinterpret_cast<const ChatMessageSend*>(
               &_ChatMessageSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChatMessageSend& a, ChatMessageSend& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessageSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessageSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessageSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessageSend& from) {
    ChatMessageSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.ChatMessageSend";
  }
  protected:
  explicit ChatMessageSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationIdFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // bytes conversation_id = 1;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.ChatMessageSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// -------------------------------------------------------------------

class GroupEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.chat.GroupEvent) */ {
 public:
  inline GroupEvent() : GroupEvent(nullptr) {}
  ~GroupEvent() override;
  explicit PROTOBUF_CONSTEXPR GroupEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupEvent(const GroupEvent& from);
  GroupEvent(GroupEvent&& from) noexcept
    : GroupEvent() {
    *this = ::std::move(from);
  }

  inline GroupEvent& operator=(const GroupEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupEvent& operator=(GroupEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupEvent* internal_default_instance() {
    return reinterpret_cast<const GroupEvent*>(
               &_GroupEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupEvent& a, GroupEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupEvent& from) {
    GroupEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.chat.GroupEvent";
  }
  protected:
  explicit GroupEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .qaul.rpc.chat.GroupEventType event_type = 1;
  void clear_event_type();
  ::qaul::rpc::chat::GroupEventType event_type() const;
  void set_event_type(::qaul::rpc::chat::GroupEventType value);
  private:
  ::qaul::rpc::chat::GroupEventType _internal_event_type() const;
  void _internal_set_event_type(::qaul::rpc::chat::GroupEventType value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.chat.GroupEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    int event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fchat_2fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chat

// .qaul.rpc.chat.ChatOverviewRequest overview_request = 1;
inline bool Chat::_internal_has_overview_request() const {
  return message_case() == kOverviewRequest;
}
inline bool Chat::has_overview_request() const {
  return _internal_has_overview_request();
}
inline void Chat::set_has_overview_request() {
  _impl_._oneof_case_[0] = kOverviewRequest;
}
inline void Chat::clear_overview_request() {
  if (_internal_has_overview_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.overview_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatOverviewRequest* Chat::release_overview_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.overview_request)
  if (_internal_has_overview_request()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatOverviewRequest* temp = _impl_.message_.overview_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.overview_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatOverviewRequest& Chat::_internal_overview_request() const {
  return _internal_has_overview_request()
      ? *_impl_.message_.overview_request_
      : reinterpret_cast< ::qaul::rpc::chat::ChatOverviewRequest&>(::qaul::rpc::chat::_ChatOverviewRequest_default_instance_);
}
inline const ::qaul::rpc::chat::ChatOverviewRequest& Chat::overview_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.overview_request)
  return _internal_overview_request();
}
inline ::qaul::rpc::chat::ChatOverviewRequest* Chat::unsafe_arena_release_overview_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.overview_request)
  if (_internal_has_overview_request()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatOverviewRequest* temp = _impl_.message_.overview_request_;
    _impl_.message_.overview_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_overview_request(::qaul::rpc::chat::ChatOverviewRequest* overview_request) {
  clear_message();
  if (overview_request) {
    set_has_overview_request();
    _impl_.message_.overview_request_ = overview_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.overview_request)
}
inline ::qaul::rpc::chat::ChatOverviewRequest* Chat::_internal_mutable_overview_request() {
  if (!_internal_has_overview_request()) {
    clear_message();
    set_has_overview_request();
    _impl_.message_.overview_request_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatOverviewRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.overview_request_;
}
inline ::qaul::rpc::chat::ChatOverviewRequest* Chat::mutable_overview_request() {
  ::qaul::rpc::chat::ChatOverviewRequest* _msg = _internal_mutable_overview_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.overview_request)
  return _msg;
}

// .qaul.rpc.chat.ChatOverviewList overview_list = 2;
inline bool Chat::_internal_has_overview_list() const {
  return message_case() == kOverviewList;
}
inline bool Chat::has_overview_list() const {
  return _internal_has_overview_list();
}
inline void Chat::set_has_overview_list() {
  _impl_._oneof_case_[0] = kOverviewList;
}
inline void Chat::clear_overview_list() {
  if (_internal_has_overview_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.overview_list_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatOverviewList* Chat::release_overview_list() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.overview_list)
  if (_internal_has_overview_list()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatOverviewList* temp = _impl_.message_.overview_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.overview_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatOverviewList& Chat::_internal_overview_list() const {
  return _internal_has_overview_list()
      ? *_impl_.message_.overview_list_
      : reinterpret_cast< ::qaul::rpc::chat::ChatOverviewList&>(::qaul::rpc::chat::_ChatOverviewList_default_instance_);
}
inline const ::qaul::rpc::chat::ChatOverviewList& Chat::overview_list() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.overview_list)
  return _internal_overview_list();
}
inline ::qaul::rpc::chat::ChatOverviewList* Chat::unsafe_arena_release_overview_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.overview_list)
  if (_internal_has_overview_list()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatOverviewList* temp = _impl_.message_.overview_list_;
    _impl_.message_.overview_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_overview_list(::qaul::rpc::chat::ChatOverviewList* overview_list) {
  clear_message();
  if (overview_list) {
    set_has_overview_list();
    _impl_.message_.overview_list_ = overview_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.overview_list)
}
inline ::qaul::rpc::chat::ChatOverviewList* Chat::_internal_mutable_overview_list() {
  if (!_internal_has_overview_list()) {
    clear_message();
    set_has_overview_list();
    _impl_.message_.overview_list_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatOverviewList >(GetArenaForAllocation());
  }
  return _impl_.message_.overview_list_;
}
inline ::qaul::rpc::chat::ChatOverviewList* Chat::mutable_overview_list() {
  ::qaul::rpc::chat::ChatOverviewList* _msg = _internal_mutable_overview_list();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.overview_list)
  return _msg;
}

// .qaul.rpc.chat.ChatConversationRequest conversation_request = 3;
inline bool Chat::_internal_has_conversation_request() const {
  return message_case() == kConversationRequest;
}
inline bool Chat::has_conversation_request() const {
  return _internal_has_conversation_request();
}
inline void Chat::set_has_conversation_request() {
  _impl_._oneof_case_[0] = kConversationRequest;
}
inline void Chat::clear_conversation_request() {
  if (_internal_has_conversation_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.conversation_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::release_conversation_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.conversation_request)
  if (_internal_has_conversation_request()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationRequest* temp = _impl_.message_.conversation_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.conversation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatConversationRequest& Chat::_internal_conversation_request() const {
  return _internal_has_conversation_request()
      ? *_impl_.message_.conversation_request_
      : reinterpret_cast< ::qaul::rpc::chat::ChatConversationRequest&>(::qaul::rpc::chat::_ChatConversationRequest_default_instance_);
}
inline const ::qaul::rpc::chat::ChatConversationRequest& Chat::conversation_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.conversation_request)
  return _internal_conversation_request();
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::unsafe_arena_release_conversation_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.conversation_request)
  if (_internal_has_conversation_request()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationRequest* temp = _impl_.message_.conversation_request_;
    _impl_.message_.conversation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_conversation_request(::qaul::rpc::chat::ChatConversationRequest* conversation_request) {
  clear_message();
  if (conversation_request) {
    set_has_conversation_request();
    _impl_.message_.conversation_request_ = conversation_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.conversation_request)
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::_internal_mutable_conversation_request() {
  if (!_internal_has_conversation_request()) {
    clear_message();
    set_has_conversation_request();
    _impl_.message_.conversation_request_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatConversationRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.conversation_request_;
}
inline ::qaul::rpc::chat::ChatConversationRequest* Chat::mutable_conversation_request() {
  ::qaul::rpc::chat::ChatConversationRequest* _msg = _internal_mutable_conversation_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.conversation_request)
  return _msg;
}

// .qaul.rpc.chat.ChatConversationList conversation_list = 4;
inline bool Chat::_internal_has_conversation_list() const {
  return message_case() == kConversationList;
}
inline bool Chat::has_conversation_list() const {
  return _internal_has_conversation_list();
}
inline void Chat::set_has_conversation_list() {
  _impl_._oneof_case_[0] = kConversationList;
}
inline void Chat::clear_conversation_list() {
  if (_internal_has_conversation_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.conversation_list_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::release_conversation_list() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.conversation_list)
  if (_internal_has_conversation_list()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationList* temp = _impl_.message_.conversation_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.conversation_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatConversationList& Chat::_internal_conversation_list() const {
  return _internal_has_conversation_list()
      ? *_impl_.message_.conversation_list_
      : reinterpret_cast< ::qaul::rpc::chat::ChatConversationList&>(::qaul::rpc::chat::_ChatConversationList_default_instance_);
}
inline const ::qaul::rpc::chat::ChatConversationList& Chat::conversation_list() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.conversation_list)
  return _internal_conversation_list();
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::unsafe_arena_release_conversation_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.conversation_list)
  if (_internal_has_conversation_list()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatConversationList* temp = _impl_.message_.conversation_list_;
    _impl_.message_.conversation_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_conversation_list(::qaul::rpc::chat::ChatConversationList* conversation_list) {
  clear_message();
  if (conversation_list) {
    set_has_conversation_list();
    _impl_.message_.conversation_list_ = conversation_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.conversation_list)
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::_internal_mutable_conversation_list() {
  if (!_internal_has_conversation_list()) {
    clear_message();
    set_has_conversation_list();
    _impl_.message_.conversation_list_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatConversationList >(GetArenaForAllocation());
  }
  return _impl_.message_.conversation_list_;
}
inline ::qaul::rpc::chat::ChatConversationList* Chat::mutable_conversation_list() {
  ::qaul::rpc::chat::ChatConversationList* _msg = _internal_mutable_conversation_list();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.conversation_list)
  return _msg;
}

// .qaul.rpc.chat.ChatMessageSend send = 5;
inline bool Chat::_internal_has_send() const {
  return message_case() == kSend;
}
inline bool Chat::has_send() const {
  return _internal_has_send();
}
inline void Chat::set_has_send() {
  _impl_._oneof_case_[0] = kSend;
}
inline void Chat::clear_send() {
  if (_internal_has_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::release_send() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.Chat.send)
  if (_internal_has_send()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatMessageSend* temp = _impl_.message_.send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::chat::ChatMessageSend& Chat::_internal_send() const {
  return _internal_has_send()
      ? *_impl_.message_.send_
      : reinterpret_cast< ::qaul::rpc::chat::ChatMessageSend&>(::qaul::rpc::chat::_ChatMessageSend_default_instance_);
}
inline const ::qaul::rpc::chat::ChatMessageSend& Chat::send() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.Chat.send)
  return _internal_send();
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::unsafe_arena_release_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.chat.Chat.send)
  if (_internal_has_send()) {
    clear_has_message();
    ::qaul::rpc::chat::ChatMessageSend* temp = _impl_.message_.send_;
    _impl_.message_.send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chat::unsafe_arena_set_allocated_send(::qaul::rpc::chat::ChatMessageSend* send) {
  clear_message();
  if (send) {
    set_has_send();
    _impl_.message_.send_ = send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.chat.Chat.send)
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::_internal_mutable_send() {
  if (!_internal_has_send()) {
    clear_message();
    set_has_send();
    _impl_.message_.send_ = CreateMaybeMessage< ::qaul::rpc::chat::ChatMessageSend >(GetArenaForAllocation());
  }
  return _impl_.message_.send_;
}
inline ::qaul::rpc::chat::ChatMessageSend* Chat::mutable_send() {
  ::qaul::rpc::chat::ChatMessageSend* _msg = _internal_mutable_send();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.Chat.send)
  return _msg;
}

inline bool Chat::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Chat::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Chat::MessageCase Chat::message_case() const {
  return Chat::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChatOverviewRequest

// -------------------------------------------------------------------

// ChatOverviewList

// repeated .qaul.rpc.chat.ChatOverview overview_list = 1;
inline int ChatOverviewList::_internal_overview_list_size() const {
  return _impl_.overview_list_.size();
}
inline int ChatOverviewList::overview_list_size() const {
  return _internal_overview_list_size();
}
inline void ChatOverviewList::clear_overview_list() {
  _impl_.overview_list_.Clear();
}
inline ::qaul::rpc::chat::ChatOverview* ChatOverviewList::mutable_overview_list(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatOverviewList.overview_list)
  return _impl_.overview_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatOverview >*
ChatOverviewList::mutable_overview_list() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.chat.ChatOverviewList.overview_list)
  return &_impl_.overview_list_;
}
inline const ::qaul::rpc::chat::ChatOverview& ChatOverviewList::_internal_overview_list(int index) const {
  return _impl_.overview_list_.Get(index);
}
inline const ::qaul::rpc::chat::ChatOverview& ChatOverviewList::overview_list(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverviewList.overview_list)
  return _internal_overview_list(index);
}
inline ::qaul::rpc::chat::ChatOverview* ChatOverviewList::_internal_add_overview_list() {
  return _impl_.overview_list_.Add();
}
inline ::qaul::rpc::chat::ChatOverview* ChatOverviewList::add_overview_list() {
  ::qaul::rpc::chat::ChatOverview* _add = _internal_add_overview_list();
  // @@protoc_insertion_point(field_add:qaul.rpc.chat.ChatOverviewList.overview_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatOverview >&
ChatOverviewList::overview_list() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.chat.ChatOverviewList.overview_list)
  return _impl_.overview_list_;
}

// -------------------------------------------------------------------

// ChatOverview

// bytes conversation_id = 1;
inline void ChatOverview::clear_conversation_id() {
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ChatOverview::conversation_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.conversation_id)
  return _internal_conversation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatOverview::set_conversation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.conversation_id)
}
inline std::string* ChatOverview::mutable_conversation_id() {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatOverview.conversation_id)
  return _s;
}
inline const std::string& ChatOverview::_internal_conversation_id() const {
  return _impl_.conversation_id_.Get();
}
inline void ChatOverview::_internal_set_conversation_id(const std::string& value) {
  
  _impl_.conversation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatOverview::_internal_mutable_conversation_id() {
  
  return _impl_.conversation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatOverview::release_conversation_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatOverview.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ChatOverview::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_id_.SetAllocated(conversation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatOverview.conversation_id)
}

// uint64 last_message_index = 2;
inline void ChatOverview::clear_last_message_index() {
  _impl_.last_message_index_ = uint64_t{0u};
}
inline uint64_t ChatOverview::_internal_last_message_index() const {
  return _impl_.last_message_index_;
}
inline uint64_t ChatOverview::last_message_index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.last_message_index)
  return _internal_last_message_index();
}
inline void ChatOverview::_internal_set_last_message_index(uint64_t value) {
  
  _impl_.last_message_index_ = value;
}
inline void ChatOverview::set_last_message_index(uint64_t value) {
  _internal_set_last_message_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.last_message_index)
}

// string name = 3;
inline void ChatOverview::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ChatOverview::name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatOverview::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.name)
}
inline std::string* ChatOverview::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatOverview.name)
  return _s;
}
inline const std::string& ChatOverview::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChatOverview::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatOverview::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatOverview::release_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatOverview.name)
  return _impl_.name_.Release();
}
inline void ChatOverview::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatOverview.name)
}

// uint64 last_message_at = 4;
inline void ChatOverview::clear_last_message_at() {
  _impl_.last_message_at_ = uint64_t{0u};
}
inline uint64_t ChatOverview::_internal_last_message_at() const {
  return _impl_.last_message_at_;
}
inline uint64_t ChatOverview::last_message_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.last_message_at)
  return _internal_last_message_at();
}
inline void ChatOverview::_internal_set_last_message_at(uint64_t value) {
  
  _impl_.last_message_at_ = value;
}
inline void ChatOverview::set_last_message_at(uint64_t value) {
  _internal_set_last_message_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.last_message_at)
}

// int32 unread = 5;
inline void ChatOverview::clear_unread() {
  _impl_.unread_ = 0;
}
inline int32_t ChatOverview::_internal_unread() const {
  return _impl_.unread_;
}
inline int32_t ChatOverview::unread() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.unread)
  return _internal_unread();
}
inline void ChatOverview::_internal_set_unread(int32_t value) {
  
  _impl_.unread_ = value;
}
inline void ChatOverview::set_unread(int32_t value) {
  _internal_set_unread(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.unread)
}

// .qaul.rpc.chat.ContentType content_type = 6;
inline void ChatOverview::clear_content_type() {
  _impl_.content_type_ = 0;
}
inline ::qaul::rpc::chat::ContentType ChatOverview::_internal_content_type() const {
  return static_cast< ::qaul::rpc::chat::ContentType >(_impl_.content_type_);
}
inline ::qaul::rpc::chat::ContentType ChatOverview::content_type() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.content_type)
  return _internal_content_type();
}
inline void ChatOverview::_internal_set_content_type(::qaul::rpc::chat::ContentType value) {
  
  _impl_.content_type_ = value;
}
inline void ChatOverview::set_content_type(::qaul::rpc::chat::ContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.content_type)
}

// bytes content = 7;
inline void ChatOverview::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatOverview::content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatOverview::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.content)
}
inline std::string* ChatOverview::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatOverview.content)
  return _s;
}
inline const std::string& ChatOverview::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatOverview::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatOverview::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatOverview::release_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatOverview.content)
  return _impl_.content_.Release();
}
inline void ChatOverview::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatOverview.content)
}

// bytes last_message_sender_id = 8;
inline void ChatOverview::clear_last_message_sender_id() {
  _impl_.last_message_sender_id_.ClearToEmpty();
}
inline const std::string& ChatOverview::last_message_sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatOverview.last_message_sender_id)
  return _internal_last_message_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatOverview::set_last_message_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_message_sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatOverview.last_message_sender_id)
}
inline std::string* ChatOverview::mutable_last_message_sender_id() {
  std::string* _s = _internal_mutable_last_message_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatOverview.last_message_sender_id)
  return _s;
}
inline const std::string& ChatOverview::_internal_last_message_sender_id() const {
  return _impl_.last_message_sender_id_.Get();
}
inline void ChatOverview::_internal_set_last_message_sender_id(const std::string& value) {
  
  _impl_.last_message_sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatOverview::_internal_mutable_last_message_sender_id() {
  
  return _impl_.last_message_sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatOverview::release_last_message_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatOverview.last_message_sender_id)
  return _impl_.last_message_sender_id_.Release();
}
inline void ChatOverview::set_allocated_last_message_sender_id(std::string* last_message_sender_id) {
  if (last_message_sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.last_message_sender_id_.SetAllocated(last_message_sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_message_sender_id_.IsDefault()) {
    _impl_.last_message_sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatOverview.last_message_sender_id)
}

// -------------------------------------------------------------------

// ChatConversationRequest

// bytes conversation_id = 1;
inline void ChatConversationRequest::clear_conversation_id() {
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ChatConversationRequest::conversation_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationRequest.conversation_id)
  return _internal_conversation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatConversationRequest::set_conversation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatConversationRequest.conversation_id)
}
inline std::string* ChatConversationRequest::mutable_conversation_id() {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatConversationRequest.conversation_id)
  return _s;
}
inline const std::string& ChatConversationRequest::_internal_conversation_id() const {
  return _impl_.conversation_id_.Get();
}
inline void ChatConversationRequest::_internal_set_conversation_id(const std::string& value) {
  
  _impl_.conversation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatConversationRequest::_internal_mutable_conversation_id() {
  
  return _impl_.conversation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatConversationRequest::release_conversation_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatConversationRequest.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ChatConversationRequest::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_id_.SetAllocated(conversation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatConversationRequest.conversation_id)
}

// uint64 last_index = 2;
inline void ChatConversationRequest::clear_last_index() {
  _impl_.last_index_ = uint64_t{0u};
}
inline uint64_t ChatConversationRequest::_internal_last_index() const {
  return _impl_.last_index_;
}
inline uint64_t ChatConversationRequest::last_index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationRequest.last_index)
  return _internal_last_index();
}
inline void ChatConversationRequest::_internal_set_last_index(uint64_t value) {
  
  _impl_.last_index_ = value;
}
inline void ChatConversationRequest::set_last_index(uint64_t value) {
  _internal_set_last_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatConversationRequest.last_index)
}

// -------------------------------------------------------------------

// ChatConversationList

// bytes conversation_id = 1;
inline void ChatConversationList::clear_conversation_id() {
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ChatConversationList::conversation_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationList.conversation_id)
  return _internal_conversation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatConversationList::set_conversation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatConversationList.conversation_id)
}
inline std::string* ChatConversationList::mutable_conversation_id() {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatConversationList.conversation_id)
  return _s;
}
inline const std::string& ChatConversationList::_internal_conversation_id() const {
  return _impl_.conversation_id_.Get();
}
inline void ChatConversationList::_internal_set_conversation_id(const std::string& value) {
  
  _impl_.conversation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatConversationList::_internal_mutable_conversation_id() {
  
  return _impl_.conversation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatConversationList::release_conversation_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatConversationList.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ChatConversationList::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_id_.SetAllocated(conversation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatConversationList.conversation_id)
}

// repeated .qaul.rpc.chat.ChatMessage message_list = 2;
inline int ChatConversationList::_internal_message_list_size() const {
  return _impl_.message_list_.size();
}
inline int ChatConversationList::message_list_size() const {
  return _internal_message_list_size();
}
inline void ChatConversationList::clear_message_list() {
  _impl_.message_list_.Clear();
}
inline ::qaul::rpc::chat::ChatMessage* ChatConversationList::mutable_message_list(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatConversationList.message_list)
  return _impl_.message_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >*
ChatConversationList::mutable_message_list() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.chat.ChatConversationList.message_list)
  return &_impl_.message_list_;
}
inline const ::qaul::rpc::chat::ChatMessage& ChatConversationList::_internal_message_list(int index) const {
  return _impl_.message_list_.Get(index);
}
inline const ::qaul::rpc::chat::ChatMessage& ChatConversationList::message_list(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatConversationList.message_list)
  return _internal_message_list(index);
}
inline ::qaul::rpc::chat::ChatMessage* ChatConversationList::_internal_add_message_list() {
  return _impl_.message_list_.Add();
}
inline ::qaul::rpc::chat::ChatMessage* ChatConversationList::add_message_list() {
  ::qaul::rpc::chat::ChatMessage* _add = _internal_add_message_list();
  // @@protoc_insertion_point(field_add:qaul.rpc.chat.ChatConversationList.message_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::chat::ChatMessage >&
ChatConversationList::message_list() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.chat.ChatConversationList.message_list)
  return _impl_.message_list_;
}

// -------------------------------------------------------------------

// ChatMessage

// uint64 index = 1;
inline void ChatMessage::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t ChatMessage::index() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.index)
  return _internal_index();
}
inline void ChatMessage::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void ChatMessage::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.index)
}

// bytes sender_id = 2;
inline void ChatMessage::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.sender_id)
}
inline std::string* ChatMessage::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.sender_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void ChatMessage::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.sender_id)
  return _impl_.sender_id_.Release();
}
inline void ChatMessage::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.sender_id)
}

// bytes message_id = 3;
inline void ChatMessage::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::message_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.message_id)
}
inline std::string* ChatMessage::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.message_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void ChatMessage::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.message_id)
  return _impl_.message_id_.Release();
}
inline void ChatMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.message_id)
}

// .qaul.rpc.chat.MessageStatus status = 4;
inline void ChatMessage::clear_status() {
  _impl_.status_ = 0;
}
inline ::qaul::rpc::chat::MessageStatus ChatMessage::_internal_status() const {
  return static_cast< ::qaul::rpc::chat::MessageStatus >(_impl_.status_);
}
inline ::qaul::rpc::chat::MessageStatus ChatMessage::status() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.status)
  return _internal_status();
}
inline void ChatMessage::_internal_set_status(::qaul::rpc::chat::MessageStatus value) {
  
  _impl_.status_ = value;
}
inline void ChatMessage::set_status(::qaul::rpc::chat::MessageStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.status)
}

// bytes conversation_id = 5;
inline void ChatMessage::clear_conversation_id() {
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::conversation_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.conversation_id)
  return _internal_conversation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_conversation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.conversation_id)
}
inline std::string* ChatMessage::mutable_conversation_id() {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.conversation_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_conversation_id() const {
  return _impl_.conversation_id_.Get();
}
inline void ChatMessage::_internal_set_conversation_id(const std::string& value) {
  
  _impl_.conversation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_conversation_id() {
  
  return _impl_.conversation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_conversation_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ChatMessage::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_id_.SetAllocated(conversation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.conversation_id)
}

// uint64 sent_at = 6;
inline void ChatMessage::clear_sent_at() {
  _impl_.sent_at_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_sent_at() const {
  return _impl_.sent_at_;
}
inline uint64_t ChatMessage::sent_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.sent_at)
  return _internal_sent_at();
}
inline void ChatMessage::_internal_set_sent_at(uint64_t value) {
  
  _impl_.sent_at_ = value;
}
inline void ChatMessage::set_sent_at(uint64_t value) {
  _internal_set_sent_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.sent_at)
}

// uint64 received_at = 7;
inline void ChatMessage::clear_received_at() {
  _impl_.received_at_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_received_at() const {
  return _impl_.received_at_;
}
inline uint64_t ChatMessage::received_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.received_at)
  return _internal_received_at();
}
inline void ChatMessage::_internal_set_received_at(uint64_t value) {
  
  _impl_.received_at_ = value;
}
inline void ChatMessage::set_received_at(uint64_t value) {
  _internal_set_received_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.received_at)
}

// .qaul.rpc.chat.ContentType content_type = 8;
inline void ChatMessage::clear_content_type() {
  _impl_.content_type_ = 0;
}
inline ::qaul::rpc::chat::ContentType ChatMessage::_internal_content_type() const {
  return static_cast< ::qaul::rpc::chat::ContentType >(_impl_.content_type_);
}
inline ::qaul::rpc::chat::ContentType ChatMessage::content_type() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.content_type)
  return _internal_content_type();
}
inline void ChatMessage::_internal_set_content_type(::qaul::rpc::chat::ContentType value) {
  
  _impl_.content_type_ = value;
}
inline void ChatMessage::set_content_type(::qaul::rpc::chat::ContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.content_type)
}

// bytes content = 9;
inline void ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessage.content)
}

// -------------------------------------------------------------------

// ChatMessageSend

// bytes conversation_id = 1;
inline void ChatMessageSend::clear_conversation_id() {
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ChatMessageSend::conversation_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessageSend.conversation_id)
  return _internal_conversation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessageSend::set_conversation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessageSend.conversation_id)
}
inline std::string* ChatMessageSend::mutable_conversation_id() {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessageSend.conversation_id)
  return _s;
}
inline const std::string& ChatMessageSend::_internal_conversation_id() const {
  return _impl_.conversation_id_.Get();
}
inline void ChatMessageSend::_internal_set_conversation_id(const std::string& value) {
  
  _impl_.conversation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessageSend::_internal_mutable_conversation_id() {
  
  return _impl_.conversation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessageSend::release_conversation_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessageSend.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ChatMessageSend::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_id_.SetAllocated(conversation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessageSend.conversation_id)
}

// string content = 2;
inline void ChatMessageSend::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessageSend::content() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.ChatMessageSend.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessageSend::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.ChatMessageSend.content)
}
inline std::string* ChatMessageSend::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.ChatMessageSend.content)
  return _s;
}
inline const std::string& ChatMessageSend::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessageSend::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessageSend::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessageSend::release_content() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.ChatMessageSend.content)
  return _impl_.content_.Release();
}
inline void ChatMessageSend::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.ChatMessageSend.content)
}

// -------------------------------------------------------------------

// GroupEvent

// .qaul.rpc.chat.GroupEventType event_type = 1;
inline void GroupEvent::clear_event_type() {
  _impl_.event_type_ = 0;
}
inline ::qaul::rpc::chat::GroupEventType GroupEvent::_internal_event_type() const {
  return static_cast< ::qaul::rpc::chat::GroupEventType >(_impl_.event_type_);
}
inline ::qaul::rpc::chat::GroupEventType GroupEvent::event_type() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.GroupEvent.event_type)
  return _internal_event_type();
}
inline void GroupEvent::_internal_set_event_type(::qaul::rpc::chat::GroupEventType value) {
  
  _impl_.event_type_ = value;
}
inline void GroupEvent::set_event_type(::qaul::rpc::chat::GroupEventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.GroupEvent.event_type)
}

// bytes user_id = 2;
inline void GroupEvent::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupEvent::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.chat.GroupEvent.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupEvent::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.chat.GroupEvent.user_id)
}
inline std::string* GroupEvent::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.chat.GroupEvent.user_id)
  return _s;
}
inline const std::string& GroupEvent::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupEvent::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupEvent::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupEvent::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.chat.GroupEvent.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupEvent::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.GroupEvent.user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace rpc
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::rpc::chat::ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::chat::ContentType>() {
  return ::qaul::rpc::chat::ContentType_descriptor();
}
template <> struct is_proto_enum< ::qaul::rpc::chat::MessageStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::chat::MessageStatus>() {
  return ::qaul::rpc::chat::MessageStatus_descriptor();
}
template <> struct is_proto_enum< ::qaul::rpc::chat::GroupEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::chat::GroupEventType>() {
  return ::qaul::rpc::chat::GroupEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fchat_2fchat_2eproto
