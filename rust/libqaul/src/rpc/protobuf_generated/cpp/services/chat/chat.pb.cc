// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/chat/chat.proto

#include "services/chat/chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace rpc {
namespace chat {
PROTOBUF_CONSTEXPR Chat::Chat(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatDefaultTypeInternal() {}
  union {
    Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatDefaultTypeInternal _Chat_default_instance_;
PROTOBUF_CONSTEXPR ChatOverviewRequest::ChatOverviewRequest(
    ::_pbi::ConstantInitialized){}
struct ChatOverviewRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatOverviewRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatOverviewRequestDefaultTypeInternal() {}
  union {
    ChatOverviewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatOverviewRequestDefaultTypeInternal _ChatOverviewRequest_default_instance_;
PROTOBUF_CONSTEXPR ChatOverviewList::ChatOverviewList(
    ::_pbi::ConstantInitialized)
  : overview_list_(){}
struct ChatOverviewListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatOverviewListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatOverviewListDefaultTypeInternal() {}
  union {
    ChatOverviewList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatOverviewListDefaultTypeInternal _ChatOverviewList_default_instance_;
PROTOBUF_CONSTEXPR ChatOverview::ChatOverview(
    ::_pbi::ConstantInitialized)
  : conversation_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_message_sender_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_message_index_(0u)
  , unread_(0)
  , last_message_at_(uint64_t{0u}){}
struct ChatOverviewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatOverviewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatOverviewDefaultTypeInternal() {}
  union {
    ChatOverview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatOverviewDefaultTypeInternal _ChatOverview_default_instance_;
PROTOBUF_CONSTEXPR ChatConversationRequest::ChatConversationRequest(
    ::_pbi::ConstantInitialized)
  : conversation_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_index_(uint64_t{0u}){}
struct ChatConversationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatConversationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatConversationRequestDefaultTypeInternal() {}
  union {
    ChatConversationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatConversationRequestDefaultTypeInternal _ChatConversationRequest_default_instance_;
PROTOBUF_CONSTEXPR ChatConversationList::ChatConversationList(
    ::_pbi::ConstantInitialized)
  : message_list_()
  , conversation_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ChatConversationListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatConversationListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatConversationListDefaultTypeInternal() {}
  union {
    ChatConversationList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatConversationListDefaultTypeInternal _ChatConversationList_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized)
  : sender_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(0u)
  , status_(0)
  , sent_at_(uint64_t{0u})
  , received_at_(uint64_t{0u}){}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR ChatMessageSend::ChatMessageSend(
    ::_pbi::ConstantInitialized)
  : conversation_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ChatMessageSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageSendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageSendDefaultTypeInternal() {}
  union {
    ChatMessageSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageSendDefaultTypeInternal _ChatMessageSend_default_instance_;
}  // namespace chat
}  // namespace rpc
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_services_2fchat_2fchat_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2fchat_2fchat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fchat_2fchat_2eproto = nullptr;

const uint32_t TableStruct_services_2fchat_2fchat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::Chat, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::Chat, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverviewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverviewList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverviewList, overview_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, last_message_index_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, name_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, last_message_at_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, unread_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, content_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatOverview, last_message_sender_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatConversationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatConversationRequest, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatConversationRequest, last_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatConversationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatConversationList, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatConversationList, message_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, index_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, sender_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, message_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, status_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, sent_at_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, received_at_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessage, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessageSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessageSend, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::chat::ChatMessageSend, content_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::rpc::chat::Chat)},
  { 12, -1, -1, sizeof(::qaul::rpc::chat::ChatOverviewRequest)},
  { 18, -1, -1, sizeof(::qaul::rpc::chat::ChatOverviewList)},
  { 25, -1, -1, sizeof(::qaul::rpc::chat::ChatOverview)},
  { 38, -1, -1, sizeof(::qaul::rpc::chat::ChatConversationRequest)},
  { 46, -1, -1, sizeof(::qaul::rpc::chat::ChatConversationList)},
  { 54, -1, -1, sizeof(::qaul::rpc::chat::ChatMessage)},
  { 67, -1, -1, sizeof(::qaul::rpc::chat::ChatMessageSend)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::rpc::chat::_Chat_default_instance_._instance,
  &::qaul::rpc::chat::_ChatOverviewRequest_default_instance_._instance,
  &::qaul::rpc::chat::_ChatOverviewList_default_instance_._instance,
  &::qaul::rpc::chat::_ChatOverview_default_instance_._instance,
  &::qaul::rpc::chat::_ChatConversationRequest_default_instance_._instance,
  &::qaul::rpc::chat::_ChatConversationList_default_instance_._instance,
  &::qaul::rpc::chat::_ChatMessage_default_instance_._instance,
  &::qaul::rpc::chat::_ChatMessageSend_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fchat_2fchat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030services/chat/chat.proto\022\rqaul.rpc.cha"
  "t\"\305\002\n\004Chat\022>\n\020overview_request\030\001 \001(\0132\".q"
  "aul.rpc.chat.ChatOverviewRequestH\000\0228\n\rov"
  "erview_list\030\002 \001(\0132\037.qaul.rpc.chat.ChatOv"
  "erviewListH\000\022F\n\024conversation_request\030\003 \001"
  "(\0132&.qaul.rpc.chat.ChatConversationReque"
  "stH\000\022@\n\021conversation_list\030\004 \001(\0132#.qaul.r"
  "pc.chat.ChatConversationListH\000\022.\n\004send\030\005"
  " \001(\0132\036.qaul.rpc.chat.ChatMessageSendH\000B\t"
  "\n\007message\"\025\n\023ChatOverviewRequest\"F\n\020Chat"
  "OverviewList\0222\n\roverview_list\030\001 \003(\0132\033.qa"
  "ul.rpc.chat.ChatOverview\"\253\001\n\014ChatOvervie"
  "w\022\027\n\017conversation_id\030\001 \001(\014\022\032\n\022last_messa"
  "ge_index\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\027\n\017last_mes"
  "sage_at\030\004 \001(\004\022\016\n\006unread\030\005 \001(\005\022\017\n\007content"
  "\030\006 \001(\t\022\036\n\026last_message_sender_id\030\007 \001(\014\"F"
  "\n\027ChatConversationRequest\022\027\n\017conversatio"
  "n_id\030\001 \001(\014\022\022\n\nlast_index\030\002 \001(\004\"a\n\024ChatCo"
  "nversationList\022\027\n\017conversation_id\030\001 \001(\014\022"
  "0\n\014message_list\030\002 \003(\0132\032.qaul.rpc.chat.Ch"
  "atMessage\"\212\001\n\013ChatMessage\022\r\n\005index\030\001 \001(\r"
  "\022\021\n\tsender_id\030\002 \001(\014\022\022\n\nmessage_id\030\003 \001(\014\022"
  "\016\n\006status\030\004 \001(\005\022\017\n\007sent_at\030\005 \001(\004\022\023\n\013rece"
  "ived_at\030\006 \001(\004\022\017\n\007content\030\007 \001(\t\";\n\017ChatMe"
  "ssageSend\022\027\n\017conversation_id\030\001 \001(\014\022\017\n\007co"
  "ntent\030\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_services_2fchat_2fchat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fchat_2fchat_2eproto = {
    false, false, 1019, descriptor_table_protodef_services_2fchat_2fchat_2eproto,
    "services/chat/chat.proto",
    &descriptor_table_services_2fchat_2fchat_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_services_2fchat_2fchat_2eproto::offsets,
    file_level_metadata_services_2fchat_2fchat_2eproto, file_level_enum_descriptors_services_2fchat_2fchat_2eproto,
    file_level_service_descriptors_services_2fchat_2fchat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fchat_2fchat_2eproto_getter() {
  return &descriptor_table_services_2fchat_2fchat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fchat_2fchat_2eproto(&descriptor_table_services_2fchat_2fchat_2eproto);
namespace qaul {
namespace rpc {
namespace chat {

// ===================================================================

class Chat::_Internal {
 public:
  static const ::qaul::rpc::chat::ChatOverviewRequest& overview_request(const Chat* msg);
  static const ::qaul::rpc::chat::ChatOverviewList& overview_list(const Chat* msg);
  static const ::qaul::rpc::chat::ChatConversationRequest& conversation_request(const Chat* msg);
  static const ::qaul::rpc::chat::ChatConversationList& conversation_list(const Chat* msg);
  static const ::qaul::rpc::chat::ChatMessageSend& send(const Chat* msg);
};

const ::qaul::rpc::chat::ChatOverviewRequest&
Chat::_Internal::overview_request(const Chat* msg) {
  return *msg->message_.overview_request_;
}
const ::qaul::rpc::chat::ChatOverviewList&
Chat::_Internal::overview_list(const Chat* msg) {
  return *msg->message_.overview_list_;
}
const ::qaul::rpc::chat::ChatConversationRequest&
Chat::_Internal::conversation_request(const Chat* msg) {
  return *msg->message_.conversation_request_;
}
const ::qaul::rpc::chat::ChatConversationList&
Chat::_Internal::conversation_list(const Chat* msg) {
  return *msg->message_.conversation_list_;
}
const ::qaul::rpc::chat::ChatMessageSend&
Chat::_Internal::send(const Chat* msg) {
  return *msg->message_.send_;
}
void Chat::set_allocated_overview_request(::qaul::rpc::chat::ChatOverviewRequest* overview_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (overview_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overview_request);
    if (message_arena != submessage_arena) {
      overview_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overview_request, submessage_arena);
    }
    set_has_overview_request();
    message_.overview_request_ = overview_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.Chat.overview_request)
}
void Chat::set_allocated_overview_list(::qaul::rpc::chat::ChatOverviewList* overview_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (overview_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overview_list);
    if (message_arena != submessage_arena) {
      overview_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overview_list, submessage_arena);
    }
    set_has_overview_list();
    message_.overview_list_ = overview_list;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.Chat.overview_list)
}
void Chat::set_allocated_conversation_request(::qaul::rpc::chat::ChatConversationRequest* conversation_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (conversation_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conversation_request);
    if (message_arena != submessage_arena) {
      conversation_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_request, submessage_arena);
    }
    set_has_conversation_request();
    message_.conversation_request_ = conversation_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.Chat.conversation_request)
}
void Chat::set_allocated_conversation_list(::qaul::rpc::chat::ChatConversationList* conversation_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (conversation_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conversation_list);
    if (message_arena != submessage_arena) {
      conversation_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_list, submessage_arena);
    }
    set_has_conversation_list();
    message_.conversation_list_ = conversation_list;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.Chat.conversation_list)
}
void Chat::set_allocated_send(::qaul::rpc::chat::ChatMessageSend* send) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (send) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(send);
    if (message_arena != submessage_arena) {
      send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send, submessage_arena);
    }
    set_has_send();
    message_.send_ = send;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.chat.Chat.send)
}
Chat::Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kOverviewRequest: {
      _internal_mutable_overview_request()->::qaul::rpc::chat::ChatOverviewRequest::MergeFrom(from._internal_overview_request());
      break;
    }
    case kOverviewList: {
      _internal_mutable_overview_list()->::qaul::rpc::chat::ChatOverviewList::MergeFrom(from._internal_overview_list());
      break;
    }
    case kConversationRequest: {
      _internal_mutable_conversation_request()->::qaul::rpc::chat::ChatConversationRequest::MergeFrom(from._internal_conversation_request());
      break;
    }
    case kConversationList: {
      _internal_mutable_conversation_list()->::qaul::rpc::chat::ChatConversationList::MergeFrom(from._internal_conversation_list());
      break;
    }
    case kSend: {
      _internal_mutable_send()->::qaul::rpc::chat::ChatMessageSend::MergeFrom(from._internal_send());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.Chat)
}

inline void Chat::SharedCtor() {
clear_has_message();
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chat.Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.rpc.chat.Chat)
  switch (message_case()) {
    case kOverviewRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.overview_request_;
      }
      break;
    }
    case kOverviewList: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.overview_list_;
      }
      break;
    }
    case kConversationRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.conversation_request_;
      }
      break;
    }
    case kConversationList: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.conversation_list_;
      }
      break;
    }
    case kSend: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.send_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chat.Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.rpc.chat.ChatOverviewRequest overview_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_overview_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.chat.ChatOverviewList overview_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_overview_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.chat.ChatConversationRequest conversation_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.chat.ChatConversationList conversation_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.rpc.chat.ChatMessageSend send = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_send(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chat.Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.rpc.chat.ChatOverviewRequest overview_request = 1;
  if (_internal_has_overview_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::overview_request(this),
        _Internal::overview_request(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.chat.ChatOverviewList overview_list = 2;
  if (_internal_has_overview_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::overview_list(this),
        _Internal::overview_list(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.chat.ChatConversationRequest conversation_request = 3;
  if (_internal_has_conversation_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::conversation_request(this),
        _Internal::conversation_request(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.chat.ChatConversationList conversation_list = 4;
  if (_internal_has_conversation_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::conversation_list(this),
        _Internal::conversation_list(this).GetCachedSize(), target, stream);
  }

  // .qaul.rpc.chat.ChatMessageSend send = 5;
  if (_internal_has_send()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::send(this),
        _Internal::send(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chat.Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chat.Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.rpc.chat.ChatOverviewRequest overview_request = 1;
    case kOverviewRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.overview_request_);
      break;
    }
    // .qaul.rpc.chat.ChatOverviewList overview_list = 2;
    case kOverviewList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.overview_list_);
      break;
    }
    // .qaul.rpc.chat.ChatConversationRequest conversation_request = 3;
    case kConversationRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.conversation_request_);
      break;
    }
    // .qaul.rpc.chat.ChatConversationList conversation_list = 4;
    case kConversationList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.conversation_list_);
      break;
    }
    // .qaul.rpc.chat.ChatMessageSend send = 5;
    case kSend: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.send_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat::GetClassData() const { return &_class_data_; }

void Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chat *>(to)->MergeFrom(
      static_cast<const Chat &>(from));
}


void Chat::MergeFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chat.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kOverviewRequest: {
      _internal_mutable_overview_request()->::qaul::rpc::chat::ChatOverviewRequest::MergeFrom(from._internal_overview_request());
      break;
    }
    case kOverviewList: {
      _internal_mutable_overview_list()->::qaul::rpc::chat::ChatOverviewList::MergeFrom(from._internal_overview_list());
      break;
    }
    case kConversationRequest: {
      _internal_mutable_conversation_request()->::qaul::rpc::chat::ChatConversationRequest::MergeFrom(from._internal_conversation_request());
      break;
    }
    case kConversationList: {
      _internal_mutable_conversation_list()->::qaul::rpc::chat::ChatConversationList::MergeFrom(from._internal_conversation_list());
      break;
    }
    case kSend: {
      _internal_mutable_send()->::qaul::rpc::chat::ChatMessageSend::MergeFrom(from._internal_send());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chat.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[0]);
}

// ===================================================================

class ChatOverviewRequest::_Internal {
 public:
};

ChatOverviewRequest::ChatOverviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.ChatOverviewRequest)
}
ChatOverviewRequest::ChatOverviewRequest(const ChatOverviewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.ChatOverviewRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatOverviewRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatOverviewRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChatOverviewRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[1]);
}

// ===================================================================

class ChatOverviewList::_Internal {
 public:
};

ChatOverviewList::ChatOverviewList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  overview_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.ChatOverviewList)
}
ChatOverviewList::ChatOverviewList(const ChatOverviewList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      overview_list_(from.overview_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.ChatOverviewList)
}

inline void ChatOverviewList::SharedCtor() {
}

ChatOverviewList::~ChatOverviewList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chat.ChatOverviewList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatOverviewList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatOverviewList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatOverviewList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chat.ChatOverviewList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overview_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatOverviewList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.chat.ChatOverview overview_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overview_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatOverviewList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chat.ChatOverviewList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.chat.ChatOverview overview_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overview_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_overview_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chat.ChatOverviewList)
  return target;
}

size_t ChatOverviewList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chat.ChatOverviewList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.chat.ChatOverview overview_list = 1;
  total_size += 1UL * this->_internal_overview_list_size();
  for (const auto& msg : this->overview_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatOverviewList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatOverviewList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatOverviewList::GetClassData() const { return &_class_data_; }

void ChatOverviewList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatOverviewList *>(to)->MergeFrom(
      static_cast<const ChatOverviewList &>(from));
}


void ChatOverviewList::MergeFrom(const ChatOverviewList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chat.ChatOverviewList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  overview_list_.MergeFrom(from.overview_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatOverviewList::CopyFrom(const ChatOverviewList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chat.ChatOverviewList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatOverviewList::IsInitialized() const {
  return true;
}

void ChatOverviewList::InternalSwap(ChatOverviewList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  overview_list_.InternalSwap(&other->overview_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatOverviewList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[2]);
}

// ===================================================================

class ChatOverview::_Internal {
 public:
};

ChatOverview::ChatOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.ChatOverview)
}
ChatOverview::ChatOverview(const ChatOverview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(from._internal_conversation_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  last_message_sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_message_sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_message_sender_id().empty()) {
    last_message_sender_id_.Set(from._internal_last_message_sender_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_message_index_, &from.last_message_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_message_at_) -
    reinterpret_cast<char*>(&last_message_index_)) + sizeof(last_message_at_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.ChatOverview)
}

inline void ChatOverview::SharedCtor() {
conversation_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conversation_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_message_sender_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_message_sender_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_message_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_message_at_) -
    reinterpret_cast<char*>(&last_message_index_)) + sizeof(last_message_at_));
}

ChatOverview::~ChatOverview() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chat.ChatOverview)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatOverview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  conversation_id_.Destroy();
  name_.Destroy();
  content_.Destroy();
  last_message_sender_id_.Destroy();
}

void ChatOverview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatOverview::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chat.ChatOverview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversation_id_.ClearToEmpty();
  name_.ClearToEmpty();
  content_.ClearToEmpty();
  last_message_sender_id_.ClearToEmpty();
  ::memset(&last_message_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_message_at_) -
      reinterpret_cast<char*>(&last_message_index_)) + sizeof(last_message_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatOverview::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_message_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          last_message_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chat.ChatOverview.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 last_message_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          last_message_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unread = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          unread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chat.ChatOverview.content"));
        } else
          goto handle_unusual;
        continue;
      // bytes last_message_sender_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_last_message_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatOverview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chat.ChatOverview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // uint32 last_message_index = 2;
  if (this->_internal_last_message_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_message_index(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chat.ChatOverview.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint64 last_message_at = 4;
  if (this->_internal_last_message_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_message_at(), target);
  }

  // int32 unread = 5;
  if (this->_internal_unread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_unread(), target);
  }

  // string content = 6;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chat.ChatOverview.content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  // bytes last_message_sender_id = 7;
  if (!this->_internal_last_message_sender_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_last_message_sender_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chat.ChatOverview)
  return target;
}

size_t ChatOverview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chat.ChatOverview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_conversation_id());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 6;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // bytes last_message_sender_id = 7;
  if (!this->_internal_last_message_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_message_sender_id());
  }

  // uint32 last_message_index = 2;
  if (this->_internal_last_message_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_message_index());
  }

  // int32 unread = 5;
  if (this->_internal_unread() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unread());
  }

  // uint64 last_message_at = 4;
  if (this->_internal_last_message_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_message_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatOverview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatOverview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatOverview::GetClassData() const { return &_class_data_; }

void ChatOverview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatOverview *>(to)->MergeFrom(
      static_cast<const ChatOverview &>(from));
}


void ChatOverview::MergeFrom(const ChatOverview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chat.ChatOverview)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_last_message_sender_id().empty()) {
    _internal_set_last_message_sender_id(from._internal_last_message_sender_id());
  }
  if (from._internal_last_message_index() != 0) {
    _internal_set_last_message_index(from._internal_last_message_index());
  }
  if (from._internal_unread() != 0) {
    _internal_set_unread(from._internal_unread());
  }
  if (from._internal_last_message_at() != 0) {
    _internal_set_last_message_at(from._internal_last_message_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatOverview::CopyFrom(const ChatOverview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chat.ChatOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatOverview::IsInitialized() const {
  return true;
}

void ChatOverview::InternalSwap(ChatOverview* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conversation_id_, lhs_arena,
      &other->conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_message_sender_id_, lhs_arena,
      &other->last_message_sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatOverview, last_message_at_)
      + sizeof(ChatOverview::last_message_at_)
      - PROTOBUF_FIELD_OFFSET(ChatOverview, last_message_index_)>(
          reinterpret_cast<char*>(&last_message_index_),
          reinterpret_cast<char*>(&other->last_message_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatOverview::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[3]);
}

// ===================================================================

class ChatConversationRequest::_Internal {
 public:
};

ChatConversationRequest::ChatConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.ChatConversationRequest)
}
ChatConversationRequest::ChatConversationRequest(const ChatConversationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(from._internal_conversation_id(), 
      GetArenaForAllocation());
  }
  last_index_ = from.last_index_;
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.ChatConversationRequest)
}

inline void ChatConversationRequest::SharedCtor() {
conversation_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conversation_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_index_ = uint64_t{0u};
}

ChatConversationRequest::~ChatConversationRequest() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chat.ChatConversationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatConversationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  conversation_id_.Destroy();
}

void ChatConversationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatConversationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chat.ChatConversationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversation_id_.ClearToEmpty();
  last_index_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatConversationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          last_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatConversationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chat.ChatConversationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // uint64 last_index = 2;
  if (this->_internal_last_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chat.ChatConversationRequest)
  return target;
}

size_t ChatConversationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chat.ChatConversationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_conversation_id());
  }

  // uint64 last_index = 2;
  if (this->_internal_last_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatConversationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatConversationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatConversationRequest::GetClassData() const { return &_class_data_; }

void ChatConversationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatConversationRequest *>(to)->MergeFrom(
      static_cast<const ChatConversationRequest &>(from));
}


void ChatConversationRequest::MergeFrom(const ChatConversationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chat.ChatConversationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
  if (from._internal_last_index() != 0) {
    _internal_set_last_index(from._internal_last_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatConversationRequest::CopyFrom(const ChatConversationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chat.ChatConversationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatConversationRequest::IsInitialized() const {
  return true;
}

void ChatConversationRequest::InternalSwap(ChatConversationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conversation_id_, lhs_arena,
      &other->conversation_id_, rhs_arena
  );
  swap(last_index_, other->last_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatConversationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[4]);
}

// ===================================================================

class ChatConversationList::_Internal {
 public:
};

ChatConversationList::ChatConversationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  message_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.ChatConversationList)
}
ChatConversationList::ChatConversationList(const ChatConversationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_list_(from.message_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(from._internal_conversation_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.ChatConversationList)
}

inline void ChatConversationList::SharedCtor() {
conversation_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conversation_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatConversationList::~ChatConversationList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chat.ChatConversationList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatConversationList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  conversation_id_.Destroy();
}

void ChatConversationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatConversationList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chat.ChatConversationList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_list_.Clear();
  conversation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatConversationList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.rpc.chat.ChatMessage message_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatConversationList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chat.ChatConversationList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // repeated .qaul.rpc.chat.ChatMessage message_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chat.ChatConversationList)
  return target;
}

size_t ChatConversationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chat.ChatConversationList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.chat.ChatMessage message_list = 2;
  total_size += 1UL * this->_internal_message_list_size();
  for (const auto& msg : this->message_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_conversation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatConversationList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatConversationList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatConversationList::GetClassData() const { return &_class_data_; }

void ChatConversationList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatConversationList *>(to)->MergeFrom(
      static_cast<const ChatConversationList &>(from));
}


void ChatConversationList::MergeFrom(const ChatConversationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chat.ChatConversationList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  message_list_.MergeFrom(from.message_list_);
  if (!from._internal_conversation_id().empty()) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatConversationList::CopyFrom(const ChatConversationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chat.ChatConversationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatConversationList::IsInitialized() const {
  return true;
}

void ChatConversationList::InternalSwap(ChatConversationList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  message_list_.InternalSwap(&other->message_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conversation_id_, lhs_arena,
      &other->conversation_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatConversationList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[5]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    sender_id_.Set(from._internal_sender_id(), 
      GetArenaForAllocation());
  }
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_at_) -
    reinterpret_cast<char*>(&index_)) + sizeof(received_at_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.ChatMessage)
}

inline void ChatMessage::SharedCtor() {
sender_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&received_at_) -
    reinterpret_cast<char*>(&index_)) + sizeof(received_at_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chat.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_id_.Destroy();
  message_id_.Destroy();
  content_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chat.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_id_.ClearToEmpty();
  message_id_.ClearToEmpty();
  content_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_at_) -
      reinterpret_cast<char*>(&index_)) + sizeof(received_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 received_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          received_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chat.ChatMessage.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chat.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes sender_id = 2;
  if (!this->_internal_sender_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sender_id(), target);
  }

  // bytes message_id = 3;
  if (!this->_internal_message_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message_id(), target);
  }

  // int32 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // uint64 sent_at = 5;
  if (this->_internal_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sent_at(), target);
  }

  // uint64 received_at = 6;
  if (this->_internal_received_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_received_at(), target);
  }

  // string content = 7;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chat.ChatMessage.content");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chat.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chat.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender_id = 2;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_id());
  }

  // bytes message_id = 3;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_id());
  }

  // string content = 7;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // int32 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // uint64 sent_at = 5;
  if (this->_internal_sent_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sent_at());
  }

  // uint64 received_at = 6;
  if (this->_internal_received_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_received_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }

void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatMessage *>(to)->MergeFrom(
      static_cast<const ChatMessage &>(from));
}


void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chat.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender_id().empty()) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_sent_at() != 0) {
    _internal_set_sent_at(from._internal_sent_at());
  }
  if (from._internal_received_at() != 0) {
    _internal_set_received_at(from._internal_received_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_id_, lhs_arena,
      &other->sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, received_at_)
      + sizeof(ChatMessage::received_at_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[6]);
}

// ===================================================================

class ChatMessageSend::_Internal {
 public:
};

ChatMessageSend::ChatMessageSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.chat.ChatMessageSend)
}
ChatMessageSend::ChatMessageSend(const ChatMessageSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(from._internal_conversation_id(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.chat.ChatMessageSend)
}

inline void ChatMessageSend::SharedCtor() {
conversation_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conversation_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessageSend::~ChatMessageSend() {
  // @@protoc_insertion_point(destructor:qaul.rpc.chat.ChatMessageSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessageSend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  conversation_id_.Destroy();
  content_.Destroy();
}

void ChatMessageSend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMessageSend::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.chat.ChatMessageSend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversation_id_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.rpc.chat.ChatMessageSend.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageSend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.chat.ChatMessageSend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.chat.ChatMessageSend.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.chat.ChatMessageSend)
  return target;
}

size_t ChatMessageSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.chat.ChatMessageSend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_conversation_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatMessageSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageSend::GetClassData() const { return &_class_data_; }

void ChatMessageSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatMessageSend *>(to)->MergeFrom(
      static_cast<const ChatMessageSend &>(from));
}


void ChatMessageSend::MergeFrom(const ChatMessageSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.chat.ChatMessageSend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageSend::CopyFrom(const ChatMessageSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.chat.ChatMessageSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageSend::IsInitialized() const {
  return true;
}

void ChatMessageSend::InternalSwap(ChatMessageSend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conversation_id_, lhs_arena,
      &other->conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fchat_2fchat_2eproto_getter, &descriptor_table_services_2fchat_2fchat_2eproto_once,
      file_level_metadata_services_2fchat_2fchat_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::Chat*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::ChatOverviewRequest*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::ChatOverviewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::ChatOverviewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::ChatOverviewList*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::ChatOverviewList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::ChatOverviewList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::ChatOverview*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::ChatOverview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::ChatOverview >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::ChatConversationRequest*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::ChatConversationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::ChatConversationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::ChatConversationList*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::ChatConversationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::ChatConversationList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::ChatMessage*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::chat::ChatMessageSend*
Arena::CreateMaybeMessage< ::qaul::rpc::chat::ChatMessageSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::chat::ChatMessageSend >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
