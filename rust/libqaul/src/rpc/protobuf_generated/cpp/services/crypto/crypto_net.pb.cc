// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/crypto/crypto_net.proto

#include "services/crypto/crypto_net.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace qaul {
namespace net {
namespace crypto {
template <typename>
PROTOBUF_CONSTEXPR CryptoserviceContainer::CryptoserviceContainer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CryptoserviceContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoserviceContainerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoserviceContainerDefaultTypeInternal() {}
  union {
    CryptoserviceContainer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoserviceContainerDefaultTypeInternal _CryptoserviceContainer_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SecondHandshake::SecondHandshake(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.received_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecondHandshakeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecondHandshakeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecondHandshakeDefaultTypeInternal() {}
  union {
    SecondHandshake _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecondHandshakeDefaultTypeInternal _SecondHandshake_default_instance_;
}  // namespace crypto
}  // namespace net
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_services_2fcrypto_2fcrypto_5fnet_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_services_2fcrypto_2fcrypto_5fnet_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_services_2fcrypto_2fcrypto_5fnet_2eproto = nullptr;
const ::uint32_t TableStruct_services_2fcrypto_2fcrypto_5fnet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::qaul::net::crypto::CryptoserviceContainer, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::qaul::net::crypto::CryptoserviceContainer, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::qaul::net::crypto::CryptoserviceContainer, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::qaul::net::crypto::SecondHandshake, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::qaul::net::crypto::SecondHandshake, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::qaul::net::crypto::SecondHandshake, _impl_.received_at_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::qaul::net::crypto::CryptoserviceContainer)},
        { 10, -1, -1, sizeof(::qaul::net::crypto::SecondHandshake)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::qaul::net::crypto::_CryptoserviceContainer_default_instance_._instance,
    &::qaul::net::crypto::_SecondHandshake_default_instance_._instance,
};
const char descriptor_table_protodef_services_2fcrypto_2fcrypto_5fnet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n services/crypto/crypto_net.proto\022\017qaul"
    ".net.crypto\"a\n\026CryptoserviceContainer\022<\n"
    "\020second_handshake\030\001 \001(\0132 .qaul.net.crypt"
    "o.SecondHandshakeH\000B\t\n\007message\"9\n\017Second"
    "Handshake\022\021\n\tsignature\030\001 \001(\014\022\023\n\013received"
    "_at\030\002 \001(\004b\006proto3"
};
static ::absl::once_flag descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto = {
    false,
    false,
    217,
    descriptor_table_protodef_services_2fcrypto_2fcrypto_5fnet_2eproto,
    "services/crypto/crypto_net.proto",
    &descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_services_2fcrypto_2fcrypto_5fnet_2eproto::offsets,
    file_level_metadata_services_2fcrypto_2fcrypto_5fnet_2eproto,
    file_level_enum_descriptors_services_2fcrypto_2fcrypto_5fnet_2eproto,
    file_level_service_descriptors_services_2fcrypto_2fcrypto_5fnet_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto_getter() {
  return &descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fcrypto_2fcrypto_5fnet_2eproto(&descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto);
namespace qaul {
namespace net {
namespace crypto {
// ===================================================================

class CryptoserviceContainer::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::qaul::net::crypto::CryptoserviceContainer, _impl_._oneof_case_);
  static const ::qaul::net::crypto::SecondHandshake& second_handshake(const CryptoserviceContainer* msg);
};

const ::qaul::net::crypto::SecondHandshake&
CryptoserviceContainer::_Internal::second_handshake(const CryptoserviceContainer* msg) {
  return *msg->_impl_.message_.second_handshake_;
}
void CryptoserviceContainer::set_allocated_second_handshake(::qaul::net::crypto::SecondHandshake* second_handshake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (second_handshake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(second_handshake);
    if (message_arena != submessage_arena) {
      second_handshake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, second_handshake, submessage_arena);
    }
    set_has_second_handshake();
    _impl_.message_.second_handshake_ = second_handshake;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.crypto.CryptoserviceContainer.second_handshake)
}
CryptoserviceContainer::CryptoserviceContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:qaul.net.crypto.CryptoserviceContainer)
}
CryptoserviceContainer::CryptoserviceContainer(const CryptoserviceContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CryptoserviceContainer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kSecondHandshake: {
      _this->_internal_mutable_second_handshake()->::qaul::net::crypto::SecondHandshake::MergeFrom(
          from._internal_second_handshake());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.crypto.CryptoserviceContainer)
}

inline void CryptoserviceContainer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

CryptoserviceContainer::~CryptoserviceContainer() {
  // @@protoc_insertion_point(destructor:qaul.net.crypto.CryptoserviceContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CryptoserviceContainer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void CryptoserviceContainer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CryptoserviceContainer::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.net.crypto.CryptoserviceContainer)
  switch (message_case()) {
    case kSecondHandshake: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.second_handshake_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void CryptoserviceContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.crypto.CryptoserviceContainer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CryptoserviceContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.net.crypto.SecondHandshake second_handshake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_second_handshake(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CryptoserviceContainer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.crypto.CryptoserviceContainer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.net.crypto.SecondHandshake second_handshake = 1;
  if (message_case() == kSecondHandshake) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::second_handshake(this),
        _Internal::second_handshake(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.crypto.CryptoserviceContainer)
  return target;
}

::size_t CryptoserviceContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.crypto.CryptoserviceContainer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.net.crypto.SecondHandshake second_handshake = 1;
    case kSecondHandshake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.second_handshake_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoserviceContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CryptoserviceContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoserviceContainer::GetClassData() const { return &_class_data_; }


void CryptoserviceContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CryptoserviceContainer*>(&to_msg);
  auto& from = static_cast<const CryptoserviceContainer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.crypto.CryptoserviceContainer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kSecondHandshake: {
      _this->_internal_mutable_second_handshake()->::qaul::net::crypto::SecondHandshake::MergeFrom(
          from._internal_second_handshake());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CryptoserviceContainer::CopyFrom(const CryptoserviceContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.crypto.CryptoserviceContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoserviceContainer::IsInitialized() const {
  return true;
}

void CryptoserviceContainer::InternalSwap(CryptoserviceContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CryptoserviceContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto_getter, &descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto_once,
      file_level_metadata_services_2fcrypto_2fcrypto_5fnet_2eproto[0]);
}
// ===================================================================

class SecondHandshake::_Internal {
 public:
};

SecondHandshake::SecondHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:qaul.net.crypto.SecondHandshake)
}
SecondHandshake::SecondHandshake(const SecondHandshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecondHandshake* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_) {}

    , decltype(_impl_.received_at_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _this->_impl_.received_at_ = from._impl_.received_at_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.crypto.SecondHandshake)
}

inline void SecondHandshake::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_) {}

    , decltype(_impl_.received_at_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecondHandshake::~SecondHandshake() {
  // @@protoc_insertion_point(destructor:qaul.net.crypto.SecondHandshake)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecondHandshake::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
}

void SecondHandshake::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecondHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.crypto.SecondHandshake)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  _impl_.received_at_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecondHandshake::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 received_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.received_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SecondHandshake::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.crypto.SecondHandshake)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint64 received_at = 2;
  if (this->_internal_received_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_received_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.crypto.SecondHandshake)
  return target;
}

::size_t SecondHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.crypto.SecondHandshake)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  // uint64 received_at = 2;
  if (this->_internal_received_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_received_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecondHandshake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecondHandshake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecondHandshake::GetClassData() const { return &_class_data_; }


void SecondHandshake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecondHandshake*>(&to_msg);
  auto& from = static_cast<const SecondHandshake&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.crypto.SecondHandshake)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_received_at() != 0) {
    _this->_internal_set_received_at(from._internal_received_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecondHandshake::CopyFrom(const SecondHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.crypto.SecondHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecondHandshake::IsInitialized() const {
  return true;
}

void SecondHandshake::InternalSwap(SecondHandshake* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);

  swap(_impl_.received_at_, other->_impl_.received_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecondHandshake::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto_getter, &descriptor_table_services_2fcrypto_2fcrypto_5fnet_2eproto_once,
      file_level_metadata_services_2fcrypto_2fcrypto_5fnet_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::net::crypto::CryptoserviceContainer*
Arena::CreateMaybeMessage< ::qaul::net::crypto::CryptoserviceContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::crypto::CryptoserviceContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::crypto::SecondHandshake*
Arena::CreateMaybeMessage< ::qaul::net::crypto::SecondHandshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::crypto::SecondHandshake >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
