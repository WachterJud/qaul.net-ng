// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/filesharing/filesharing_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2ffilesharing_2ffilesharing_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2ffilesharing_2ffilesharing_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2ffilesharing_2ffilesharing_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2ffilesharing_2ffilesharing_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2ffilesharing_2ffilesharing_5frpc_2eproto;
namespace qaul {
namespace rpc {
namespace filesharing {
class FileHistoryEntry;
struct FileHistoryEntryDefaultTypeInternal;
extern FileHistoryEntryDefaultTypeInternal _FileHistoryEntry_default_instance_;
class FileHistoryRequest;
struct FileHistoryRequestDefaultTypeInternal;
extern FileHistoryRequestDefaultTypeInternal _FileHistoryRequest_default_instance_;
class FileHistoryResponse;
struct FileHistoryResponseDefaultTypeInternal;
extern FileHistoryResponseDefaultTypeInternal _FileHistoryResponse_default_instance_;
class FileSharing;
struct FileSharingDefaultTypeInternal;
extern FileSharingDefaultTypeInternal _FileSharing_default_instance_;
class SendFileRequest;
struct SendFileRequestDefaultTypeInternal;
extern SendFileRequestDefaultTypeInternal _SendFileRequest_default_instance_;
}  // namespace filesharing
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::filesharing::FileHistoryEntry* Arena::CreateMaybeMessage<::qaul::rpc::filesharing::FileHistoryEntry>(Arena*);
template<> ::qaul::rpc::filesharing::FileHistoryRequest* Arena::CreateMaybeMessage<::qaul::rpc::filesharing::FileHistoryRequest>(Arena*);
template<> ::qaul::rpc::filesharing::FileHistoryResponse* Arena::CreateMaybeMessage<::qaul::rpc::filesharing::FileHistoryResponse>(Arena*);
template<> ::qaul::rpc::filesharing::FileSharing* Arena::CreateMaybeMessage<::qaul::rpc::filesharing::FileSharing>(Arena*);
template<> ::qaul::rpc::filesharing::SendFileRequest* Arena::CreateMaybeMessage<::qaul::rpc::filesharing::SendFileRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace filesharing {

// ===================================================================

class FileSharing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.filesharing.FileSharing) */ {
 public:
  inline FileSharing() : FileSharing(nullptr) {}
  ~FileSharing() override;
  explicit PROTOBUF_CONSTEXPR FileSharing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSharing(const FileSharing& from);
  FileSharing(FileSharing&& from) noexcept
    : FileSharing() {
    *this = ::std::move(from);
  }

  inline FileSharing& operator=(const FileSharing& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSharing& operator=(FileSharing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSharing& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kSendFileRequest = 1,
    kFileHistory = 2,
    kFileHistoryResponse = 3,
    MESSAGE_NOT_SET = 0,
  };

  static inline const FileSharing* internal_default_instance() {
    return reinterpret_cast<const FileSharing*>(
               &_FileSharing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileSharing& a, FileSharing& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSharing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSharing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSharing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSharing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileSharing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileSharing& from) {
    FileSharing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSharing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.filesharing.FileSharing";
  }
  protected:
  explicit FileSharing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendFileRequestFieldNumber = 1,
    kFileHistoryFieldNumber = 2,
    kFileHistoryResponseFieldNumber = 3,
  };
  // .qaul.rpc.filesharing.SendFileRequest send_file_request = 1;
  bool has_send_file_request() const;
  private:
  bool _internal_has_send_file_request() const;
  public:
  void clear_send_file_request();
  const ::qaul::rpc::filesharing::SendFileRequest& send_file_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::filesharing::SendFileRequest* release_send_file_request();
  ::qaul::rpc::filesharing::SendFileRequest* mutable_send_file_request();
  void set_allocated_send_file_request(::qaul::rpc::filesharing::SendFileRequest* send_file_request);
  private:
  const ::qaul::rpc::filesharing::SendFileRequest& _internal_send_file_request() const;
  ::qaul::rpc::filesharing::SendFileRequest* _internal_mutable_send_file_request();
  public:
  void unsafe_arena_set_allocated_send_file_request(
      ::qaul::rpc::filesharing::SendFileRequest* send_file_request);
  ::qaul::rpc::filesharing::SendFileRequest* unsafe_arena_release_send_file_request();

  // .qaul.rpc.filesharing.FileHistoryRequest file_history = 2;
  bool has_file_history() const;
  private:
  bool _internal_has_file_history() const;
  public:
  void clear_file_history();
  const ::qaul::rpc::filesharing::FileHistoryRequest& file_history() const;
  PROTOBUF_NODISCARD ::qaul::rpc::filesharing::FileHistoryRequest* release_file_history();
  ::qaul::rpc::filesharing::FileHistoryRequest* mutable_file_history();
  void set_allocated_file_history(::qaul::rpc::filesharing::FileHistoryRequest* file_history);
  private:
  const ::qaul::rpc::filesharing::FileHistoryRequest& _internal_file_history() const;
  ::qaul::rpc::filesharing::FileHistoryRequest* _internal_mutable_file_history();
  public:
  void unsafe_arena_set_allocated_file_history(
      ::qaul::rpc::filesharing::FileHistoryRequest* file_history);
  ::qaul::rpc::filesharing::FileHistoryRequest* unsafe_arena_release_file_history();

  // .qaul.rpc.filesharing.FileHistoryResponse file_history_response = 3;
  bool has_file_history_response() const;
  private:
  bool _internal_has_file_history_response() const;
  public:
  void clear_file_history_response();
  const ::qaul::rpc::filesharing::FileHistoryResponse& file_history_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::filesharing::FileHistoryResponse* release_file_history_response();
  ::qaul::rpc::filesharing::FileHistoryResponse* mutable_file_history_response();
  void set_allocated_file_history_response(::qaul::rpc::filesharing::FileHistoryResponse* file_history_response);
  private:
  const ::qaul::rpc::filesharing::FileHistoryResponse& _internal_file_history_response() const;
  ::qaul::rpc::filesharing::FileHistoryResponse* _internal_mutable_file_history_response();
  public:
  void unsafe_arena_set_allocated_file_history_response(
      ::qaul::rpc::filesharing::FileHistoryResponse* file_history_response);
  ::qaul::rpc::filesharing::FileHistoryResponse* unsafe_arena_release_file_history_response();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.filesharing.FileSharing)
 private:
  class _Internal;
  void set_has_send_file_request();
  void set_has_file_history();
  void set_has_file_history_response();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::filesharing::SendFileRequest* send_file_request_;
      ::qaul::rpc::filesharing::FileHistoryRequest* file_history_;
      ::qaul::rpc::filesharing::FileHistoryResponse* file_history_response_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5frpc_2eproto;
};
// -------------------------------------------------------------------

class SendFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.filesharing.SendFileRequest) */ {
 public:
  inline SendFileRequest() : SendFileRequest(nullptr) {}
  ~SendFileRequest() override;
  explicit PROTOBUF_CONSTEXPR SendFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendFileRequest(const SendFileRequest& from);
  SendFileRequest(SendFileRequest&& from) noexcept
    : SendFileRequest() {
    *this = ::std::move(from);
  }

  inline SendFileRequest& operator=(const SendFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendFileRequest& operator=(SendFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendFileRequest* internal_default_instance() {
    return reinterpret_cast<const SendFileRequest*>(
               &_SendFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendFileRequest& a, SendFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendFileRequest& from) {
    SendFileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.filesharing.SendFileRequest";
  }
  protected:
  explicit SendFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathNameFieldNumber = 1,
    kConversationIdFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string path_name = 1;
  void clear_path_name();
  const std::string& path_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_name();
  PROTOBUF_NODISCARD std::string* release_path_name();
  void set_allocated_path_name(std::string* path_name);
  private:
  const std::string& _internal_path_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_name(const std::string& value);
  std::string* _internal_mutable_path_name();
  public:

  // bytes conversation_id = 2;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.filesharing.SendFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5frpc_2eproto;
};
// -------------------------------------------------------------------

class FileHistoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.filesharing.FileHistoryRequest) */ {
 public:
  inline FileHistoryRequest() : FileHistoryRequest(nullptr) {}
  ~FileHistoryRequest() override;
  explicit PROTOBUF_CONSTEXPR FileHistoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileHistoryRequest(const FileHistoryRequest& from);
  FileHistoryRequest(FileHistoryRequest&& from) noexcept
    : FileHistoryRequest() {
    *this = ::std::move(from);
  }

  inline FileHistoryRequest& operator=(const FileHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHistoryRequest& operator=(FileHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const FileHistoryRequest*>(
               &_FileHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileHistoryRequest& a, FileHistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHistoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileHistoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileHistoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileHistoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileHistoryRequest& from) {
    FileHistoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileHistoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.filesharing.FileHistoryRequest";
  }
  protected:
  explicit FileHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // uint32 offset = 1;
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // uint32 limit = 2;
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.filesharing.FileHistoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t offset_;
    uint32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5frpc_2eproto;
};
// -------------------------------------------------------------------

class FileHistoryEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.filesharing.FileHistoryEntry) */ {
 public:
  inline FileHistoryEntry() : FileHistoryEntry(nullptr) {}
  ~FileHistoryEntry() override;
  explicit PROTOBUF_CONSTEXPR FileHistoryEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileHistoryEntry(const FileHistoryEntry& from);
  FileHistoryEntry(FileHistoryEntry&& from) noexcept
    : FileHistoryEntry() {
    *this = ::std::move(from);
  }

  inline FileHistoryEntry& operator=(const FileHistoryEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHistoryEntry& operator=(FileHistoryEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileHistoryEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileHistoryEntry* internal_default_instance() {
    return reinterpret_cast<const FileHistoryEntry*>(
               &_FileHistoryEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileHistoryEntry& a, FileHistoryEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHistoryEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileHistoryEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileHistoryEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileHistoryEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileHistoryEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileHistoryEntry& from) {
    FileHistoryEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileHistoryEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.filesharing.FileHistoryEntry";
  }
  protected:
  explicit FileHistoryEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kFileExtFieldNumber = 3,
    kFileDescrFieldNumber = 5,
    kSenderIdFieldNumber = 7,
    kGroupIdFieldNumber = 8,
    kFileIdFieldNumber = 1,
    kTimeFieldNumber = 6,
    kFileSizeFieldNumber = 4,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_ext = 3;
  void clear_file_ext();
  const std::string& file_ext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_ext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_ext();
  PROTOBUF_NODISCARD std::string* release_file_ext();
  void set_allocated_file_ext(std::string* file_ext);
  private:
  const std::string& _internal_file_ext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_ext(const std::string& value);
  std::string* _internal_mutable_file_ext();
  public:

  // string file_descr = 5;
  void clear_file_descr();
  const std::string& file_descr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_descr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_descr();
  PROTOBUF_NODISCARD std::string* release_file_descr();
  void set_allocated_file_descr(std::string* file_descr);
  private:
  const std::string& _internal_file_descr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_descr(const std::string& value);
  std::string* _internal_mutable_file_descr();
  public:

  // string sender_id = 7;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string group_id = 8;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // uint64 file_id = 1;
  void clear_file_id();
  uint64_t file_id() const;
  void set_file_id(uint64_t value);
  private:
  uint64_t _internal_file_id() const;
  void _internal_set_file_id(uint64_t value);
  public:

  // uint64 time = 6;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // uint32 file_size = 4;
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.filesharing.FileHistoryEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_ext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_descr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    uint64_t file_id_;
    uint64_t time_;
    uint32_t file_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5frpc_2eproto;
};
// -------------------------------------------------------------------

class FileHistoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.filesharing.FileHistoryResponse) */ {
 public:
  inline FileHistoryResponse() : FileHistoryResponse(nullptr) {}
  ~FileHistoryResponse() override;
  explicit PROTOBUF_CONSTEXPR FileHistoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileHistoryResponse(const FileHistoryResponse& from);
  FileHistoryResponse(FileHistoryResponse&& from) noexcept
    : FileHistoryResponse() {
    *this = ::std::move(from);
  }

  inline FileHistoryResponse& operator=(const FileHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHistoryResponse& operator=(FileHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const FileHistoryResponse*>(
               &_FileHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileHistoryResponse& a, FileHistoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHistoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileHistoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileHistoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileHistoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileHistoryResponse& from) {
    FileHistoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileHistoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.filesharing.FileHistoryResponse";
  }
  protected:
  explicit FileHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoriesFieldNumber = 4,
    kOffsetFieldNumber = 1,
    kLimitFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // repeated .qaul.rpc.filesharing.FileHistoryEntry histories = 4;
  int histories_size() const;
  private:
  int _internal_histories_size() const;
  public:
  void clear_histories();
  ::qaul::rpc::filesharing::FileHistoryEntry* mutable_histories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::filesharing::FileHistoryEntry >*
      mutable_histories();
  private:
  const ::qaul::rpc::filesharing::FileHistoryEntry& _internal_histories(int index) const;
  ::qaul::rpc::filesharing::FileHistoryEntry* _internal_add_histories();
  public:
  const ::qaul::rpc::filesharing::FileHistoryEntry& histories(int index) const;
  ::qaul::rpc::filesharing::FileHistoryEntry* add_histories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::filesharing::FileHistoryEntry >&
      histories() const;

  // uint32 offset = 1;
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // uint32 limit = 2;
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // uint64 total = 3;
  void clear_total();
  uint64_t total() const;
  void set_total(uint64_t value);
  private:
  uint64_t _internal_total() const;
  void _internal_set_total(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.filesharing.FileHistoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::filesharing::FileHistoryEntry > histories_;
    uint32_t offset_;
    uint32_t limit_;
    uint64_t total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileSharing

// .qaul.rpc.filesharing.SendFileRequest send_file_request = 1;
inline bool FileSharing::_internal_has_send_file_request() const {
  return message_case() == kSendFileRequest;
}
inline bool FileSharing::has_send_file_request() const {
  return _internal_has_send_file_request();
}
inline void FileSharing::set_has_send_file_request() {
  _impl_._oneof_case_[0] = kSendFileRequest;
}
inline void FileSharing::clear_send_file_request() {
  if (_internal_has_send_file_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.send_file_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::filesharing::SendFileRequest* FileSharing::release_send_file_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileSharing.send_file_request)
  if (_internal_has_send_file_request()) {
    clear_has_message();
    ::qaul::rpc::filesharing::SendFileRequest* temp = _impl_.message_.send_file_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.send_file_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::filesharing::SendFileRequest& FileSharing::_internal_send_file_request() const {
  return _internal_has_send_file_request()
      ? *_impl_.message_.send_file_request_
      : reinterpret_cast< ::qaul::rpc::filesharing::SendFileRequest&>(::qaul::rpc::filesharing::_SendFileRequest_default_instance_);
}
inline const ::qaul::rpc::filesharing::SendFileRequest& FileSharing::send_file_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileSharing.send_file_request)
  return _internal_send_file_request();
}
inline ::qaul::rpc::filesharing::SendFileRequest* FileSharing::unsafe_arena_release_send_file_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.filesharing.FileSharing.send_file_request)
  if (_internal_has_send_file_request()) {
    clear_has_message();
    ::qaul::rpc::filesharing::SendFileRequest* temp = _impl_.message_.send_file_request_;
    _impl_.message_.send_file_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSharing::unsafe_arena_set_allocated_send_file_request(::qaul::rpc::filesharing::SendFileRequest* send_file_request) {
  clear_message();
  if (send_file_request) {
    set_has_send_file_request();
    _impl_.message_.send_file_request_ = send_file_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.filesharing.FileSharing.send_file_request)
}
inline ::qaul::rpc::filesharing::SendFileRequest* FileSharing::_internal_mutable_send_file_request() {
  if (!_internal_has_send_file_request()) {
    clear_message();
    set_has_send_file_request();
    _impl_.message_.send_file_request_ = CreateMaybeMessage< ::qaul::rpc::filesharing::SendFileRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.send_file_request_;
}
inline ::qaul::rpc::filesharing::SendFileRequest* FileSharing::mutable_send_file_request() {
  ::qaul::rpc::filesharing::SendFileRequest* _msg = _internal_mutable_send_file_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileSharing.send_file_request)
  return _msg;
}

// .qaul.rpc.filesharing.FileHistoryRequest file_history = 2;
inline bool FileSharing::_internal_has_file_history() const {
  return message_case() == kFileHistory;
}
inline bool FileSharing::has_file_history() const {
  return _internal_has_file_history();
}
inline void FileSharing::set_has_file_history() {
  _impl_._oneof_case_[0] = kFileHistory;
}
inline void FileSharing::clear_file_history() {
  if (_internal_has_file_history()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.file_history_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::filesharing::FileHistoryRequest* FileSharing::release_file_history() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileSharing.file_history)
  if (_internal_has_file_history()) {
    clear_has_message();
    ::qaul::rpc::filesharing::FileHistoryRequest* temp = _impl_.message_.file_history_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.file_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::filesharing::FileHistoryRequest& FileSharing::_internal_file_history() const {
  return _internal_has_file_history()
      ? *_impl_.message_.file_history_
      : reinterpret_cast< ::qaul::rpc::filesharing::FileHistoryRequest&>(::qaul::rpc::filesharing::_FileHistoryRequest_default_instance_);
}
inline const ::qaul::rpc::filesharing::FileHistoryRequest& FileSharing::file_history() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileSharing.file_history)
  return _internal_file_history();
}
inline ::qaul::rpc::filesharing::FileHistoryRequest* FileSharing::unsafe_arena_release_file_history() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.filesharing.FileSharing.file_history)
  if (_internal_has_file_history()) {
    clear_has_message();
    ::qaul::rpc::filesharing::FileHistoryRequest* temp = _impl_.message_.file_history_;
    _impl_.message_.file_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSharing::unsafe_arena_set_allocated_file_history(::qaul::rpc::filesharing::FileHistoryRequest* file_history) {
  clear_message();
  if (file_history) {
    set_has_file_history();
    _impl_.message_.file_history_ = file_history;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.filesharing.FileSharing.file_history)
}
inline ::qaul::rpc::filesharing::FileHistoryRequest* FileSharing::_internal_mutable_file_history() {
  if (!_internal_has_file_history()) {
    clear_message();
    set_has_file_history();
    _impl_.message_.file_history_ = CreateMaybeMessage< ::qaul::rpc::filesharing::FileHistoryRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.file_history_;
}
inline ::qaul::rpc::filesharing::FileHistoryRequest* FileSharing::mutable_file_history() {
  ::qaul::rpc::filesharing::FileHistoryRequest* _msg = _internal_mutable_file_history();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileSharing.file_history)
  return _msg;
}

// .qaul.rpc.filesharing.FileHistoryResponse file_history_response = 3;
inline bool FileSharing::_internal_has_file_history_response() const {
  return message_case() == kFileHistoryResponse;
}
inline bool FileSharing::has_file_history_response() const {
  return _internal_has_file_history_response();
}
inline void FileSharing::set_has_file_history_response() {
  _impl_._oneof_case_[0] = kFileHistoryResponse;
}
inline void FileSharing::clear_file_history_response() {
  if (_internal_has_file_history_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.file_history_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::filesharing::FileHistoryResponse* FileSharing::release_file_history_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileSharing.file_history_response)
  if (_internal_has_file_history_response()) {
    clear_has_message();
    ::qaul::rpc::filesharing::FileHistoryResponse* temp = _impl_.message_.file_history_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.file_history_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::filesharing::FileHistoryResponse& FileSharing::_internal_file_history_response() const {
  return _internal_has_file_history_response()
      ? *_impl_.message_.file_history_response_
      : reinterpret_cast< ::qaul::rpc::filesharing::FileHistoryResponse&>(::qaul::rpc::filesharing::_FileHistoryResponse_default_instance_);
}
inline const ::qaul::rpc::filesharing::FileHistoryResponse& FileSharing::file_history_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileSharing.file_history_response)
  return _internal_file_history_response();
}
inline ::qaul::rpc::filesharing::FileHistoryResponse* FileSharing::unsafe_arena_release_file_history_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.filesharing.FileSharing.file_history_response)
  if (_internal_has_file_history_response()) {
    clear_has_message();
    ::qaul::rpc::filesharing::FileHistoryResponse* temp = _impl_.message_.file_history_response_;
    _impl_.message_.file_history_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSharing::unsafe_arena_set_allocated_file_history_response(::qaul::rpc::filesharing::FileHistoryResponse* file_history_response) {
  clear_message();
  if (file_history_response) {
    set_has_file_history_response();
    _impl_.message_.file_history_response_ = file_history_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.filesharing.FileSharing.file_history_response)
}
inline ::qaul::rpc::filesharing::FileHistoryResponse* FileSharing::_internal_mutable_file_history_response() {
  if (!_internal_has_file_history_response()) {
    clear_message();
    set_has_file_history_response();
    _impl_.message_.file_history_response_ = CreateMaybeMessage< ::qaul::rpc::filesharing::FileHistoryResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.file_history_response_;
}
inline ::qaul::rpc::filesharing::FileHistoryResponse* FileSharing::mutable_file_history_response() {
  ::qaul::rpc::filesharing::FileHistoryResponse* _msg = _internal_mutable_file_history_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileSharing.file_history_response)
  return _msg;
}

inline bool FileSharing::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void FileSharing::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline FileSharing::MessageCase FileSharing::message_case() const {
  return FileSharing::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SendFileRequest

// string path_name = 1;
inline void SendFileRequest::clear_path_name() {
  _impl_.path_name_.ClearToEmpty();
}
inline const std::string& SendFileRequest::path_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.SendFileRequest.path_name)
  return _internal_path_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendFileRequest::set_path_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.SendFileRequest.path_name)
}
inline std::string* SendFileRequest::mutable_path_name() {
  std::string* _s = _internal_mutable_path_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.SendFileRequest.path_name)
  return _s;
}
inline const std::string& SendFileRequest::_internal_path_name() const {
  return _impl_.path_name_.Get();
}
inline void SendFileRequest::_internal_set_path_name(const std::string& value) {
  
  _impl_.path_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SendFileRequest::_internal_mutable_path_name() {
  
  return _impl_.path_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SendFileRequest::release_path_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.SendFileRequest.path_name)
  return _impl_.path_name_.Release();
}
inline void SendFileRequest::set_allocated_path_name(std::string* path_name) {
  if (path_name != nullptr) {
    
  } else {
    
  }
  _impl_.path_name_.SetAllocated(path_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_name_.IsDefault()) {
    _impl_.path_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.SendFileRequest.path_name)
}

// bytes conversation_id = 2;
inline void SendFileRequest::clear_conversation_id() {
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& SendFileRequest::conversation_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.SendFileRequest.conversation_id)
  return _internal_conversation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendFileRequest::set_conversation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.SendFileRequest.conversation_id)
}
inline std::string* SendFileRequest::mutable_conversation_id() {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.SendFileRequest.conversation_id)
  return _s;
}
inline const std::string& SendFileRequest::_internal_conversation_id() const {
  return _impl_.conversation_id_.Get();
}
inline void SendFileRequest::_internal_set_conversation_id(const std::string& value) {
  
  _impl_.conversation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SendFileRequest::_internal_mutable_conversation_id() {
  
  return _impl_.conversation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SendFileRequest::release_conversation_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.SendFileRequest.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void SendFileRequest::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_id_.SetAllocated(conversation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.SendFileRequest.conversation_id)
}

// string description = 3;
inline void SendFileRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SendFileRequest::description() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.SendFileRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendFileRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.SendFileRequest.description)
}
inline std::string* SendFileRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.SendFileRequest.description)
  return _s;
}
inline const std::string& SendFileRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SendFileRequest::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SendFileRequest::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SendFileRequest::release_description() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.SendFileRequest.description)
  return _impl_.description_.Release();
}
inline void SendFileRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.SendFileRequest.description)
}

// -------------------------------------------------------------------

// FileHistoryRequest

// uint32 offset = 1;
inline void FileHistoryRequest::clear_offset() {
  _impl_.offset_ = 0u;
}
inline uint32_t FileHistoryRequest::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t FileHistoryRequest::offset() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryRequest.offset)
  return _internal_offset();
}
inline void FileHistoryRequest::_internal_set_offset(uint32_t value) {
  
  _impl_.offset_ = value;
}
inline void FileHistoryRequest::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryRequest.offset)
}

// uint32 limit = 2;
inline void FileHistoryRequest::clear_limit() {
  _impl_.limit_ = 0u;
}
inline uint32_t FileHistoryRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline uint32_t FileHistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryRequest.limit)
  return _internal_limit();
}
inline void FileHistoryRequest::_internal_set_limit(uint32_t value) {
  
  _impl_.limit_ = value;
}
inline void FileHistoryRequest::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryRequest.limit)
}

// -------------------------------------------------------------------

// FileHistoryEntry

// uint64 file_id = 1;
inline void FileHistoryEntry::clear_file_id() {
  _impl_.file_id_ = uint64_t{0u};
}
inline uint64_t FileHistoryEntry::_internal_file_id() const {
  return _impl_.file_id_;
}
inline uint64_t FileHistoryEntry::file_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.file_id)
  return _internal_file_id();
}
inline void FileHistoryEntry::_internal_set_file_id(uint64_t value) {
  
  _impl_.file_id_ = value;
}
inline void FileHistoryEntry::set_file_id(uint64_t value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.file_id)
}

// string file_name = 2;
inline void FileHistoryEntry::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileHistoryEntry::file_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileHistoryEntry::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.file_name)
}
inline std::string* FileHistoryEntry::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileHistoryEntry.file_name)
  return _s;
}
inline const std::string& FileHistoryEntry::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileHistoryEntry::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::release_file_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileHistoryEntry.file_name)
  return _impl_.file_name_.Release();
}
inline void FileHistoryEntry::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.FileHistoryEntry.file_name)
}

// string file_ext = 3;
inline void FileHistoryEntry::clear_file_ext() {
  _impl_.file_ext_.ClearToEmpty();
}
inline const std::string& FileHistoryEntry::file_ext() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.file_ext)
  return _internal_file_ext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileHistoryEntry::set_file_ext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_ext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.file_ext)
}
inline std::string* FileHistoryEntry::mutable_file_ext() {
  std::string* _s = _internal_mutable_file_ext();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileHistoryEntry.file_ext)
  return _s;
}
inline const std::string& FileHistoryEntry::_internal_file_ext() const {
  return _impl_.file_ext_.Get();
}
inline void FileHistoryEntry::_internal_set_file_ext(const std::string& value) {
  
  _impl_.file_ext_.Set(value, GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::_internal_mutable_file_ext() {
  
  return _impl_.file_ext_.Mutable(GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::release_file_ext() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileHistoryEntry.file_ext)
  return _impl_.file_ext_.Release();
}
inline void FileHistoryEntry::set_allocated_file_ext(std::string* file_ext) {
  if (file_ext != nullptr) {
    
  } else {
    
  }
  _impl_.file_ext_.SetAllocated(file_ext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_ext_.IsDefault()) {
    _impl_.file_ext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.FileHistoryEntry.file_ext)
}

// uint32 file_size = 4;
inline void FileHistoryEntry::clear_file_size() {
  _impl_.file_size_ = 0u;
}
inline uint32_t FileHistoryEntry::_internal_file_size() const {
  return _impl_.file_size_;
}
inline uint32_t FileHistoryEntry::file_size() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.file_size)
  return _internal_file_size();
}
inline void FileHistoryEntry::_internal_set_file_size(uint32_t value) {
  
  _impl_.file_size_ = value;
}
inline void FileHistoryEntry::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.file_size)
}

// string file_descr = 5;
inline void FileHistoryEntry::clear_file_descr() {
  _impl_.file_descr_.ClearToEmpty();
}
inline const std::string& FileHistoryEntry::file_descr() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.file_descr)
  return _internal_file_descr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileHistoryEntry::set_file_descr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_descr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.file_descr)
}
inline std::string* FileHistoryEntry::mutable_file_descr() {
  std::string* _s = _internal_mutable_file_descr();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileHistoryEntry.file_descr)
  return _s;
}
inline const std::string& FileHistoryEntry::_internal_file_descr() const {
  return _impl_.file_descr_.Get();
}
inline void FileHistoryEntry::_internal_set_file_descr(const std::string& value) {
  
  _impl_.file_descr_.Set(value, GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::_internal_mutable_file_descr() {
  
  return _impl_.file_descr_.Mutable(GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::release_file_descr() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileHistoryEntry.file_descr)
  return _impl_.file_descr_.Release();
}
inline void FileHistoryEntry::set_allocated_file_descr(std::string* file_descr) {
  if (file_descr != nullptr) {
    
  } else {
    
  }
  _impl_.file_descr_.SetAllocated(file_descr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_descr_.IsDefault()) {
    _impl_.file_descr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.FileHistoryEntry.file_descr)
}

// uint64 time = 6;
inline void FileHistoryEntry::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t FileHistoryEntry::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t FileHistoryEntry::time() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.time)
  return _internal_time();
}
inline void FileHistoryEntry::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void FileHistoryEntry::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.time)
}

// string sender_id = 7;
inline void FileHistoryEntry::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& FileHistoryEntry::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileHistoryEntry::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.sender_id)
}
inline std::string* FileHistoryEntry::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileHistoryEntry.sender_id)
  return _s;
}
inline const std::string& FileHistoryEntry::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void FileHistoryEntry::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileHistoryEntry.sender_id)
  return _impl_.sender_id_.Release();
}
inline void FileHistoryEntry::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.FileHistoryEntry.sender_id)
}

// string group_id = 8;
inline void FileHistoryEntry::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& FileHistoryEntry::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryEntry.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileHistoryEntry::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryEntry.group_id)
}
inline std::string* FileHistoryEntry::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileHistoryEntry.group_id)
  return _s;
}
inline const std::string& FileHistoryEntry::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void FileHistoryEntry::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileHistoryEntry::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.filesharing.FileHistoryEntry.group_id)
  return _impl_.group_id_.Release();
}
inline void FileHistoryEntry::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.filesharing.FileHistoryEntry.group_id)
}

// -------------------------------------------------------------------

// FileHistoryResponse

// uint32 offset = 1;
inline void FileHistoryResponse::clear_offset() {
  _impl_.offset_ = 0u;
}
inline uint32_t FileHistoryResponse::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t FileHistoryResponse::offset() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryResponse.offset)
  return _internal_offset();
}
inline void FileHistoryResponse::_internal_set_offset(uint32_t value) {
  
  _impl_.offset_ = value;
}
inline void FileHistoryResponse::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryResponse.offset)
}

// uint32 limit = 2;
inline void FileHistoryResponse::clear_limit() {
  _impl_.limit_ = 0u;
}
inline uint32_t FileHistoryResponse::_internal_limit() const {
  return _impl_.limit_;
}
inline uint32_t FileHistoryResponse::limit() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryResponse.limit)
  return _internal_limit();
}
inline void FileHistoryResponse::_internal_set_limit(uint32_t value) {
  
  _impl_.limit_ = value;
}
inline void FileHistoryResponse::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryResponse.limit)
}

// uint64 total = 3;
inline void FileHistoryResponse::clear_total() {
  _impl_.total_ = uint64_t{0u};
}
inline uint64_t FileHistoryResponse::_internal_total() const {
  return _impl_.total_;
}
inline uint64_t FileHistoryResponse::total() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryResponse.total)
  return _internal_total();
}
inline void FileHistoryResponse::_internal_set_total(uint64_t value) {
  
  _impl_.total_ = value;
}
inline void FileHistoryResponse::set_total(uint64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.filesharing.FileHistoryResponse.total)
}

// repeated .qaul.rpc.filesharing.FileHistoryEntry histories = 4;
inline int FileHistoryResponse::_internal_histories_size() const {
  return _impl_.histories_.size();
}
inline int FileHistoryResponse::histories_size() const {
  return _internal_histories_size();
}
inline void FileHistoryResponse::clear_histories() {
  _impl_.histories_.Clear();
}
inline ::qaul::rpc::filesharing::FileHistoryEntry* FileHistoryResponse::mutable_histories(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.filesharing.FileHistoryResponse.histories)
  return _impl_.histories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::filesharing::FileHistoryEntry >*
FileHistoryResponse::mutable_histories() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.filesharing.FileHistoryResponse.histories)
  return &_impl_.histories_;
}
inline const ::qaul::rpc::filesharing::FileHistoryEntry& FileHistoryResponse::_internal_histories(int index) const {
  return _impl_.histories_.Get(index);
}
inline const ::qaul::rpc::filesharing::FileHistoryEntry& FileHistoryResponse::histories(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.filesharing.FileHistoryResponse.histories)
  return _internal_histories(index);
}
inline ::qaul::rpc::filesharing::FileHistoryEntry* FileHistoryResponse::_internal_add_histories() {
  return _impl_.histories_.Add();
}
inline ::qaul::rpc::filesharing::FileHistoryEntry* FileHistoryResponse::add_histories() {
  ::qaul::rpc::filesharing::FileHistoryEntry* _add = _internal_add_histories();
  // @@protoc_insertion_point(field_add:qaul.rpc.filesharing.FileHistoryResponse.histories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::filesharing::FileHistoryEntry >&
FileHistoryResponse::histories() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.filesharing.FileHistoryResponse.histories)
  return _impl_.histories_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace filesharing
}  // namespace rpc
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2ffilesharing_2ffilesharing_5frpc_2eproto
