// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/filesharing/filesharing_net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2ffilesharing_2ffilesharing_5fnet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2ffilesharing_2ffilesharing_5fnet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2ffilesharing_2ffilesharing_5fnet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2ffilesharing_2ffilesharing_5fnet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2ffilesharing_2ffilesharing_5fnet_2eproto;
namespace qaul {
namespace net {
namespace filesharing {
class FileSharingContainer;
struct FileSharingContainerDefaultTypeInternal;
extern FileSharingContainerDefaultTypeInternal _FileSharingContainer_default_instance_;
class FileSharingData;
struct FileSharingDataDefaultTypeInternal;
extern FileSharingDataDefaultTypeInternal _FileSharingData_default_instance_;
class FileSharingInfo;
struct FileSharingInfoDefaultTypeInternal;
extern FileSharingInfoDefaultTypeInternal _FileSharingInfo_default_instance_;
}  // namespace filesharing
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::net::filesharing::FileSharingContainer* Arena::CreateMaybeMessage<::qaul::net::filesharing::FileSharingContainer>(Arena*);
template<> ::qaul::net::filesharing::FileSharingData* Arena::CreateMaybeMessage<::qaul::net::filesharing::FileSharingData>(Arena*);
template<> ::qaul::net::filesharing::FileSharingInfo* Arena::CreateMaybeMessage<::qaul::net::filesharing::FileSharingInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace net {
namespace filesharing {

// ===================================================================

class FileSharingContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.filesharing.FileSharingContainer) */ {
 public:
  inline FileSharingContainer() : FileSharingContainer(nullptr) {}
  ~FileSharingContainer() override;
  explicit PROTOBUF_CONSTEXPR FileSharingContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSharingContainer(const FileSharingContainer& from);
  FileSharingContainer(FileSharingContainer&& from) noexcept
    : FileSharingContainer() {
    *this = ::std::move(from);
  }

  inline FileSharingContainer& operator=(const FileSharingContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSharingContainer& operator=(FileSharingContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSharingContainer& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kFileInfo = 1,
    kFileData = 2,
    MESSAGE_NOT_SET = 0,
  };

  static inline const FileSharingContainer* internal_default_instance() {
    return reinterpret_cast<const FileSharingContainer*>(
               &_FileSharingContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileSharingContainer& a, FileSharingContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSharingContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSharingContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSharingContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSharingContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileSharingContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileSharingContainer& from) {
    FileSharingContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSharingContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.filesharing.FileSharingContainer";
  }
  protected:
  explicit FileSharingContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileInfoFieldNumber = 1,
    kFileDataFieldNumber = 2,
  };
  // .qaul.net.filesharing.FileSharingInfo file_info = 1;
  bool has_file_info() const;
  private:
  bool _internal_has_file_info() const;
  public:
  void clear_file_info();
  const ::qaul::net::filesharing::FileSharingInfo& file_info() const;
  PROTOBUF_NODISCARD ::qaul::net::filesharing::FileSharingInfo* release_file_info();
  ::qaul::net::filesharing::FileSharingInfo* mutable_file_info();
  void set_allocated_file_info(::qaul::net::filesharing::FileSharingInfo* file_info);
  private:
  const ::qaul::net::filesharing::FileSharingInfo& _internal_file_info() const;
  ::qaul::net::filesharing::FileSharingInfo* _internal_mutable_file_info();
  public:
  void unsafe_arena_set_allocated_file_info(
      ::qaul::net::filesharing::FileSharingInfo* file_info);
  ::qaul::net::filesharing::FileSharingInfo* unsafe_arena_release_file_info();

  // .qaul.net.filesharing.FileSharingData file_data = 2;
  bool has_file_data() const;
  private:
  bool _internal_has_file_data() const;
  public:
  void clear_file_data();
  const ::qaul::net::filesharing::FileSharingData& file_data() const;
  PROTOBUF_NODISCARD ::qaul::net::filesharing::FileSharingData* release_file_data();
  ::qaul::net::filesharing::FileSharingData* mutable_file_data();
  void set_allocated_file_data(::qaul::net::filesharing::FileSharingData* file_data);
  private:
  const ::qaul::net::filesharing::FileSharingData& _internal_file_data() const;
  ::qaul::net::filesharing::FileSharingData* _internal_mutable_file_data();
  public:
  void unsafe_arena_set_allocated_file_data(
      ::qaul::net::filesharing::FileSharingData* file_data);
  ::qaul::net::filesharing::FileSharingData* unsafe_arena_release_file_data();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.net.filesharing.FileSharingContainer)
 private:
  class _Internal;
  void set_has_file_info();
  void set_has_file_data();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::net::filesharing::FileSharingInfo* file_info_;
      ::qaul::net::filesharing::FileSharingData* file_data_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5fnet_2eproto;
};
// -------------------------------------------------------------------

class FileSharingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.filesharing.FileSharingInfo) */ {
 public:
  inline FileSharingInfo() : FileSharingInfo(nullptr) {}
  ~FileSharingInfo() override;
  explicit PROTOBUF_CONSTEXPR FileSharingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSharingInfo(const FileSharingInfo& from);
  FileSharingInfo(FileSharingInfo&& from) noexcept
    : FileSharingInfo() {
    *this = ::std::move(from);
  }

  inline FileSharingInfo& operator=(const FileSharingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSharingInfo& operator=(FileSharingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSharingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSharingInfo* internal_default_instance() {
    return reinterpret_cast<const FileSharingInfo*>(
               &_FileSharingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileSharingInfo& a, FileSharingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSharingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSharingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSharingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSharingInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileSharingInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileSharingInfo& from) {
    FileSharingInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSharingInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.filesharing.FileSharingInfo";
  }
  protected:
  explicit FileSharingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kFileExtensionFieldNumber = 3,
    kFileDescrFieldNumber = 5,
    kFileIdFieldNumber = 1,
    kFileSizeFieldNumber = 4,
    kStartIndexFieldNumber = 6,
    kMessageCountFieldNumber = 7,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_extension = 3;
  void clear_file_extension();
  const std::string& file_extension() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_extension(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_extension();
  PROTOBUF_NODISCARD std::string* release_file_extension();
  void set_allocated_file_extension(std::string* file_extension);
  private:
  const std::string& _internal_file_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_extension(const std::string& value);
  std::string* _internal_mutable_file_extension();
  public:

  // string file_descr = 5;
  void clear_file_descr();
  const std::string& file_descr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_descr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_descr();
  PROTOBUF_NODISCARD std::string* release_file_descr();
  void set_allocated_file_descr(std::string* file_descr);
  private:
  const std::string& _internal_file_descr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_descr(const std::string& value);
  std::string* _internal_mutable_file_descr();
  public:

  // uint64 file_id = 1;
  void clear_file_id();
  uint64_t file_id() const;
  void set_file_id(uint64_t value);
  private:
  uint64_t _internal_file_id() const;
  void _internal_set_file_id(uint64_t value);
  public:

  // uint32 file_size = 4;
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // uint32 start_index = 6;
  void clear_start_index();
  uint32_t start_index() const;
  void set_start_index(uint32_t value);
  private:
  uint32_t _internal_start_index() const;
  void _internal_set_start_index(uint32_t value);
  public:

  // uint32 message_count = 7;
  void clear_message_count();
  uint32_t message_count() const;
  void set_message_count(uint32_t value);
  private:
  uint32_t _internal_message_count() const;
  void _internal_set_message_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.filesharing.FileSharingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_extension_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_descr_;
    uint64_t file_id_;
    uint32_t file_size_;
    uint32_t start_index_;
    uint32_t message_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5fnet_2eproto;
};
// -------------------------------------------------------------------

class FileSharingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.filesharing.FileSharingData) */ {
 public:
  inline FileSharingData() : FileSharingData(nullptr) {}
  ~FileSharingData() override;
  explicit PROTOBUF_CONSTEXPR FileSharingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSharingData(const FileSharingData& from);
  FileSharingData(FileSharingData&& from) noexcept
    : FileSharingData() {
    *this = ::std::move(from);
  }

  inline FileSharingData& operator=(const FileSharingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSharingData& operator=(FileSharingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileSharingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileSharingData* internal_default_instance() {
    return reinterpret_cast<const FileSharingData*>(
               &_FileSharingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileSharingData& a, FileSharingData& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSharingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSharingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSharingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSharingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileSharingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileSharingData& from) {
    FileSharingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSharingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.filesharing.FileSharingData";
  }
  protected:
  explicit FileSharingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kStartIndexFieldNumber = 1,
    kMessageCountFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 start_index = 1;
  void clear_start_index();
  uint32_t start_index() const;
  void set_start_index(uint32_t value);
  private:
  uint32_t _internal_start_index() const;
  void _internal_set_start_index(uint32_t value);
  public:

  // uint32 message_count = 2;
  void clear_message_count();
  uint32_t message_count() const;
  void set_message_count(uint32_t value);
  private:
  uint32_t _internal_message_count() const;
  void _internal_set_message_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.filesharing.FileSharingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t start_index_;
    uint32_t message_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2ffilesharing_2ffilesharing_5fnet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileSharingContainer

// .qaul.net.filesharing.FileSharingInfo file_info = 1;
inline bool FileSharingContainer::_internal_has_file_info() const {
  return message_case() == kFileInfo;
}
inline bool FileSharingContainer::has_file_info() const {
  return _internal_has_file_info();
}
inline void FileSharingContainer::set_has_file_info() {
  _impl_._oneof_case_[0] = kFileInfo;
}
inline void FileSharingContainer::clear_file_info() {
  if (_internal_has_file_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.file_info_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::filesharing::FileSharingInfo* FileSharingContainer::release_file_info() {
  // @@protoc_insertion_point(field_release:qaul.net.filesharing.FileSharingContainer.file_info)
  if (_internal_has_file_info()) {
    clear_has_message();
    ::qaul::net::filesharing::FileSharingInfo* temp = _impl_.message_.file_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.file_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::filesharing::FileSharingInfo& FileSharingContainer::_internal_file_info() const {
  return _internal_has_file_info()
      ? *_impl_.message_.file_info_
      : reinterpret_cast< ::qaul::net::filesharing::FileSharingInfo&>(::qaul::net::filesharing::_FileSharingInfo_default_instance_);
}
inline const ::qaul::net::filesharing::FileSharingInfo& FileSharingContainer::file_info() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingContainer.file_info)
  return _internal_file_info();
}
inline ::qaul::net::filesharing::FileSharingInfo* FileSharingContainer::unsafe_arena_release_file_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.filesharing.FileSharingContainer.file_info)
  if (_internal_has_file_info()) {
    clear_has_message();
    ::qaul::net::filesharing::FileSharingInfo* temp = _impl_.message_.file_info_;
    _impl_.message_.file_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSharingContainer::unsafe_arena_set_allocated_file_info(::qaul::net::filesharing::FileSharingInfo* file_info) {
  clear_message();
  if (file_info) {
    set_has_file_info();
    _impl_.message_.file_info_ = file_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.filesharing.FileSharingContainer.file_info)
}
inline ::qaul::net::filesharing::FileSharingInfo* FileSharingContainer::_internal_mutable_file_info() {
  if (!_internal_has_file_info()) {
    clear_message();
    set_has_file_info();
    _impl_.message_.file_info_ = CreateMaybeMessage< ::qaul::net::filesharing::FileSharingInfo >(GetArenaForAllocation());
  }
  return _impl_.message_.file_info_;
}
inline ::qaul::net::filesharing::FileSharingInfo* FileSharingContainer::mutable_file_info() {
  ::qaul::net::filesharing::FileSharingInfo* _msg = _internal_mutable_file_info();
  // @@protoc_insertion_point(field_mutable:qaul.net.filesharing.FileSharingContainer.file_info)
  return _msg;
}

// .qaul.net.filesharing.FileSharingData file_data = 2;
inline bool FileSharingContainer::_internal_has_file_data() const {
  return message_case() == kFileData;
}
inline bool FileSharingContainer::has_file_data() const {
  return _internal_has_file_data();
}
inline void FileSharingContainer::set_has_file_data() {
  _impl_._oneof_case_[0] = kFileData;
}
inline void FileSharingContainer::clear_file_data() {
  if (_internal_has_file_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.file_data_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::filesharing::FileSharingData* FileSharingContainer::release_file_data() {
  // @@protoc_insertion_point(field_release:qaul.net.filesharing.FileSharingContainer.file_data)
  if (_internal_has_file_data()) {
    clear_has_message();
    ::qaul::net::filesharing::FileSharingData* temp = _impl_.message_.file_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.file_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::filesharing::FileSharingData& FileSharingContainer::_internal_file_data() const {
  return _internal_has_file_data()
      ? *_impl_.message_.file_data_
      : reinterpret_cast< ::qaul::net::filesharing::FileSharingData&>(::qaul::net::filesharing::_FileSharingData_default_instance_);
}
inline const ::qaul::net::filesharing::FileSharingData& FileSharingContainer::file_data() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingContainer.file_data)
  return _internal_file_data();
}
inline ::qaul::net::filesharing::FileSharingData* FileSharingContainer::unsafe_arena_release_file_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.filesharing.FileSharingContainer.file_data)
  if (_internal_has_file_data()) {
    clear_has_message();
    ::qaul::net::filesharing::FileSharingData* temp = _impl_.message_.file_data_;
    _impl_.message_.file_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSharingContainer::unsafe_arena_set_allocated_file_data(::qaul::net::filesharing::FileSharingData* file_data) {
  clear_message();
  if (file_data) {
    set_has_file_data();
    _impl_.message_.file_data_ = file_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.filesharing.FileSharingContainer.file_data)
}
inline ::qaul::net::filesharing::FileSharingData* FileSharingContainer::_internal_mutable_file_data() {
  if (!_internal_has_file_data()) {
    clear_message();
    set_has_file_data();
    _impl_.message_.file_data_ = CreateMaybeMessage< ::qaul::net::filesharing::FileSharingData >(GetArenaForAllocation());
  }
  return _impl_.message_.file_data_;
}
inline ::qaul::net::filesharing::FileSharingData* FileSharingContainer::mutable_file_data() {
  ::qaul::net::filesharing::FileSharingData* _msg = _internal_mutable_file_data();
  // @@protoc_insertion_point(field_mutable:qaul.net.filesharing.FileSharingContainer.file_data)
  return _msg;
}

inline bool FileSharingContainer::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void FileSharingContainer::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline FileSharingContainer::MessageCase FileSharingContainer::message_case() const {
  return FileSharingContainer::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileSharingInfo

// uint64 file_id = 1;
inline void FileSharingInfo::clear_file_id() {
  _impl_.file_id_ = uint64_t{0u};
}
inline uint64_t FileSharingInfo::_internal_file_id() const {
  return _impl_.file_id_;
}
inline uint64_t FileSharingInfo::file_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingInfo.file_id)
  return _internal_file_id();
}
inline void FileSharingInfo::_internal_set_file_id(uint64_t value) {
  
  _impl_.file_id_ = value;
}
inline void FileSharingInfo::set_file_id(uint64_t value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingInfo.file_id)
}

// string file_name = 2;
inline void FileSharingInfo::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileSharingInfo::file_name() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingInfo.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileSharingInfo::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingInfo.file_name)
}
inline std::string* FileSharingInfo::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:qaul.net.filesharing.FileSharingInfo.file_name)
  return _s;
}
inline const std::string& FileSharingInfo::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileSharingInfo::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileSharingInfo::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileSharingInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:qaul.net.filesharing.FileSharingInfo.file_name)
  return _impl_.file_name_.Release();
}
inline void FileSharingInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.filesharing.FileSharingInfo.file_name)
}

// string file_extension = 3;
inline void FileSharingInfo::clear_file_extension() {
  _impl_.file_extension_.ClearToEmpty();
}
inline const std::string& FileSharingInfo::file_extension() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingInfo.file_extension)
  return _internal_file_extension();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileSharingInfo::set_file_extension(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_extension_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingInfo.file_extension)
}
inline std::string* FileSharingInfo::mutable_file_extension() {
  std::string* _s = _internal_mutable_file_extension();
  // @@protoc_insertion_point(field_mutable:qaul.net.filesharing.FileSharingInfo.file_extension)
  return _s;
}
inline const std::string& FileSharingInfo::_internal_file_extension() const {
  return _impl_.file_extension_.Get();
}
inline void FileSharingInfo::_internal_set_file_extension(const std::string& value) {
  
  _impl_.file_extension_.Set(value, GetArenaForAllocation());
}
inline std::string* FileSharingInfo::_internal_mutable_file_extension() {
  
  return _impl_.file_extension_.Mutable(GetArenaForAllocation());
}
inline std::string* FileSharingInfo::release_file_extension() {
  // @@protoc_insertion_point(field_release:qaul.net.filesharing.FileSharingInfo.file_extension)
  return _impl_.file_extension_.Release();
}
inline void FileSharingInfo::set_allocated_file_extension(std::string* file_extension) {
  if (file_extension != nullptr) {
    
  } else {
    
  }
  _impl_.file_extension_.SetAllocated(file_extension, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_extension_.IsDefault()) {
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.filesharing.FileSharingInfo.file_extension)
}

// uint32 file_size = 4;
inline void FileSharingInfo::clear_file_size() {
  _impl_.file_size_ = 0u;
}
inline uint32_t FileSharingInfo::_internal_file_size() const {
  return _impl_.file_size_;
}
inline uint32_t FileSharingInfo::file_size() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingInfo.file_size)
  return _internal_file_size();
}
inline void FileSharingInfo::_internal_set_file_size(uint32_t value) {
  
  _impl_.file_size_ = value;
}
inline void FileSharingInfo::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingInfo.file_size)
}

// string file_descr = 5;
inline void FileSharingInfo::clear_file_descr() {
  _impl_.file_descr_.ClearToEmpty();
}
inline const std::string& FileSharingInfo::file_descr() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingInfo.file_descr)
  return _internal_file_descr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileSharingInfo::set_file_descr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_descr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingInfo.file_descr)
}
inline std::string* FileSharingInfo::mutable_file_descr() {
  std::string* _s = _internal_mutable_file_descr();
  // @@protoc_insertion_point(field_mutable:qaul.net.filesharing.FileSharingInfo.file_descr)
  return _s;
}
inline const std::string& FileSharingInfo::_internal_file_descr() const {
  return _impl_.file_descr_.Get();
}
inline void FileSharingInfo::_internal_set_file_descr(const std::string& value) {
  
  _impl_.file_descr_.Set(value, GetArenaForAllocation());
}
inline std::string* FileSharingInfo::_internal_mutable_file_descr() {
  
  return _impl_.file_descr_.Mutable(GetArenaForAllocation());
}
inline std::string* FileSharingInfo::release_file_descr() {
  // @@protoc_insertion_point(field_release:qaul.net.filesharing.FileSharingInfo.file_descr)
  return _impl_.file_descr_.Release();
}
inline void FileSharingInfo::set_allocated_file_descr(std::string* file_descr) {
  if (file_descr != nullptr) {
    
  } else {
    
  }
  _impl_.file_descr_.SetAllocated(file_descr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_descr_.IsDefault()) {
    _impl_.file_descr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.filesharing.FileSharingInfo.file_descr)
}

// uint32 start_index = 6;
inline void FileSharingInfo::clear_start_index() {
  _impl_.start_index_ = 0u;
}
inline uint32_t FileSharingInfo::_internal_start_index() const {
  return _impl_.start_index_;
}
inline uint32_t FileSharingInfo::start_index() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingInfo.start_index)
  return _internal_start_index();
}
inline void FileSharingInfo::_internal_set_start_index(uint32_t value) {
  
  _impl_.start_index_ = value;
}
inline void FileSharingInfo::set_start_index(uint32_t value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingInfo.start_index)
}

// uint32 message_count = 7;
inline void FileSharingInfo::clear_message_count() {
  _impl_.message_count_ = 0u;
}
inline uint32_t FileSharingInfo::_internal_message_count() const {
  return _impl_.message_count_;
}
inline uint32_t FileSharingInfo::message_count() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingInfo.message_count)
  return _internal_message_count();
}
inline void FileSharingInfo::_internal_set_message_count(uint32_t value) {
  
  _impl_.message_count_ = value;
}
inline void FileSharingInfo::set_message_count(uint32_t value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingInfo.message_count)
}

// -------------------------------------------------------------------

// FileSharingData

// uint32 start_index = 1;
inline void FileSharingData::clear_start_index() {
  _impl_.start_index_ = 0u;
}
inline uint32_t FileSharingData::_internal_start_index() const {
  return _impl_.start_index_;
}
inline uint32_t FileSharingData::start_index() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingData.start_index)
  return _internal_start_index();
}
inline void FileSharingData::_internal_set_start_index(uint32_t value) {
  
  _impl_.start_index_ = value;
}
inline void FileSharingData::set_start_index(uint32_t value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingData.start_index)
}

// uint32 message_count = 2;
inline void FileSharingData::clear_message_count() {
  _impl_.message_count_ = 0u;
}
inline uint32_t FileSharingData::_internal_message_count() const {
  return _impl_.message_count_;
}
inline uint32_t FileSharingData::message_count() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingData.message_count)
  return _internal_message_count();
}
inline void FileSharingData::_internal_set_message_count(uint32_t value) {
  
  _impl_.message_count_ = value;
}
inline void FileSharingData::set_message_count(uint32_t value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingData.message_count)
}

// bytes data = 3;
inline void FileSharingData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FileSharingData::data() const {
  // @@protoc_insertion_point(field_get:qaul.net.filesharing.FileSharingData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileSharingData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.filesharing.FileSharingData.data)
}
inline std::string* FileSharingData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.net.filesharing.FileSharingData.data)
  return _s;
}
inline const std::string& FileSharingData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FileSharingData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileSharingData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileSharingData::release_data() {
  // @@protoc_insertion_point(field_release:qaul.net.filesharing.FileSharingData.data)
  return _impl_.data_.Release();
}
inline void FileSharingData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.filesharing.FileSharingData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace filesharing
}  // namespace net
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2ffilesharing_2ffilesharing_5fnet_2eproto
