// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/messaging/messaging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fmessaging_2fmessaging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fmessaging_2fmessaging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fmessaging_2fmessaging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fmessaging_2fmessaging_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fmessaging_2fmessaging_2eproto;
namespace qaul {
namespace net {
namespace messaging {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class Confirmation;
struct ConfirmationDefaultTypeInternal;
extern ConfirmationDefaultTypeInternal _Confirmation_default_instance_;
class Container;
struct ContainerDefaultTypeInternal;
extern ContainerDefaultTypeInternal _Container_default_instance_;
class CryptoService;
struct CryptoServiceDefaultTypeInternal;
extern CryptoServiceDefaultTypeInternal _CryptoService_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Envelope;
struct EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
class FileMessage;
struct FileMessageDefaultTypeInternal;
extern FileMessageDefaultTypeInternal _FileMessage_default_instance_;
class GroupChatMessage;
struct GroupChatMessageDefaultTypeInternal;
extern GroupChatMessageDefaultTypeInternal _GroupChatMessage_default_instance_;
class Messaging;
struct MessagingDefaultTypeInternal;
extern MessagingDefaultTypeInternal _Messaging_default_instance_;
class RtcMessage;
struct RtcMessageDefaultTypeInternal;
extern RtcMessageDefaultTypeInternal _RtcMessage_default_instance_;
}  // namespace messaging
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::net::messaging::ChatMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::ChatMessage>(Arena*);
template<> ::qaul::net::messaging::Confirmation* Arena::CreateMaybeMessage<::qaul::net::messaging::Confirmation>(Arena*);
template<> ::qaul::net::messaging::Container* Arena::CreateMaybeMessage<::qaul::net::messaging::Container>(Arena*);
template<> ::qaul::net::messaging::CryptoService* Arena::CreateMaybeMessage<::qaul::net::messaging::CryptoService>(Arena*);
template<> ::qaul::net::messaging::Data* Arena::CreateMaybeMessage<::qaul::net::messaging::Data>(Arena*);
template<> ::qaul::net::messaging::Envelope* Arena::CreateMaybeMessage<::qaul::net::messaging::Envelope>(Arena*);
template<> ::qaul::net::messaging::FileMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::FileMessage>(Arena*);
template<> ::qaul::net::messaging::GroupChatMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::GroupChatMessage>(Arena*);
template<> ::qaul::net::messaging::Messaging* Arena::CreateMaybeMessage<::qaul::net::messaging::Messaging>(Arena*);
template<> ::qaul::net::messaging::RtcMessage* Arena::CreateMaybeMessage<::qaul::net::messaging::RtcMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace net {
namespace messaging {

// ===================================================================

class Container final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Container) */ {
 public:
  inline Container() : Container(nullptr) {}
  ~Container() override;
  explicit PROTOBUF_CONSTEXPR Container(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Container(const Container& from);
  Container(Container&& from) noexcept
    : Container() {
    *this = ::std::move(from);
  }

  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container& operator=(Container&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Container& default_instance() {
    return *internal_default_instance();
  }
  static inline const Container* internal_default_instance() {
    return reinterpret_cast<const Container*>(
               &_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Container& a, Container& b) {
    a.Swap(&b);
  }
  inline void Swap(Container* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Container* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Container>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Container& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Container& from) {
    Container::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Container* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Container";
  }
  protected:
  explicit Container(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kEnvelopeFieldNumber = 2,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .qaul.net.messaging.Envelope envelope = 2;
  bool has_envelope() const;
  private:
  bool _internal_has_envelope() const;
  public:
  void clear_envelope();
  const ::qaul::net::messaging::Envelope& envelope() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::Envelope* release_envelope();
  ::qaul::net::messaging::Envelope* mutable_envelope();
  void set_allocated_envelope(::qaul::net::messaging::Envelope* envelope);
  private:
  const ::qaul::net::messaging::Envelope& _internal_envelope() const;
  ::qaul::net::messaging::Envelope* _internal_mutable_envelope();
  public:
  void unsafe_arena_set_allocated_envelope(
      ::qaul::net::messaging::Envelope* envelope);
  ::qaul::net::messaging::Envelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Container)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::qaul::net::messaging::Envelope* envelope_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Envelope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  ~Envelope() override;
  explicit PROTOBUF_CONSTEXPR Envelope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Envelope(const Envelope& from);
  Envelope(Envelope&& from) noexcept
    : Envelope() {
    *this = ::std::move(from);
  }

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Envelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
               &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Envelope& a, Envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(Envelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Envelope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Envelope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Envelope& from) {
    Envelope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Envelope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Envelope";
  }
  protected:
  explicit Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
  };
  // repeated .qaul.net.messaging.Data data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::qaul::net::messaging::Data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >*
      mutable_data();
  private:
  const ::qaul::net::messaging::Data& _internal_data(int index) const;
  ::qaul::net::messaging::Data* _internal_add_data();
  public:
  const ::qaul::net::messaging::Data& data(int index) const;
  ::qaul::net::messaging::Data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >&
      data() const;

  // bytes sender_id = 1;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // bytes receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Envelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data > data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  explicit PROTOBUF_CONSTEXPR Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Data& from) {
    Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kNonceFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 nonce = 1;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t nonce_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Messaging final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Messaging) */ {
 public:
  inline Messaging() : Messaging(nullptr) {}
  ~Messaging() override;
  explicit PROTOBUF_CONSTEXPR Messaging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Messaging(const Messaging& from);
  Messaging(Messaging&& from) noexcept
    : Messaging() {
    *this = ::std::move(from);
  }

  inline Messaging& operator=(const Messaging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Messaging& operator=(Messaging&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Messaging& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kConfirmationMessage = 1,
    kCryptoService = 2,
    kChatMessage = 3,
    kFileMessage = 4,
    kGroupChatMessage = 5,
    kRtcMessage = 6,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Messaging* internal_default_instance() {
    return reinterpret_cast<const Messaging*>(
               &_Messaging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Messaging& a, Messaging& b) {
    a.Swap(&b);
  }
  inline void Swap(Messaging* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Messaging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Messaging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Messaging>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Messaging& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Messaging& from) {
    Messaging::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Messaging* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Messaging";
  }
  protected:
  explicit Messaging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfirmationMessageFieldNumber = 1,
    kCryptoServiceFieldNumber = 2,
    kChatMessageFieldNumber = 3,
    kFileMessageFieldNumber = 4,
    kGroupChatMessageFieldNumber = 5,
    kRtcMessageFieldNumber = 6,
  };
  // .qaul.net.messaging.Confirmation confirmation_message = 1;
  bool has_confirmation_message() const;
  private:
  bool _internal_has_confirmation_message() const;
  public:
  void clear_confirmation_message();
  const ::qaul::net::messaging::Confirmation& confirmation_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::Confirmation* release_confirmation_message();
  ::qaul::net::messaging::Confirmation* mutable_confirmation_message();
  void set_allocated_confirmation_message(::qaul::net::messaging::Confirmation* confirmation_message);
  private:
  const ::qaul::net::messaging::Confirmation& _internal_confirmation_message() const;
  ::qaul::net::messaging::Confirmation* _internal_mutable_confirmation_message();
  public:
  void unsafe_arena_set_allocated_confirmation_message(
      ::qaul::net::messaging::Confirmation* confirmation_message);
  ::qaul::net::messaging::Confirmation* unsafe_arena_release_confirmation_message();

  // .qaul.net.messaging.CryptoService crypto_service = 2;
  bool has_crypto_service() const;
  private:
  bool _internal_has_crypto_service() const;
  public:
  void clear_crypto_service();
  const ::qaul::net::messaging::CryptoService& crypto_service() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::CryptoService* release_crypto_service();
  ::qaul::net::messaging::CryptoService* mutable_crypto_service();
  void set_allocated_crypto_service(::qaul::net::messaging::CryptoService* crypto_service);
  private:
  const ::qaul::net::messaging::CryptoService& _internal_crypto_service() const;
  ::qaul::net::messaging::CryptoService* _internal_mutable_crypto_service();
  public:
  void unsafe_arena_set_allocated_crypto_service(
      ::qaul::net::messaging::CryptoService* crypto_service);
  ::qaul::net::messaging::CryptoService* unsafe_arena_release_crypto_service();

  // .qaul.net.messaging.ChatMessage chat_message = 3;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;
  public:
  void clear_chat_message();
  const ::qaul::net::messaging::ChatMessage& chat_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::ChatMessage* release_chat_message();
  ::qaul::net::messaging::ChatMessage* mutable_chat_message();
  void set_allocated_chat_message(::qaul::net::messaging::ChatMessage* chat_message);
  private:
  const ::qaul::net::messaging::ChatMessage& _internal_chat_message() const;
  ::qaul::net::messaging::ChatMessage* _internal_mutable_chat_message();
  public:
  void unsafe_arena_set_allocated_chat_message(
      ::qaul::net::messaging::ChatMessage* chat_message);
  ::qaul::net::messaging::ChatMessage* unsafe_arena_release_chat_message();

  // .qaul.net.messaging.FileMessage file_message = 4;
  bool has_file_message() const;
  private:
  bool _internal_has_file_message() const;
  public:
  void clear_file_message();
  const ::qaul::net::messaging::FileMessage& file_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::FileMessage* release_file_message();
  ::qaul::net::messaging::FileMessage* mutable_file_message();
  void set_allocated_file_message(::qaul::net::messaging::FileMessage* file_message);
  private:
  const ::qaul::net::messaging::FileMessage& _internal_file_message() const;
  ::qaul::net::messaging::FileMessage* _internal_mutable_file_message();
  public:
  void unsafe_arena_set_allocated_file_message(
      ::qaul::net::messaging::FileMessage* file_message);
  ::qaul::net::messaging::FileMessage* unsafe_arena_release_file_message();

  // .qaul.net.messaging.GroupChatMessage group_chat_message = 5;
  bool has_group_chat_message() const;
  private:
  bool _internal_has_group_chat_message() const;
  public:
  void clear_group_chat_message();
  const ::qaul::net::messaging::GroupChatMessage& group_chat_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::GroupChatMessage* release_group_chat_message();
  ::qaul::net::messaging::GroupChatMessage* mutable_group_chat_message();
  void set_allocated_group_chat_message(::qaul::net::messaging::GroupChatMessage* group_chat_message);
  private:
  const ::qaul::net::messaging::GroupChatMessage& _internal_group_chat_message() const;
  ::qaul::net::messaging::GroupChatMessage* _internal_mutable_group_chat_message();
  public:
  void unsafe_arena_set_allocated_group_chat_message(
      ::qaul::net::messaging::GroupChatMessage* group_chat_message);
  ::qaul::net::messaging::GroupChatMessage* unsafe_arena_release_group_chat_message();

  // .qaul.net.messaging.RtcMessage rtc_message = 6;
  bool has_rtc_message() const;
  private:
  bool _internal_has_rtc_message() const;
  public:
  void clear_rtc_message();
  const ::qaul::net::messaging::RtcMessage& rtc_message() const;
  PROTOBUF_NODISCARD ::qaul::net::messaging::RtcMessage* release_rtc_message();
  ::qaul::net::messaging::RtcMessage* mutable_rtc_message();
  void set_allocated_rtc_message(::qaul::net::messaging::RtcMessage* rtc_message);
  private:
  const ::qaul::net::messaging::RtcMessage& _internal_rtc_message() const;
  ::qaul::net::messaging::RtcMessage* _internal_mutable_rtc_message();
  public:
  void unsafe_arena_set_allocated_rtc_message(
      ::qaul::net::messaging::RtcMessage* rtc_message);
  ::qaul::net::messaging::RtcMessage* unsafe_arena_release_rtc_message();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Messaging)
 private:
  class _Internal;
  void set_has_confirmation_message();
  void set_has_crypto_service();
  void set_has_chat_message();
  void set_has_file_message();
  void set_has_group_chat_message();
  void set_has_rtc_message();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::net::messaging::Confirmation* confirmation_message_;
      ::qaul::net::messaging::CryptoService* crypto_service_;
      ::qaul::net::messaging::ChatMessage* chat_message_;
      ::qaul::net::messaging::FileMessage* file_message_;
      ::qaul::net::messaging::GroupChatMessage* group_chat_message_;
      ::qaul::net::messaging::RtcMessage* rtc_message_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class CryptoService final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.net.messaging.CryptoService) */ {
 public:
  inline CryptoService() : CryptoService(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CryptoService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CryptoService(const CryptoService& from);
  CryptoService(CryptoService&& from) noexcept
    : CryptoService() {
    *this = ::std::move(from);
  }

  inline CryptoService& operator=(const CryptoService& from) {
    CopyFrom(from);
    return *this;
  }
  inline CryptoService& operator=(CryptoService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CryptoService& default_instance() {
    return *internal_default_instance();
  }
  static inline const CryptoService* internal_default_instance() {
    return reinterpret_cast<const CryptoService*>(
               &_CryptoService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CryptoService& a, CryptoService& b) {
    a.Swap(&b);
  }
  inline void Swap(CryptoService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CryptoService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CryptoService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CryptoService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CryptoService& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CryptoService& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.CryptoService";
  }
  protected:
  explicit CryptoService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.CryptoService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class Confirmation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.Confirmation) */ {
 public:
  inline Confirmation() : Confirmation(nullptr) {}
  ~Confirmation() override;
  explicit PROTOBUF_CONSTEXPR Confirmation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Confirmation(const Confirmation& from);
  Confirmation(Confirmation&& from) noexcept
    : Confirmation() {
    *this = ::std::move(from);
  }

  inline Confirmation& operator=(const Confirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Confirmation& operator=(Confirmation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Confirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Confirmation* internal_default_instance() {
    return reinterpret_cast<const Confirmation*>(
               &_Confirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Confirmation& a, Confirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(Confirmation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Confirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Confirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Confirmation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Confirmation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Confirmation& from) {
    Confirmation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Confirmation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.Confirmation";
  }
  protected:
  explicit Confirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kReceivedAtFieldNumber = 2,
  };
  // bytes message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // uint64 received_at = 2;
  void clear_received_at();
  uint64_t received_at() const;
  void set_received_at(uint64_t value);
  private:
  uint64_t _internal_received_at() const;
  void _internal_set_received_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.Confirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    uint64_t received_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationIdFieldNumber = 2,
    kContentFieldNumber = 4,
    kSentAtFieldNumber = 3,
    kGroupFieldNumber = 1,
  };
  // bytes conversation_id = 2;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conversation_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // string content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 sent_at = 3;
  void clear_sent_at();
  uint64_t sent_at() const;
  void set_sent_at(uint64_t value);
  private:
  uint64_t _internal_sent_at() const;
  void _internal_set_sent_at(uint64_t value);
  public:

  // bool group = 1;
  void clear_group();
  bool group() const;
  void set_group(bool value);
  private:
  bool _internal_group() const;
  void _internal_set_group(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t sent_at_;
    bool group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class FileMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.FileMessage) */ {
 public:
  inline FileMessage() : FileMessage(nullptr) {}
  ~FileMessage() override;
  explicit PROTOBUF_CONSTEXPR FileMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileMessage(const FileMessage& from);
  FileMessage(FileMessage&& from) noexcept
    : FileMessage() {
    *this = ::std::move(from);
  }

  inline FileMessage& operator=(const FileMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMessage& operator=(FileMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMessage* internal_default_instance() {
    return reinterpret_cast<const FileMessage*>(
               &_FileMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FileMessage& a, FileMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileMessage& from) {
    FileMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.FileMessage";
  }
  protected:
  explicit FileMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.FileMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class GroupChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.GroupChatMessage) */ {
 public:
  inline GroupChatMessage() : GroupChatMessage(nullptr) {}
  ~GroupChatMessage() override;
  explicit PROTOBUF_CONSTEXPR GroupChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChatMessage(const GroupChatMessage& from);
  GroupChatMessage(GroupChatMessage&& from) noexcept
    : GroupChatMessage() {
    *this = ::std::move(from);
  }

  inline GroupChatMessage& operator=(const GroupChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChatMessage& operator=(GroupChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChatMessage* internal_default_instance() {
    return reinterpret_cast<const GroupChatMessage*>(
               &_GroupChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupChatMessage& a, GroupChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupChatMessage& from) {
    GroupChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.GroupChatMessage";
  }
  protected:
  explicit GroupChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.GroupChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// -------------------------------------------------------------------

class RtcMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.messaging.RtcMessage) */ {
 public:
  inline RtcMessage() : RtcMessage(nullptr) {}
  ~RtcMessage() override;
  explicit PROTOBUF_CONSTEXPR RtcMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcMessage(const RtcMessage& from);
  RtcMessage(RtcMessage&& from) noexcept
    : RtcMessage() {
    *this = ::std::move(from);
  }

  inline RtcMessage& operator=(const RtcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcMessage& operator=(RtcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcMessage* internal_default_instance() {
    return reinterpret_cast<const RtcMessage*>(
               &_RtcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RtcMessage& a, RtcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtcMessage& from) {
    RtcMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.messaging.RtcMessage";
  }
  protected:
  explicit RtcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.messaging.RtcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fmessaging_2fmessaging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Container

// bytes signature = 1;
inline void Container::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Container::signature() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Container.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Container::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Container.signature)
}
inline std::string* Container::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Container.signature)
  return _s;
}
inline const std::string& Container::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Container::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Container::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Container::release_signature() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Container.signature)
  return _impl_.signature_.Release();
}
inline void Container::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Container.signature)
}

// .qaul.net.messaging.Envelope envelope = 2;
inline bool Container::_internal_has_envelope() const {
  return this != internal_default_instance() && _impl_.envelope_ != nullptr;
}
inline bool Container::has_envelope() const {
  return _internal_has_envelope();
}
inline void Container::clear_envelope() {
  if (GetArenaForAllocation() == nullptr && _impl_.envelope_ != nullptr) {
    delete _impl_.envelope_;
  }
  _impl_.envelope_ = nullptr;
}
inline const ::qaul::net::messaging::Envelope& Container::_internal_envelope() const {
  const ::qaul::net::messaging::Envelope* p = _impl_.envelope_;
  return p != nullptr ? *p : reinterpret_cast<const ::qaul::net::messaging::Envelope&>(
      ::qaul::net::messaging::_Envelope_default_instance_);
}
inline const ::qaul::net::messaging::Envelope& Container::envelope() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Container.envelope)
  return _internal_envelope();
}
inline void Container::unsafe_arena_set_allocated_envelope(
    ::qaul::net::messaging::Envelope* envelope) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.envelope_);
  }
  _impl_.envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Container.envelope)
}
inline ::qaul::net::messaging::Envelope* Container::release_envelope() {
  
  ::qaul::net::messaging::Envelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::qaul::net::messaging::Envelope* Container::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Container.envelope)
  
  ::qaul::net::messaging::Envelope* temp = _impl_.envelope_;
  _impl_.envelope_ = nullptr;
  return temp;
}
inline ::qaul::net::messaging::Envelope* Container::_internal_mutable_envelope() {
  
  if (_impl_.envelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::qaul::net::messaging::Envelope>(GetArenaForAllocation());
    _impl_.envelope_ = p;
  }
  return _impl_.envelope_;
}
inline ::qaul::net::messaging::Envelope* Container::mutable_envelope() {
  ::qaul::net::messaging::Envelope* _msg = _internal_mutable_envelope();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Container.envelope)
  return _msg;
}
inline void Container::set_allocated_envelope(::qaul::net::messaging::Envelope* envelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.envelope_;
  }
  if (envelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(envelope);
    if (message_arena != submessage_arena) {
      envelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Container.envelope)
}

// -------------------------------------------------------------------

// Envelope

// bytes sender_id = 1;
inline void Envelope::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& Envelope::sender_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Envelope.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Envelope.sender_id)
}
inline std::string* Envelope::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Envelope.sender_id)
  return _s;
}
inline const std::string& Envelope::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void Envelope::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Envelope::release_sender_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Envelope.sender_id)
  return _impl_.sender_id_.Release();
}
inline void Envelope::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Envelope.sender_id)
}

// bytes receiver_id = 2;
inline void Envelope::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& Envelope::receiver_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Envelope.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Envelope.receiver_id)
}
inline std::string* Envelope::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Envelope.receiver_id)
  return _s;
}
inline const std::string& Envelope::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void Envelope::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Envelope::release_receiver_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Envelope.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void Envelope::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Envelope.receiver_id)
}

// repeated .qaul.net.messaging.Data data = 3;
inline int Envelope::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Envelope::data_size() const {
  return _internal_data_size();
}
inline void Envelope::clear_data() {
  _impl_.data_.Clear();
}
inline ::qaul::net::messaging::Data* Envelope::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Envelope.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >*
Envelope::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:qaul.net.messaging.Envelope.data)
  return &_impl_.data_;
}
inline const ::qaul::net::messaging::Data& Envelope::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::qaul::net::messaging::Data& Envelope::data(int index) const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Envelope.data)
  return _internal_data(index);
}
inline ::qaul::net::messaging::Data* Envelope::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::qaul::net::messaging::Data* Envelope::add_data() {
  ::qaul::net::messaging::Data* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:qaul.net.messaging.Envelope.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::messaging::Data >&
Envelope::data() const {
  // @@protoc_insertion_point(field_list:qaul.net.messaging.Envelope.data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// Data

// uint64 nonce = 1;
inline void Data::clear_nonce() {
  _impl_.nonce_ = uint64_t{0u};
}
inline uint64_t Data::_internal_nonce() const {
  return _impl_.nonce_;
}
inline uint64_t Data::nonce() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Data.nonce)
  return _internal_nonce();
}
inline void Data::_internal_set_nonce(uint64_t value) {
  
  _impl_.nonce_ = value;
}
inline void Data::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Data.nonce)
}

// bytes data = 2;
inline void Data::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Data::data() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Data.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Data::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Data.data)
}
inline std::string* Data::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Data.data)
  return _s;
}
inline const std::string& Data::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Data::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Data::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Data::release_data() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Data.data)
  return _impl_.data_.Release();
}
inline void Data::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Data.data)
}

// -------------------------------------------------------------------

// Messaging

// .qaul.net.messaging.Confirmation confirmation_message = 1;
inline bool Messaging::_internal_has_confirmation_message() const {
  return message_case() == kConfirmationMessage;
}
inline bool Messaging::has_confirmation_message() const {
  return _internal_has_confirmation_message();
}
inline void Messaging::set_has_confirmation_message() {
  _impl_._oneof_case_[0] = kConfirmationMessage;
}
inline void Messaging::clear_confirmation_message() {
  if (_internal_has_confirmation_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.confirmation_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::Confirmation* Messaging::release_confirmation_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.confirmation_message)
  if (_internal_has_confirmation_message()) {
    clear_has_message();
    ::qaul::net::messaging::Confirmation* temp = _impl_.message_.confirmation_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.confirmation_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::Confirmation& Messaging::_internal_confirmation_message() const {
  return _internal_has_confirmation_message()
      ? *_impl_.message_.confirmation_message_
      : reinterpret_cast< ::qaul::net::messaging::Confirmation&>(::qaul::net::messaging::_Confirmation_default_instance_);
}
inline const ::qaul::net::messaging::Confirmation& Messaging::confirmation_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.confirmation_message)
  return _internal_confirmation_message();
}
inline ::qaul::net::messaging::Confirmation* Messaging::unsafe_arena_release_confirmation_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.confirmation_message)
  if (_internal_has_confirmation_message()) {
    clear_has_message();
    ::qaul::net::messaging::Confirmation* temp = _impl_.message_.confirmation_message_;
    _impl_.message_.confirmation_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_confirmation_message(::qaul::net::messaging::Confirmation* confirmation_message) {
  clear_message();
  if (confirmation_message) {
    set_has_confirmation_message();
    _impl_.message_.confirmation_message_ = confirmation_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.confirmation_message)
}
inline ::qaul::net::messaging::Confirmation* Messaging::_internal_mutable_confirmation_message() {
  if (!_internal_has_confirmation_message()) {
    clear_message();
    set_has_confirmation_message();
    _impl_.message_.confirmation_message_ = CreateMaybeMessage< ::qaul::net::messaging::Confirmation >(GetArenaForAllocation());
  }
  return _impl_.message_.confirmation_message_;
}
inline ::qaul::net::messaging::Confirmation* Messaging::mutable_confirmation_message() {
  ::qaul::net::messaging::Confirmation* _msg = _internal_mutable_confirmation_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.confirmation_message)
  return _msg;
}

// .qaul.net.messaging.CryptoService crypto_service = 2;
inline bool Messaging::_internal_has_crypto_service() const {
  return message_case() == kCryptoService;
}
inline bool Messaging::has_crypto_service() const {
  return _internal_has_crypto_service();
}
inline void Messaging::set_has_crypto_service() {
  _impl_._oneof_case_[0] = kCryptoService;
}
inline void Messaging::clear_crypto_service() {
  if (_internal_has_crypto_service()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.crypto_service_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::CryptoService* Messaging::release_crypto_service() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.crypto_service)
  if (_internal_has_crypto_service()) {
    clear_has_message();
    ::qaul::net::messaging::CryptoService* temp = _impl_.message_.crypto_service_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.crypto_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::CryptoService& Messaging::_internal_crypto_service() const {
  return _internal_has_crypto_service()
      ? *_impl_.message_.crypto_service_
      : reinterpret_cast< ::qaul::net::messaging::CryptoService&>(::qaul::net::messaging::_CryptoService_default_instance_);
}
inline const ::qaul::net::messaging::CryptoService& Messaging::crypto_service() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.crypto_service)
  return _internal_crypto_service();
}
inline ::qaul::net::messaging::CryptoService* Messaging::unsafe_arena_release_crypto_service() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.crypto_service)
  if (_internal_has_crypto_service()) {
    clear_has_message();
    ::qaul::net::messaging::CryptoService* temp = _impl_.message_.crypto_service_;
    _impl_.message_.crypto_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_crypto_service(::qaul::net::messaging::CryptoService* crypto_service) {
  clear_message();
  if (crypto_service) {
    set_has_crypto_service();
    _impl_.message_.crypto_service_ = crypto_service;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.crypto_service)
}
inline ::qaul::net::messaging::CryptoService* Messaging::_internal_mutable_crypto_service() {
  if (!_internal_has_crypto_service()) {
    clear_message();
    set_has_crypto_service();
    _impl_.message_.crypto_service_ = CreateMaybeMessage< ::qaul::net::messaging::CryptoService >(GetArenaForAllocation());
  }
  return _impl_.message_.crypto_service_;
}
inline ::qaul::net::messaging::CryptoService* Messaging::mutable_crypto_service() {
  ::qaul::net::messaging::CryptoService* _msg = _internal_mutable_crypto_service();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.crypto_service)
  return _msg;
}

// .qaul.net.messaging.ChatMessage chat_message = 3;
inline bool Messaging::_internal_has_chat_message() const {
  return message_case() == kChatMessage;
}
inline bool Messaging::has_chat_message() const {
  return _internal_has_chat_message();
}
inline void Messaging::set_has_chat_message() {
  _impl_._oneof_case_[0] = kChatMessage;
}
inline void Messaging::clear_chat_message() {
  if (_internal_has_chat_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.chat_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::ChatMessage* Messaging::release_chat_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.chat_message)
  if (_internal_has_chat_message()) {
    clear_has_message();
    ::qaul::net::messaging::ChatMessage* temp = _impl_.message_.chat_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::ChatMessage& Messaging::_internal_chat_message() const {
  return _internal_has_chat_message()
      ? *_impl_.message_.chat_message_
      : reinterpret_cast< ::qaul::net::messaging::ChatMessage&>(::qaul::net::messaging::_ChatMessage_default_instance_);
}
inline const ::qaul::net::messaging::ChatMessage& Messaging::chat_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.chat_message)
  return _internal_chat_message();
}
inline ::qaul::net::messaging::ChatMessage* Messaging::unsafe_arena_release_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.chat_message)
  if (_internal_has_chat_message()) {
    clear_has_message();
    ::qaul::net::messaging::ChatMessage* temp = _impl_.message_.chat_message_;
    _impl_.message_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_chat_message(::qaul::net::messaging::ChatMessage* chat_message) {
  clear_message();
  if (chat_message) {
    set_has_chat_message();
    _impl_.message_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.chat_message)
}
inline ::qaul::net::messaging::ChatMessage* Messaging::_internal_mutable_chat_message() {
  if (!_internal_has_chat_message()) {
    clear_message();
    set_has_chat_message();
    _impl_.message_.chat_message_ = CreateMaybeMessage< ::qaul::net::messaging::ChatMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.chat_message_;
}
inline ::qaul::net::messaging::ChatMessage* Messaging::mutable_chat_message() {
  ::qaul::net::messaging::ChatMessage* _msg = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.chat_message)
  return _msg;
}

// .qaul.net.messaging.FileMessage file_message = 4;
inline bool Messaging::_internal_has_file_message() const {
  return message_case() == kFileMessage;
}
inline bool Messaging::has_file_message() const {
  return _internal_has_file_message();
}
inline void Messaging::set_has_file_message() {
  _impl_._oneof_case_[0] = kFileMessage;
}
inline void Messaging::clear_file_message() {
  if (_internal_has_file_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.file_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::FileMessage* Messaging::release_file_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.file_message)
  if (_internal_has_file_message()) {
    clear_has_message();
    ::qaul::net::messaging::FileMessage* temp = _impl_.message_.file_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.file_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::FileMessage& Messaging::_internal_file_message() const {
  return _internal_has_file_message()
      ? *_impl_.message_.file_message_
      : reinterpret_cast< ::qaul::net::messaging::FileMessage&>(::qaul::net::messaging::_FileMessage_default_instance_);
}
inline const ::qaul::net::messaging::FileMessage& Messaging::file_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.file_message)
  return _internal_file_message();
}
inline ::qaul::net::messaging::FileMessage* Messaging::unsafe_arena_release_file_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.file_message)
  if (_internal_has_file_message()) {
    clear_has_message();
    ::qaul::net::messaging::FileMessage* temp = _impl_.message_.file_message_;
    _impl_.message_.file_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_file_message(::qaul::net::messaging::FileMessage* file_message) {
  clear_message();
  if (file_message) {
    set_has_file_message();
    _impl_.message_.file_message_ = file_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.file_message)
}
inline ::qaul::net::messaging::FileMessage* Messaging::_internal_mutable_file_message() {
  if (!_internal_has_file_message()) {
    clear_message();
    set_has_file_message();
    _impl_.message_.file_message_ = CreateMaybeMessage< ::qaul::net::messaging::FileMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.file_message_;
}
inline ::qaul::net::messaging::FileMessage* Messaging::mutable_file_message() {
  ::qaul::net::messaging::FileMessage* _msg = _internal_mutable_file_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.file_message)
  return _msg;
}

// .qaul.net.messaging.GroupChatMessage group_chat_message = 5;
inline bool Messaging::_internal_has_group_chat_message() const {
  return message_case() == kGroupChatMessage;
}
inline bool Messaging::has_group_chat_message() const {
  return _internal_has_group_chat_message();
}
inline void Messaging::set_has_group_chat_message() {
  _impl_._oneof_case_[0] = kGroupChatMessage;
}
inline void Messaging::clear_group_chat_message() {
  if (_internal_has_group_chat_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_chat_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::GroupChatMessage* Messaging::release_group_chat_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.group_chat_message)
  if (_internal_has_group_chat_message()) {
    clear_has_message();
    ::qaul::net::messaging::GroupChatMessage* temp = _impl_.message_.group_chat_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::GroupChatMessage& Messaging::_internal_group_chat_message() const {
  return _internal_has_group_chat_message()
      ? *_impl_.message_.group_chat_message_
      : reinterpret_cast< ::qaul::net::messaging::GroupChatMessage&>(::qaul::net::messaging::_GroupChatMessage_default_instance_);
}
inline const ::qaul::net::messaging::GroupChatMessage& Messaging::group_chat_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.group_chat_message)
  return _internal_group_chat_message();
}
inline ::qaul::net::messaging::GroupChatMessage* Messaging::unsafe_arena_release_group_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.group_chat_message)
  if (_internal_has_group_chat_message()) {
    clear_has_message();
    ::qaul::net::messaging::GroupChatMessage* temp = _impl_.message_.group_chat_message_;
    _impl_.message_.group_chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_group_chat_message(::qaul::net::messaging::GroupChatMessage* group_chat_message) {
  clear_message();
  if (group_chat_message) {
    set_has_group_chat_message();
    _impl_.message_.group_chat_message_ = group_chat_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.group_chat_message)
}
inline ::qaul::net::messaging::GroupChatMessage* Messaging::_internal_mutable_group_chat_message() {
  if (!_internal_has_group_chat_message()) {
    clear_message();
    set_has_group_chat_message();
    _impl_.message_.group_chat_message_ = CreateMaybeMessage< ::qaul::net::messaging::GroupChatMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.group_chat_message_;
}
inline ::qaul::net::messaging::GroupChatMessage* Messaging::mutable_group_chat_message() {
  ::qaul::net::messaging::GroupChatMessage* _msg = _internal_mutable_group_chat_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.group_chat_message)
  return _msg;
}

// .qaul.net.messaging.RtcMessage rtc_message = 6;
inline bool Messaging::_internal_has_rtc_message() const {
  return message_case() == kRtcMessage;
}
inline bool Messaging::has_rtc_message() const {
  return _internal_has_rtc_message();
}
inline void Messaging::set_has_rtc_message() {
  _impl_._oneof_case_[0] = kRtcMessage;
}
inline void Messaging::clear_rtc_message() {
  if (_internal_has_rtc_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.rtc_message_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::messaging::RtcMessage* Messaging::release_rtc_message() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Messaging.rtc_message)
  if (_internal_has_rtc_message()) {
    clear_has_message();
    ::qaul::net::messaging::RtcMessage* temp = _impl_.message_.rtc_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.rtc_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::messaging::RtcMessage& Messaging::_internal_rtc_message() const {
  return _internal_has_rtc_message()
      ? *_impl_.message_.rtc_message_
      : reinterpret_cast< ::qaul::net::messaging::RtcMessage&>(::qaul::net::messaging::_RtcMessage_default_instance_);
}
inline const ::qaul::net::messaging::RtcMessage& Messaging::rtc_message() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Messaging.rtc_message)
  return _internal_rtc_message();
}
inline ::qaul::net::messaging::RtcMessage* Messaging::unsafe_arena_release_rtc_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.messaging.Messaging.rtc_message)
  if (_internal_has_rtc_message()) {
    clear_has_message();
    ::qaul::net::messaging::RtcMessage* temp = _impl_.message_.rtc_message_;
    _impl_.message_.rtc_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Messaging::unsafe_arena_set_allocated_rtc_message(::qaul::net::messaging::RtcMessage* rtc_message) {
  clear_message();
  if (rtc_message) {
    set_has_rtc_message();
    _impl_.message_.rtc_message_ = rtc_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.messaging.Messaging.rtc_message)
}
inline ::qaul::net::messaging::RtcMessage* Messaging::_internal_mutable_rtc_message() {
  if (!_internal_has_rtc_message()) {
    clear_message();
    set_has_rtc_message();
    _impl_.message_.rtc_message_ = CreateMaybeMessage< ::qaul::net::messaging::RtcMessage >(GetArenaForAllocation());
  }
  return _impl_.message_.rtc_message_;
}
inline ::qaul::net::messaging::RtcMessage* Messaging::mutable_rtc_message() {
  ::qaul::net::messaging::RtcMessage* _msg = _internal_mutable_rtc_message();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Messaging.rtc_message)
  return _msg;
}

inline bool Messaging::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Messaging::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Messaging::MessageCase Messaging::message_case() const {
  return Messaging::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CryptoService

// -------------------------------------------------------------------

// Confirmation

// bytes message_id = 1;
inline void Confirmation::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& Confirmation::message_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Confirmation.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Confirmation::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Confirmation.message_id)
}
inline std::string* Confirmation::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.Confirmation.message_id)
  return _s;
}
inline const std::string& Confirmation::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void Confirmation::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Confirmation::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Confirmation::release_message_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.Confirmation.message_id)
  return _impl_.message_id_.Release();
}
inline void Confirmation::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Confirmation.message_id)
}

// uint64 received_at = 2;
inline void Confirmation::clear_received_at() {
  _impl_.received_at_ = uint64_t{0u};
}
inline uint64_t Confirmation::_internal_received_at() const {
  return _impl_.received_at_;
}
inline uint64_t Confirmation::received_at() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.Confirmation.received_at)
  return _internal_received_at();
}
inline void Confirmation::_internal_set_received_at(uint64_t value) {
  
  _impl_.received_at_ = value;
}
inline void Confirmation::set_received_at(uint64_t value) {
  _internal_set_received_at(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.Confirmation.received_at)
}

// -------------------------------------------------------------------

// ChatMessage

// bool group = 1;
inline void ChatMessage::clear_group() {
  _impl_.group_ = false;
}
inline bool ChatMessage::_internal_group() const {
  return _impl_.group_;
}
inline bool ChatMessage::group() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.ChatMessage.group)
  return _internal_group();
}
inline void ChatMessage::_internal_set_group(bool value) {
  
  _impl_.group_ = value;
}
inline void ChatMessage::set_group(bool value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.ChatMessage.group)
}

// bytes conversation_id = 2;
inline void ChatMessage::clear_conversation_id() {
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::conversation_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.ChatMessage.conversation_id)
  return _internal_conversation_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_conversation_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.conversation_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.ChatMessage.conversation_id)
}
inline std::string* ChatMessage::mutable_conversation_id() {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.ChatMessage.conversation_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_conversation_id() const {
  return _impl_.conversation_id_.Get();
}
inline void ChatMessage::_internal_set_conversation_id(const std::string& value) {
  
  _impl_.conversation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_conversation_id() {
  
  return _impl_.conversation_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_conversation_id() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.ChatMessage.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ChatMessage::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  _impl_.conversation_id_.SetAllocated(conversation_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.ChatMessage.conversation_id)
}

// uint64 sent_at = 3;
inline void ChatMessage::clear_sent_at() {
  _impl_.sent_at_ = uint64_t{0u};
}
inline uint64_t ChatMessage::_internal_sent_at() const {
  return _impl_.sent_at_;
}
inline uint64_t ChatMessage::sent_at() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.ChatMessage.sent_at)
  return _internal_sent_at();
}
inline void ChatMessage::_internal_set_sent_at(uint64_t value) {
  
  _impl_.sent_at_ = value;
}
inline void ChatMessage::set_sent_at(uint64_t value) {
  _internal_set_sent_at(value);
  // @@protoc_insertion_point(field_set:qaul.net.messaging.ChatMessage.sent_at)
}

// string content = 4;
inline void ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.ChatMessage.content)
}

// -------------------------------------------------------------------

// FileMessage

// bytes content = 1;
inline void FileMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FileMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.FileMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.FileMessage.content)
}
inline std::string* FileMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.FileMessage.content)
  return _s;
}
inline const std::string& FileMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void FileMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* FileMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* FileMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.FileMessage.content)
  return _impl_.content_.Release();
}
inline void FileMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.FileMessage.content)
}

// -------------------------------------------------------------------

// GroupChatMessage

// bytes content = 1;
inline void GroupChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GroupChatMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.GroupChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.GroupChatMessage.content)
}
inline std::string* GroupChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.GroupChatMessage.content)
  return _s;
}
inline const std::string& GroupChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GroupChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.GroupChatMessage.content)
  return _impl_.content_.Release();
}
inline void GroupChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.GroupChatMessage.content)
}

// -------------------------------------------------------------------

// RtcMessage

// bytes content = 1;
inline void RtcMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& RtcMessage::content() const {
  // @@protoc_insertion_point(field_get:qaul.net.messaging.RtcMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.messaging.RtcMessage.content)
}
inline std::string* RtcMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:qaul.net.messaging.RtcMessage.content)
  return _s;
}
inline const std::string& RtcMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void RtcMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcMessage::release_content() {
  // @@protoc_insertion_point(field_release:qaul.net.messaging.RtcMessage.content)
  return _impl_.content_.Release();
}
inline void RtcMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.RtcMessage.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messaging
}  // namespace net
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fmessaging_2fmessaging_2eproto
