// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/messaging/messaging.proto

#include "services/messaging/messaging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace net {
namespace messaging {
PROTOBUF_CONSTEXPR Container::Container(
    ::_pbi::ConstantInitialized)
  : signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , envelope_(nullptr){}
struct ContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerDefaultTypeInternal() {}
  union {
    Container _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerDefaultTypeInternal _Container_default_instance_;
PROTOBUF_CONSTEXPR Envelope::Envelope(
    ::_pbi::ConstantInitialized)
  : sender_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , receiver_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct EnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvelopeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvelopeDefaultTypeInternal() {}
  union {
    Envelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvelopeDefaultTypeInternal _Envelope_default_instance_;
PROTOBUF_CONSTEXPR Messaging::Messaging(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct MessagingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagingDefaultTypeInternal() {}
  union {
    Messaging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagingDefaultTypeInternal _Messaging_default_instance_;
PROTOBUF_CONSTEXPR Confirmation::Confirmation(
    ::_pbi::ConstantInitialized)
  : message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , received_at_(uint64_t{0u}){}
struct ConfirmationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmationDefaultTypeInternal() {}
  union {
    Confirmation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmationDefaultTypeInternal _Confirmation_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized)
  : conversation_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sent_at_(uint64_t{0u})
  , group_(false){}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
}  // namespace messaging
}  // namespace net
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_services_2fmessaging_2fmessaging_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2fmessaging_2fmessaging_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fmessaging_2fmessaging_2eproto = nullptr;

const uint32_t TableStruct_services_2fmessaging_2fmessaging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Container, signature_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Container, envelope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, sender_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Messaging, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Messaging, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Messaging, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Confirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Confirmation, message_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Confirmation, received_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, group_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, sent_at_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, content_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::net::messaging::Container)},
  { 8, -1, -1, sizeof(::qaul::net::messaging::Envelope)},
  { 17, -1, -1, sizeof(::qaul::net::messaging::Messaging)},
  { 26, -1, -1, sizeof(::qaul::net::messaging::Confirmation)},
  { 34, -1, -1, sizeof(::qaul::net::messaging::ChatMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::net::messaging::_Container_default_instance_._instance,
  &::qaul::net::messaging::_Envelope_default_instance_._instance,
  &::qaul::net::messaging::_Messaging_default_instance_._instance,
  &::qaul::net::messaging::_Confirmation_default_instance_._instance,
  &::qaul::net::messaging::_ChatMessage_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fmessaging_2fmessaging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"services/messaging/messaging.proto\022\022qa"
  "ul.net.messaging\"N\n\tContainer\022\021\n\tsignatu"
  "re\030\001 \001(\014\022.\n\010envelope\030\002 \001(\0132\034.qaul.net.me"
  "ssaging.Envelope\"@\n\010Envelope\022\021\n\tsender_i"
  "d\030\001 \001(\014\022\023\n\013receiver_id\030\002 \001(\014\022\014\n\004data\030\003 \001"
  "(\014\"\221\001\n\tMessaging\022@\n\024confirmation_message"
  "\030\001 \001(\0132 .qaul.net.messaging.Confirmation"
  "H\000\0227\n\014chat_message\030\002 \001(\0132\037.qaul.net.mess"
  "aging.ChatMessageH\000B\t\n\007message\"7\n\014Confir"
  "mation\022\022\n\nmessage_id\030\001 \001(\014\022\023\n\013received_a"
  "t\030\002 \001(\004\"W\n\013ChatMessage\022\r\n\005group\030\001 \001(\010\022\027\n"
  "\017conversation_id\030\002 \001(\014\022\017\n\007sent_at\030\003 \001(\004\022"
  "\017\n\007content\030\004 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_services_2fmessaging_2fmessaging_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fmessaging_2fmessaging_2eproto = {
    false, false, 504, descriptor_table_protodef_services_2fmessaging_2fmessaging_2eproto,
    "services/messaging/messaging.proto",
    &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_services_2fmessaging_2fmessaging_2eproto::offsets,
    file_level_metadata_services_2fmessaging_2fmessaging_2eproto, file_level_enum_descriptors_services_2fmessaging_2fmessaging_2eproto,
    file_level_service_descriptors_services_2fmessaging_2fmessaging_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter() {
  return &descriptor_table_services_2fmessaging_2fmessaging_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fmessaging_2fmessaging_2eproto(&descriptor_table_services_2fmessaging_2fmessaging_2eproto);
namespace qaul {
namespace net {
namespace messaging {

// ===================================================================

class Container::_Internal {
 public:
  static const ::qaul::net::messaging::Envelope& envelope(const Container* msg);
};

const ::qaul::net::messaging::Envelope&
Container::_Internal::envelope(const Container* msg) {
  return *msg->envelope_;
}
Container::Container(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Container)
}
Container::Container(const Container& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_envelope()) {
    envelope_ = new ::qaul::net::messaging::Envelope(*from.envelope_);
  } else {
    envelope_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Container)
}

inline void Container::SharedCtor() {
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
envelope_ = nullptr;
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Container)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Container::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.Destroy();
  if (this != internal_default_instance()) delete envelope_;
}

void Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Container)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && envelope_ != nullptr) {
    delete envelope_;
  }
  envelope_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Container::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.Envelope envelope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_envelope(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Container::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Container)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // .qaul.net.messaging.Envelope envelope = 2;
  if (this->_internal_has_envelope()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Container)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .qaul.net.messaging.Envelope envelope = 2;
  if (this->_internal_has_envelope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Container::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Container::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Container::GetClassData() const { return &_class_data_; }

void Container::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Container *>(to)->MergeFrom(
      static_cast<const Container &>(from));
}


void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Container)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_envelope()) {
    _internal_mutable_envelope()->::qaul::net::messaging::Envelope::MergeFrom(from._internal_envelope());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::InternalSwap(Container* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  swap(envelope_, other->envelope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Container::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[0]);
}

// ===================================================================

class Envelope::_Internal {
 public:
};

Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    sender_id_.Set(from._internal_sender_id(), 
      GetArenaForAllocation());
  }
  receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    receiver_id_.Set(from._internal_receiver_id(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Envelope)
}

inline void Envelope::SharedCtor() {
sender_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Envelope)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Envelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_id_.Destroy();
  receiver_id_.Destroy();
  data_.Destroy();
}

void Envelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Envelope)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_id_.ClearToEmpty();
  receiver_id_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Envelope::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Envelope::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Envelope)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender_id = 1;
  if (!this->_internal_sender_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender_id(), target);
  }

  // bytes receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Envelope)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender_id = 1;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_id());
  }

  // bytes receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_id());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Envelope::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Envelope::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Envelope::GetClassData() const { return &_class_data_; }

void Envelope::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Envelope *>(to)->MergeFrom(
      static_cast<const Envelope &>(from));
}


void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender_id().empty()) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_receiver_id().empty()) {
    _internal_set_receiver_id(from._internal_receiver_id());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_id_, lhs_arena,
      &other->sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receiver_id_, lhs_arena,
      &other->receiver_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[1]);
}

// ===================================================================

class Messaging::_Internal {
 public:
  static const ::qaul::net::messaging::Confirmation& confirmation_message(const Messaging* msg);
  static const ::qaul::net::messaging::ChatMessage& chat_message(const Messaging* msg);
};

const ::qaul::net::messaging::Confirmation&
Messaging::_Internal::confirmation_message(const Messaging* msg) {
  return *msg->message_.confirmation_message_;
}
const ::qaul::net::messaging::ChatMessage&
Messaging::_Internal::chat_message(const Messaging* msg) {
  return *msg->message_.chat_message_;
}
void Messaging::set_allocated_confirmation_message(::qaul::net::messaging::Confirmation* confirmation_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (confirmation_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(confirmation_message);
    if (message_arena != submessage_arena) {
      confirmation_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmation_message, submessage_arena);
    }
    set_has_confirmation_message();
    message_.confirmation_message_ = confirmation_message;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.confirmation_message)
}
void Messaging::set_allocated_chat_message(::qaul::net::messaging::ChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    message_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.chat_message)
}
Messaging::Messaging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Messaging)
}
Messaging::Messaging(const Messaging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kConfirmationMessage: {
      _internal_mutable_confirmation_message()->::qaul::net::messaging::Confirmation::MergeFrom(from._internal_confirmation_message());
      break;
    }
    case kChatMessage: {
      _internal_mutable_chat_message()->::qaul::net::messaging::ChatMessage::MergeFrom(from._internal_chat_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Messaging)
}

inline void Messaging::SharedCtor() {
clear_has_message();
}

Messaging::~Messaging() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Messaging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Messaging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Messaging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Messaging::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.net.messaging.Messaging)
  switch (message_case()) {
    case kConfirmationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.confirmation_message_;
      }
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.chat_message_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Messaging::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Messaging)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Messaging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.net.messaging.Confirmation confirmation_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmation_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.ChatMessage chat_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Messaging::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Messaging)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.net.messaging.Confirmation confirmation_message = 1;
  if (_internal_has_confirmation_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::confirmation_message(this),
        _Internal::confirmation_message(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.messaging.ChatMessage chat_message = 2;
  if (_internal_has_chat_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chat_message(this),
        _Internal::chat_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Messaging)
  return target;
}

size_t Messaging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Messaging)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.net.messaging.Confirmation confirmation_message = 1;
    case kConfirmationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.confirmation_message_);
      break;
    }
    // .qaul.net.messaging.ChatMessage chat_message = 2;
    case kChatMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.chat_message_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Messaging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Messaging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Messaging::GetClassData() const { return &_class_data_; }

void Messaging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Messaging *>(to)->MergeFrom(
      static_cast<const Messaging &>(from));
}


void Messaging::MergeFrom(const Messaging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Messaging)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kConfirmationMessage: {
      _internal_mutable_confirmation_message()->::qaul::net::messaging::Confirmation::MergeFrom(from._internal_confirmation_message());
      break;
    }
    case kChatMessage: {
      _internal_mutable_chat_message()->::qaul::net::messaging::ChatMessage::MergeFrom(from._internal_chat_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Messaging::CopyFrom(const Messaging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Messaging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messaging::IsInitialized() const {
  return true;
}

void Messaging::InternalSwap(Messaging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Messaging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[2]);
}

// ===================================================================

class Confirmation::_Internal {
 public:
};

Confirmation::Confirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Confirmation)
}
Confirmation::Confirmation(const Confirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  received_at_ = from.received_at_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Confirmation)
}

inline void Confirmation::SharedCtor() {
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
received_at_ = uint64_t{0u};
}

Confirmation::~Confirmation() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Confirmation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Confirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_id_.Destroy();
}

void Confirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Confirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Confirmation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  received_at_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Confirmation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 received_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          received_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Confirmation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Confirmation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message_id = 1;
  if (!this->_internal_message_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // uint64 received_at = 2;
  if (this->_internal_received_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_received_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Confirmation)
  return target;
}

size_t Confirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Confirmation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_id());
  }

  // uint64 received_at = 2;
  if (this->_internal_received_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_received_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Confirmation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Confirmation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Confirmation::GetClassData() const { return &_class_data_; }

void Confirmation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Confirmation *>(to)->MergeFrom(
      static_cast<const Confirmation &>(from));
}


void Confirmation::MergeFrom(const Confirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Confirmation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_received_at() != 0) {
    _internal_set_received_at(from._internal_received_at());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Confirmation::CopyFrom(const Confirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Confirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confirmation::IsInitialized() const {
  return true;
}

void Confirmation::InternalSwap(Confirmation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  swap(received_at_, other->received_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Confirmation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[3]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(from._internal_conversation_id(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sent_at_, &from.sent_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&sent_at_)) + sizeof(group_));
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.ChatMessage)
}

inline void ChatMessage::SharedCtor() {
conversation_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conversation_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sent_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&sent_at_)) + sizeof(group_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  conversation_id_.Destroy();
  content_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversation_id_.ClearToEmpty();
  content_.ClearToEmpty();
  ::memset(&sent_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_) -
      reinterpret_cast<char*>(&sent_at_)) + sizeof(group_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes conversation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sent_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.net.messaging.ChatMessage.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool group = 1;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_group(), target);
  }

  // bytes conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_conversation_id(), target);
  }

  // uint64 sent_at = 3;
  if (this->_internal_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sent_at(), target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.net.messaging.ChatMessage.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_conversation_id());
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 sent_at = 3;
  if (this->_internal_sent_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sent_at());
  }

  // bool group = 1;
  if (this->_internal_group() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }

void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatMessage *>(to)->MergeFrom(
      static_cast<const ChatMessage &>(from));
}


void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_sent_at() != 0) {
    _internal_set_sent_at(from._internal_sent_at());
  }
  if (from._internal_group() != 0) {
    _internal_set_group(from._internal_group());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &conversation_id_, lhs_arena,
      &other->conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, group_)
      + sizeof(ChatMessage::group_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, sent_at_)>(
          reinterpret_cast<char*>(&sent_at_),
          reinterpret_cast<char*>(&other->sent_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messaging
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Container*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Container >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Envelope*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Envelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Envelope >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Messaging*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Messaging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Messaging >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Confirmation*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Confirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Confirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::ChatMessage*
Arena::CreateMaybeMessage< ::qaul::net::messaging::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::ChatMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
