// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/messaging/messaging.proto

#include "services/messaging/messaging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace net {
namespace messaging {
PROTOBUF_CONSTEXPR Container::Container(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.envelope_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerDefaultTypeInternal() {}
  union {
    Container _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerDefaultTypeInternal _Container_default_instance_;
PROTOBUF_CONSTEXPR Envelope::Envelope(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.sender_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvelopeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvelopeDefaultTypeInternal() {}
  union {
    Envelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvelopeDefaultTypeInternal _Envelope_default_instance_;
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
PROTOBUF_CONSTEXPR Messaging::Messaging(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessagingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagingDefaultTypeInternal() {}
  union {
    Messaging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagingDefaultTypeInternal _Messaging_default_instance_;
PROTOBUF_CONSTEXPR CryptoService::CryptoService(
    ::_pbi::ConstantInitialized) {}
struct CryptoServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CryptoServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CryptoServiceDefaultTypeInternal() {}
  union {
    CryptoService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CryptoServiceDefaultTypeInternal _CryptoService_default_instance_;
PROTOBUF_CONSTEXPR Confirmation::Confirmation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.received_at_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmationDefaultTypeInternal() {}
  union {
    Confirmation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmationDefaultTypeInternal _Confirmation_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sent_at_)*/uint64_t{0u}
  , /*decltype(_impl_.group_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
PROTOBUF_CONSTEXPR FileMessage::FileMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileMessageDefaultTypeInternal() {}
  union {
    FileMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileMessageDefaultTypeInternal _FileMessage_default_instance_;
PROTOBUF_CONSTEXPR GroupChatMessage::GroupChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupChatMessageDefaultTypeInternal() {}
  union {
    GroupChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupChatMessageDefaultTypeInternal _GroupChatMessage_default_instance_;
PROTOBUF_CONSTEXPR RtcMessage::RtcMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcMessageDefaultTypeInternal() {}
  union {
    RtcMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcMessageDefaultTypeInternal _RtcMessage_default_instance_;
}  // namespace messaging
}  // namespace net
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_services_2fmessaging_2fmessaging_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2fmessaging_2fmessaging_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fmessaging_2fmessaging_2eproto = nullptr;

const uint32_t TableStruct_services_2fmessaging_2fmessaging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Container, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Container, _impl_.envelope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Envelope, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Data, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Data, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Messaging, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Messaging, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Messaging, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::CryptoService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Confirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Confirmation, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::Confirmation, _impl_.received_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, _impl_.sent_at_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::ChatMessage, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::FileMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::FileMessage, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::GroupChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::GroupChatMessage, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::RtcMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::messaging::RtcMessage, _impl_.content_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::net::messaging::Container)},
  { 8, -1, -1, sizeof(::qaul::net::messaging::Envelope)},
  { 17, -1, -1, sizeof(::qaul::net::messaging::Data)},
  { 25, -1, -1, sizeof(::qaul::net::messaging::Messaging)},
  { 38, -1, -1, sizeof(::qaul::net::messaging::CryptoService)},
  { 44, -1, -1, sizeof(::qaul::net::messaging::Confirmation)},
  { 52, -1, -1, sizeof(::qaul::net::messaging::ChatMessage)},
  { 62, -1, -1, sizeof(::qaul::net::messaging::FileMessage)},
  { 69, -1, -1, sizeof(::qaul::net::messaging::GroupChatMessage)},
  { 76, -1, -1, sizeof(::qaul::net::messaging::RtcMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::net::messaging::_Container_default_instance_._instance,
  &::qaul::net::messaging::_Envelope_default_instance_._instance,
  &::qaul::net::messaging::_Data_default_instance_._instance,
  &::qaul::net::messaging::_Messaging_default_instance_._instance,
  &::qaul::net::messaging::_CryptoService_default_instance_._instance,
  &::qaul::net::messaging::_Confirmation_default_instance_._instance,
  &::qaul::net::messaging::_ChatMessage_default_instance_._instance,
  &::qaul::net::messaging::_FileMessage_default_instance_._instance,
  &::qaul::net::messaging::_GroupChatMessage_default_instance_._instance,
  &::qaul::net::messaging::_RtcMessage_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fmessaging_2fmessaging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"services/messaging/messaging.proto\022\022qa"
  "ul.net.messaging\"N\n\tContainer\022\021\n\tsignatu"
  "re\030\001 \001(\014\022.\n\010envelope\030\002 \001(\0132\034.qaul.net.me"
  "ssaging.Envelope\"Z\n\010Envelope\022\021\n\tsender_i"
  "d\030\001 \001(\014\022\023\n\013receiver_id\030\002 \001(\014\022&\n\004data\030\003 \003"
  "(\0132\030.qaul.net.messaging.Data\"#\n\004Data\022\r\n\005"
  "nonce\030\001 \001(\004\022\014\n\004data\030\002 \001(\014\"\202\003\n\tMessaging\022"
  "@\n\024confirmation_message\030\001 \001(\0132 .qaul.net"
  ".messaging.ConfirmationH\000\022;\n\016crypto_serv"
  "ice\030\002 \001(\0132!.qaul.net.messaging.CryptoSer"
  "viceH\000\0227\n\014chat_message\030\003 \001(\0132\037.qaul.net."
  "messaging.ChatMessageH\000\0227\n\014file_message\030"
  "\004 \001(\0132\037.qaul.net.messaging.FileMessageH\000"
  "\022B\n\022group_chat_message\030\005 \001(\0132$.qaul.net."
  "messaging.GroupChatMessageH\000\0225\n\013rtc_mess"
  "age\030\006 \001(\0132\036.qaul.net.messaging.RtcMessag"
  "eH\000B\t\n\007message\"\017\n\rCryptoService\"7\n\014Confi"
  "rmation\022\022\n\nmessage_id\030\001 \001(\014\022\023\n\013received_"
  "at\030\002 \001(\004\"W\n\013ChatMessage\022\r\n\005group\030\001 \001(\010\022\027"
  "\n\017conversation_id\030\002 \001(\014\022\017\n\007sent_at\030\003 \001(\004"
  "\022\017\n\007content\030\004 \001(\t\"\036\n\013FileMessage\022\017\n\007cont"
  "ent\030\001 \001(\014\"#\n\020GroupChatMessage\022\017\n\007content"
  "\030\001 \001(\014\"\035\n\nRtcMessage\022\017\n\007content\030\001 \001(\014b\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_services_2fmessaging_2fmessaging_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fmessaging_2fmessaging_2eproto = {
    false, false, 925, descriptor_table_protodef_services_2fmessaging_2fmessaging_2eproto,
    "services/messaging/messaging.proto",
    &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_services_2fmessaging_2fmessaging_2eproto::offsets,
    file_level_metadata_services_2fmessaging_2fmessaging_2eproto, file_level_enum_descriptors_services_2fmessaging_2fmessaging_2eproto,
    file_level_service_descriptors_services_2fmessaging_2fmessaging_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter() {
  return &descriptor_table_services_2fmessaging_2fmessaging_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fmessaging_2fmessaging_2eproto(&descriptor_table_services_2fmessaging_2fmessaging_2eproto);
namespace qaul {
namespace net {
namespace messaging {

// ===================================================================

class Container::_Internal {
 public:
  static const ::qaul::net::messaging::Envelope& envelope(const Container* msg);
};

const ::qaul::net::messaging::Envelope&
Container::_Internal::envelope(const Container* msg) {
  return *msg->_impl_.envelope_;
}
Container::Container(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Container)
}
Container::Container(const Container& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Container* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.envelope_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_envelope()) {
    _this->_impl_.envelope_ = new ::qaul::net::messaging::Envelope(*from._impl_.envelope_);
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Container)
}

inline void Container::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_){}
    , decltype(_impl_.envelope_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Container)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Container::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.envelope_;
}

void Container::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Container)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.envelope_ != nullptr) {
    delete _impl_.envelope_;
  }
  _impl_.envelope_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Container::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.Envelope envelope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_envelope(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Container::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Container)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // .qaul.net.messaging.Envelope envelope = 2;
  if (this->_internal_has_envelope()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::envelope(this),
        _Internal::envelope(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Container)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .qaul.net.messaging.Envelope envelope = 2;
  if (this->_internal_has_envelope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.envelope_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Container::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Container::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Container::GetClassData() const { return &_class_data_; }


void Container::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Container*>(&to_msg);
  auto& from = static_cast<const Container&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Container)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_envelope()) {
    _this->_internal_mutable_envelope()->::qaul::net::messaging::Envelope::MergeFrom(
        from._internal_envelope());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::InternalSwap(Container* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  swap(_impl_.envelope_, other->_impl_.envelope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Container::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[0]);
}

// ===================================================================

class Envelope::_Internal {
 public:
};

Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Envelope* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.receiver_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    _this->_impl_.sender_id_.Set(from._internal_sender_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    _this->_impl_.receiver_id_.Set(from._internal_receiver_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Envelope)
}

inline void Envelope::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.receiver_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Envelope)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Envelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.sender_id_.Destroy();
  _impl_.receiver_id_.Destroy();
}

void Envelope::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Envelope)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.sender_id_.ClearToEmpty();
  _impl_.receiver_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Envelope::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .qaul.net.messaging.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Envelope::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Envelope)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender_id = 1;
  if (!this->_internal_sender_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender_id(), target);
  }

  // bytes receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  // repeated .qaul.net.messaging.Data data = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Envelope)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.net.messaging.Data data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes sender_id = 1;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_id());
  }

  // bytes receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Envelope::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Envelope::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Envelope::GetClassData() const { return &_class_data_; }


void Envelope::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Envelope*>(&to_msg);
  auto& from = static_cast<const Envelope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Envelope)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_receiver_id().empty()) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_id_, lhs_arena,
      &other->_impl_.sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiver_id_, lhs_arena,
      &other->_impl_.receiver_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[1]);
}

// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.nonce_ = from._impl_.nonce_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Data)
}

inline void Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }


void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.nonce_, other->_impl_.nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[2]);
}

// ===================================================================

class Messaging::_Internal {
 public:
  static const ::qaul::net::messaging::Confirmation& confirmation_message(const Messaging* msg);
  static const ::qaul::net::messaging::CryptoService& crypto_service(const Messaging* msg);
  static const ::qaul::net::messaging::ChatMessage& chat_message(const Messaging* msg);
  static const ::qaul::net::messaging::FileMessage& file_message(const Messaging* msg);
  static const ::qaul::net::messaging::GroupChatMessage& group_chat_message(const Messaging* msg);
  static const ::qaul::net::messaging::RtcMessage& rtc_message(const Messaging* msg);
};

const ::qaul::net::messaging::Confirmation&
Messaging::_Internal::confirmation_message(const Messaging* msg) {
  return *msg->_impl_.message_.confirmation_message_;
}
const ::qaul::net::messaging::CryptoService&
Messaging::_Internal::crypto_service(const Messaging* msg) {
  return *msg->_impl_.message_.crypto_service_;
}
const ::qaul::net::messaging::ChatMessage&
Messaging::_Internal::chat_message(const Messaging* msg) {
  return *msg->_impl_.message_.chat_message_;
}
const ::qaul::net::messaging::FileMessage&
Messaging::_Internal::file_message(const Messaging* msg) {
  return *msg->_impl_.message_.file_message_;
}
const ::qaul::net::messaging::GroupChatMessage&
Messaging::_Internal::group_chat_message(const Messaging* msg) {
  return *msg->_impl_.message_.group_chat_message_;
}
const ::qaul::net::messaging::RtcMessage&
Messaging::_Internal::rtc_message(const Messaging* msg) {
  return *msg->_impl_.message_.rtc_message_;
}
void Messaging::set_allocated_confirmation_message(::qaul::net::messaging::Confirmation* confirmation_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (confirmation_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(confirmation_message);
    if (message_arena != submessage_arena) {
      confirmation_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmation_message, submessage_arena);
    }
    set_has_confirmation_message();
    _impl_.message_.confirmation_message_ = confirmation_message;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.confirmation_message)
}
void Messaging::set_allocated_crypto_service(::qaul::net::messaging::CryptoService* crypto_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (crypto_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(crypto_service);
    if (message_arena != submessage_arena) {
      crypto_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crypto_service, submessage_arena);
    }
    set_has_crypto_service();
    _impl_.message_.crypto_service_ = crypto_service;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.crypto_service)
}
void Messaging::set_allocated_chat_message(::qaul::net::messaging::ChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    _impl_.message_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.chat_message)
}
void Messaging::set_allocated_file_message(::qaul::net::messaging::FileMessage* file_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (file_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_message);
    if (message_arena != submessage_arena) {
      file_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_message, submessage_arena);
    }
    set_has_file_message();
    _impl_.message_.file_message_ = file_message;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.file_message)
}
void Messaging::set_allocated_group_chat_message(::qaul::net::messaging::GroupChatMessage* group_chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (group_chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group_chat_message);
    if (message_arena != submessage_arena) {
      group_chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_chat_message, submessage_arena);
    }
    set_has_group_chat_message();
    _impl_.message_.group_chat_message_ = group_chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.group_chat_message)
}
void Messaging::set_allocated_rtc_message(::qaul::net::messaging::RtcMessage* rtc_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (rtc_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtc_message);
    if (message_arena != submessage_arena) {
      rtc_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtc_message, submessage_arena);
    }
    set_has_rtc_message();
    _impl_.message_.rtc_message_ = rtc_message;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.messaging.Messaging.rtc_message)
}
Messaging::Messaging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Messaging)
}
Messaging::Messaging(const Messaging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Messaging* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kConfirmationMessage: {
      _this->_internal_mutable_confirmation_message()->::qaul::net::messaging::Confirmation::MergeFrom(
          from._internal_confirmation_message());
      break;
    }
    case kCryptoService: {
      _this->_internal_mutable_crypto_service()->::qaul::net::messaging::CryptoService::MergeFrom(
          from._internal_crypto_service());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::qaul::net::messaging::ChatMessage::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kFileMessage: {
      _this->_internal_mutable_file_message()->::qaul::net::messaging::FileMessage::MergeFrom(
          from._internal_file_message());
      break;
    }
    case kGroupChatMessage: {
      _this->_internal_mutable_group_chat_message()->::qaul::net::messaging::GroupChatMessage::MergeFrom(
          from._internal_group_chat_message());
      break;
    }
    case kRtcMessage: {
      _this->_internal_mutable_rtc_message()->::qaul::net::messaging::RtcMessage::MergeFrom(
          from._internal_rtc_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Messaging)
}

inline void Messaging::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

Messaging::~Messaging() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Messaging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Messaging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Messaging::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Messaging::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.net.messaging.Messaging)
  switch (message_case()) {
    case kConfirmationMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.confirmation_message_;
      }
      break;
    }
    case kCryptoService: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.crypto_service_;
      }
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.chat_message_;
      }
      break;
    }
    case kFileMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.file_message_;
      }
      break;
    }
    case kGroupChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.group_chat_message_;
      }
      break;
    }
    case kRtcMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.rtc_message_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void Messaging::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Messaging)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Messaging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.net.messaging.Confirmation confirmation_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmation_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.CryptoService crypto_service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_crypto_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.ChatMessage chat_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.FileMessage file_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.GroupChatMessage group_chat_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.messaging.RtcMessage rtc_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Messaging::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Messaging)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.net.messaging.Confirmation confirmation_message = 1;
  if (_internal_has_confirmation_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::confirmation_message(this),
        _Internal::confirmation_message(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.messaging.CryptoService crypto_service = 2;
  if (_internal_has_crypto_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::crypto_service(this),
        _Internal::crypto_service(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.messaging.ChatMessage chat_message = 3;
  if (_internal_has_chat_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chat_message(this),
        _Internal::chat_message(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.messaging.FileMessage file_message = 4;
  if (_internal_has_file_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file_message(this),
        _Internal::file_message(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.messaging.GroupChatMessage group_chat_message = 5;
  if (_internal_has_group_chat_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::group_chat_message(this),
        _Internal::group_chat_message(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.messaging.RtcMessage rtc_message = 6;
  if (_internal_has_rtc_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::rtc_message(this),
        _Internal::rtc_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Messaging)
  return target;
}

size_t Messaging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Messaging)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.net.messaging.Confirmation confirmation_message = 1;
    case kConfirmationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.confirmation_message_);
      break;
    }
    // .qaul.net.messaging.CryptoService crypto_service = 2;
    case kCryptoService: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.crypto_service_);
      break;
    }
    // .qaul.net.messaging.ChatMessage chat_message = 3;
    case kChatMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.chat_message_);
      break;
    }
    // .qaul.net.messaging.FileMessage file_message = 4;
    case kFileMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.file_message_);
      break;
    }
    // .qaul.net.messaging.GroupChatMessage group_chat_message = 5;
    case kGroupChatMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.group_chat_message_);
      break;
    }
    // .qaul.net.messaging.RtcMessage rtc_message = 6;
    case kRtcMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.rtc_message_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Messaging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Messaging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Messaging::GetClassData() const { return &_class_data_; }


void Messaging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Messaging*>(&to_msg);
  auto& from = static_cast<const Messaging&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Messaging)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kConfirmationMessage: {
      _this->_internal_mutable_confirmation_message()->::qaul::net::messaging::Confirmation::MergeFrom(
          from._internal_confirmation_message());
      break;
    }
    case kCryptoService: {
      _this->_internal_mutable_crypto_service()->::qaul::net::messaging::CryptoService::MergeFrom(
          from._internal_crypto_service());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chat_message()->::qaul::net::messaging::ChatMessage::MergeFrom(
          from._internal_chat_message());
      break;
    }
    case kFileMessage: {
      _this->_internal_mutable_file_message()->::qaul::net::messaging::FileMessage::MergeFrom(
          from._internal_file_message());
      break;
    }
    case kGroupChatMessage: {
      _this->_internal_mutable_group_chat_message()->::qaul::net::messaging::GroupChatMessage::MergeFrom(
          from._internal_group_chat_message());
      break;
    }
    case kRtcMessage: {
      _this->_internal_mutable_rtc_message()->::qaul::net::messaging::RtcMessage::MergeFrom(
          from._internal_rtc_message());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Messaging::CopyFrom(const Messaging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Messaging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messaging::IsInitialized() const {
  return true;
}

void Messaging::InternalSwap(Messaging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Messaging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[3]);
}

// ===================================================================

class CryptoService::_Internal {
 public:
};

CryptoService::CryptoService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.CryptoService)
}
CryptoService::CryptoService(const CryptoService& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CryptoService* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.CryptoService)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CryptoService::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CryptoService::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CryptoService::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[4]);
}

// ===================================================================

class Confirmation::_Internal {
 public:
};

Confirmation::Confirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.Confirmation)
}
Confirmation::Confirmation(const Confirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Confirmation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.received_at_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.received_at_ = from._impl_.received_at_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.Confirmation)
}

inline void Confirmation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_id_){}
    , decltype(_impl_.received_at_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Confirmation::~Confirmation() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.Confirmation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Confirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_id_.Destroy();
}

void Confirmation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Confirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.Confirmation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.received_at_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Confirmation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 received_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.received_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Confirmation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.Confirmation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message_id = 1;
  if (!this->_internal_message_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // uint64 received_at = 2;
  if (this->_internal_received_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_received_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.Confirmation)
  return target;
}

size_t Confirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.Confirmation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_id());
  }

  // uint64 received_at = 2;
  if (this->_internal_received_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_received_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Confirmation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Confirmation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Confirmation::GetClassData() const { return &_class_data_; }


void Confirmation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Confirmation*>(&to_msg);
  auto& from = static_cast<const Confirmation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.Confirmation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_received_at() != 0) {
    _this->_internal_set_received_at(from._internal_received_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Confirmation::CopyFrom(const Confirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.Confirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confirmation::IsInitialized() const {
  return true;
}

void Confirmation::InternalSwap(Confirmation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  swap(_impl_.received_at_, other->_impl_.received_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Confirmation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[5]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.sent_at_){}
    , decltype(_impl_.group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sent_at_, &from._impl_.sent_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_) -
    reinterpret_cast<char*>(&_impl_.sent_at_)) + sizeof(_impl_.group_));
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.ChatMessage)
}

inline void ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.sent_at_){uint64_t{0u}}
    , decltype(_impl_.group_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_.Destroy();
  _impl_.content_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.sent_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_) -
      reinterpret_cast<char*>(&_impl_.sent_at_)) + sizeof(_impl_.group_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes conversation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sent_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.net.messaging.ChatMessage.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool group = 1;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_group(), target);
  }

  // bytes conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_conversation_id(), target);
  }

  // uint64 sent_at = 3;
  if (this->_internal_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sent_at(), target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.net.messaging.ChatMessage.content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes conversation_id = 2;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_conversation_id());
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 sent_at = 3;
  if (this->_internal_sent_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sent_at());
  }

  // bool group = 1;
  if (this->_internal_group() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_sent_at() != 0) {
    _this->_internal_set_sent_at(from._internal_sent_at());
  }
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.group_)
      + sizeof(ChatMessage::_impl_.group_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sent_at_)>(
          reinterpret_cast<char*>(&_impl_.sent_at_),
          reinterpret_cast<char*>(&other->_impl_.sent_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[6]);
}

// ===================================================================

class FileMessage::_Internal {
 public:
};

FileMessage::FileMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.FileMessage)
}
FileMessage::FileMessage(const FileMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.FileMessage)
}

inline void FileMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileMessage::~FileMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.FileMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void FileMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.FileMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.FileMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.FileMessage)
  return target;
}

size_t FileMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.FileMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileMessage::GetClassData() const { return &_class_data_; }


void FileMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileMessage*>(&to_msg);
  auto& from = static_cast<const FileMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.FileMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileMessage::CopyFrom(const FileMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.FileMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMessage::IsInitialized() const {
  return true;
}

void FileMessage::InternalSwap(FileMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[7]);
}

// ===================================================================

class GroupChatMessage::_Internal {
 public:
};

GroupChatMessage::GroupChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.GroupChatMessage)
}
GroupChatMessage::GroupChatMessage(const GroupChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.GroupChatMessage)
}

inline void GroupChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupChatMessage::~GroupChatMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.GroupChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void GroupChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.GroupChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.GroupChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.GroupChatMessage)
  return target;
}

size_t GroupChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.GroupChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupChatMessage::GetClassData() const { return &_class_data_; }


void GroupChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupChatMessage*>(&to_msg);
  auto& from = static_cast<const GroupChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.GroupChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupChatMessage::CopyFrom(const GroupChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.GroupChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatMessage::IsInitialized() const {
  return true;
}

void GroupChatMessage::InternalSwap(GroupChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[8]);
}

// ===================================================================

class RtcMessage::_Internal {
 public:
};

RtcMessage::RtcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:qaul.net.messaging.RtcMessage)
}
RtcMessage::RtcMessage(const RtcMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.messaging.RtcMessage)
}

inline void RtcMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtcMessage::~RtcMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.messaging.RtcMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void RtcMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.messaging.RtcMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.messaging.RtcMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.messaging.RtcMessage)
  return target;
}

size_t RtcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.messaging.RtcMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcMessage::GetClassData() const { return &_class_data_; }


void RtcMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcMessage*>(&to_msg);
  auto& from = static_cast<const RtcMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.messaging.RtcMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcMessage::CopyFrom(const RtcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.messaging.RtcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcMessage::IsInitialized() const {
  return true;
}

void RtcMessage::InternalSwap(RtcMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fmessaging_2fmessaging_2eproto_getter, &descriptor_table_services_2fmessaging_2fmessaging_2eproto_once,
      file_level_metadata_services_2fmessaging_2fmessaging_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messaging
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Container*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Container >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Envelope*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Envelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Envelope >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Data*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Messaging*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Messaging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Messaging >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::CryptoService*
Arena::CreateMaybeMessage< ::qaul::net::messaging::CryptoService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::CryptoService >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::Confirmation*
Arena::CreateMaybeMessage< ::qaul::net::messaging::Confirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::Confirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::ChatMessage*
Arena::CreateMaybeMessage< ::qaul::net::messaging::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::FileMessage*
Arena::CreateMaybeMessage< ::qaul::net::messaging::FileMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::FileMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::GroupChatMessage*
Arena::CreateMaybeMessage< ::qaul::net::messaging::GroupChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::GroupChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::messaging::RtcMessage*
Arena::CreateMaybeMessage< ::qaul::net::messaging::RtcMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::messaging::RtcMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
