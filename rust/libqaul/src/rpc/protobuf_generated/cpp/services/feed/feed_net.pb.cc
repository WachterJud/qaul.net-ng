// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/feed/feed_net.proto

#include "services/feed/feed_net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace net {
namespace feed {
PROTOBUF_CONSTEXPR FeedContainer::FeedContainer(
    ::_pbi::ConstantInitialized)
  : signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FeedContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedContainerDefaultTypeInternal() {}
  union {
    FeedContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedContainerDefaultTypeInternal _FeedContainer_default_instance_;
PROTOBUF_CONSTEXPR FeedMessageContent::FeedMessageContent(
    ::_pbi::ConstantInitialized)
  : sender_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_(uint64_t{0u}){}
struct FeedMessageContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedMessageContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedMessageContentDefaultTypeInternal() {}
  union {
    FeedMessageContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedMessageContentDefaultTypeInternal _FeedMessageContent_default_instance_;
}  // namespace feed
}  // namespace net
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_services_2ffeed_2ffeed_5fnet_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2ffeed_2ffeed_5fnet_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2ffeed_2ffeed_5fnet_2eproto = nullptr;

const uint32_t TableStruct_services_2ffeed_2ffeed_5fnet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::feed::FeedContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::feed::FeedContainer, signature_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::feed::FeedContainer, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::feed::FeedMessageContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::feed::FeedMessageContent, sender_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::feed::FeedMessageContent, content_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::feed::FeedMessageContent, time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::net::feed::FeedContainer)},
  { 8, -1, -1, sizeof(::qaul::net::feed::FeedMessageContent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::net::feed::_FeedContainer_default_instance_._instance,
  &::qaul::net::feed::_FeedMessageContent_default_instance_._instance,
};

const char descriptor_table_protodef_services_2ffeed_2ffeed_5fnet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034services/feed/feed_net.proto\022\rqaul.net"
  ".feed\"3\n\rFeedContainer\022\021\n\tsignature\030\001 \001("
  "\014\022\017\n\007message\030\002 \001(\014\"C\n\022FeedMessageContent"
  "\022\016\n\006sender\030\001 \001(\014\022\017\n\007content\030\002 \001(\t\022\014\n\004tim"
  "e\030\003 \001(\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto = {
    false, false, 175, descriptor_table_protodef_services_2ffeed_2ffeed_5fnet_2eproto,
    "services/feed/feed_net.proto",
    &descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_services_2ffeed_2ffeed_5fnet_2eproto::offsets,
    file_level_metadata_services_2ffeed_2ffeed_5fnet_2eproto, file_level_enum_descriptors_services_2ffeed_2ffeed_5fnet_2eproto,
    file_level_service_descriptors_services_2ffeed_2ffeed_5fnet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto_getter() {
  return &descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2ffeed_2ffeed_5fnet_2eproto(&descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto);
namespace qaul {
namespace net {
namespace feed {

// ===================================================================

class FeedContainer::_Internal {
 public:
};

FeedContainer::FeedContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.feed.FeedContainer)
}
FeedContainer::FeedContainer(const FeedContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.feed.FeedContainer)
}

inline void FeedContainer::SharedCtor() {
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedContainer::~FeedContainer() {
  // @@protoc_insertion_point(destructor:qaul.net.feed.FeedContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.Destroy();
  message_.Destroy();
}

void FeedContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.feed.FeedContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.feed.FeedContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.feed.FeedContainer)
  return target;
}

size_t FeedContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.feed.FeedContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeedContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedContainer::GetClassData() const { return &_class_data_; }

void FeedContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeedContainer *>(to)->MergeFrom(
      static_cast<const FeedContainer &>(from));
}


void FeedContainer::MergeFrom(const FeedContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.feed.FeedContainer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedContainer::CopyFrom(const FeedContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.feed.FeedContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedContainer::IsInitialized() const {
  return true;
}

void FeedContainer::InternalSwap(FeedContainer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto_getter, &descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto_once,
      file_level_metadata_services_2ffeed_2ffeed_5fnet_2eproto[0]);
}

// ===================================================================

class FeedMessageContent::_Internal {
 public:
};

FeedMessageContent::FeedMessageContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.feed.FeedMessageContent)
}
FeedMessageContent::FeedMessageContent(const FeedMessageContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(from._internal_sender(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.feed.FeedMessageContent)
}

inline void FeedMessageContent::SharedCtor() {
sender_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_ = uint64_t{0u};
}

FeedMessageContent::~FeedMessageContent() {
  // @@protoc_insertion_point(destructor:qaul.net.feed.FeedMessageContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedMessageContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_.Destroy();
  content_.Destroy();
}

void FeedMessageContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedMessageContent::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.feed.FeedMessageContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty();
  content_.ClearToEmpty();
  time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedMessageContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.net.feed.FeedMessageContent.content"));
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedMessageContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.feed.FeedMessageContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sender(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.net.feed.FeedMessageContent.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.feed.FeedMessageContent)
  return target;
}

size_t FeedMessageContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.feed.FeedMessageContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedMessageContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FeedMessageContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedMessageContent::GetClassData() const { return &_class_data_; }

void FeedMessageContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FeedMessageContent *>(to)->MergeFrom(
      static_cast<const FeedMessageContent &>(from));
}


void FeedMessageContent::MergeFrom(const FeedMessageContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.feed.FeedMessageContent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedMessageContent::CopyFrom(const FeedMessageContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.feed.FeedMessageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedMessageContent::IsInitialized() const {
  return true;
}

void FeedMessageContent::InternalSwap(FeedMessageContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedMessageContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto_getter, &descriptor_table_services_2ffeed_2ffeed_5fnet_2eproto_once,
      file_level_metadata_services_2ffeed_2ffeed_5fnet_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace feed
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::net::feed::FeedContainer*
Arena::CreateMaybeMessage< ::qaul::net::feed::FeedContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::feed::FeedContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::feed::FeedMessageContent*
Arena::CreateMaybeMessage< ::qaul::net::feed::FeedMessageContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::feed::FeedMessageContent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
