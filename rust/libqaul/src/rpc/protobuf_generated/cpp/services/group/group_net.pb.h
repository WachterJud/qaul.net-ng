// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/group/group_net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5fnet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5fnet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fgroup_2fgroup_5fnet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fgroup_2fgroup_5fnet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fgroup_2fgroup_5fnet_2eproto;
namespace qaul {
namespace net {
namespace group {
class GroupContainer;
struct GroupContainerDefaultTypeInternal;
extern GroupContainerDefaultTypeInternal _GroupContainer_default_instance_;
class GroupNotify;
struct GroupNotifyDefaultTypeInternal;
extern GroupNotifyDefaultTypeInternal _GroupNotify_default_instance_;
class InviteMember;
struct InviteMemberDefaultTypeInternal;
extern InviteMemberDefaultTypeInternal _InviteMember_default_instance_;
class Member;
struct MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class RemovedMember;
struct RemovedMemberDefaultTypeInternal;
extern RemovedMemberDefaultTypeInternal _RemovedMember_default_instance_;
class ReplyInvite;
struct ReplyInviteDefaultTypeInternal;
extern ReplyInviteDefaultTypeInternal _ReplyInvite_default_instance_;
}  // namespace group
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::net::group::GroupContainer* Arena::CreateMaybeMessage<::qaul::net::group::GroupContainer>(Arena*);
template<> ::qaul::net::group::GroupNotify* Arena::CreateMaybeMessage<::qaul::net::group::GroupNotify>(Arena*);
template<> ::qaul::net::group::InviteMember* Arena::CreateMaybeMessage<::qaul::net::group::InviteMember>(Arena*);
template<> ::qaul::net::group::Member* Arena::CreateMaybeMessage<::qaul::net::group::Member>(Arena*);
template<> ::qaul::net::group::RemovedMember* Arena::CreateMaybeMessage<::qaul::net::group::RemovedMember>(Arena*);
template<> ::qaul::net::group::ReplyInvite* Arena::CreateMaybeMessage<::qaul::net::group::ReplyInvite>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace net {
namespace group {

// ===================================================================

class GroupContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.group.GroupContainer) */ {
 public:
  inline GroupContainer() : GroupContainer(nullptr) {}
  ~GroupContainer() override;
  explicit PROTOBUF_CONSTEXPR GroupContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupContainer(const GroupContainer& from);
  GroupContainer(GroupContainer&& from) noexcept
    : GroupContainer() {
    *this = ::std::move(from);
  }

  inline GroupContainer& operator=(const GroupContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupContainer& operator=(GroupContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupContainer& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kInviteMember = 1,
    kReplyInvite = 2,
    kRemoved = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const GroupContainer* internal_default_instance() {
    return reinterpret_cast<const GroupContainer*>(
               &_GroupContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupContainer& a, GroupContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupContainer& from) {
    GroupContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.group.GroupContainer";
  }
  protected:
  explicit GroupContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteMemberFieldNumber = 1,
    kReplyInviteFieldNumber = 2,
    kRemovedFieldNumber = 4,
  };
  // .qaul.net.group.InviteMember invite_member = 1;
  bool has_invite_member() const;
  private:
  bool _internal_has_invite_member() const;
  public:
  void clear_invite_member();
  const ::qaul::net::group::InviteMember& invite_member() const;
  PROTOBUF_NODISCARD ::qaul::net::group::InviteMember* release_invite_member();
  ::qaul::net::group::InviteMember* mutable_invite_member();
  void set_allocated_invite_member(::qaul::net::group::InviteMember* invite_member);
  private:
  const ::qaul::net::group::InviteMember& _internal_invite_member() const;
  ::qaul::net::group::InviteMember* _internal_mutable_invite_member();
  public:
  void unsafe_arena_set_allocated_invite_member(
      ::qaul::net::group::InviteMember* invite_member);
  ::qaul::net::group::InviteMember* unsafe_arena_release_invite_member();

  // .qaul.net.group.ReplyInvite reply_invite = 2;
  bool has_reply_invite() const;
  private:
  bool _internal_has_reply_invite() const;
  public:
  void clear_reply_invite();
  const ::qaul::net::group::ReplyInvite& reply_invite() const;
  PROTOBUF_NODISCARD ::qaul::net::group::ReplyInvite* release_reply_invite();
  ::qaul::net::group::ReplyInvite* mutable_reply_invite();
  void set_allocated_reply_invite(::qaul::net::group::ReplyInvite* reply_invite);
  private:
  const ::qaul::net::group::ReplyInvite& _internal_reply_invite() const;
  ::qaul::net::group::ReplyInvite* _internal_mutable_reply_invite();
  public:
  void unsafe_arena_set_allocated_reply_invite(
      ::qaul::net::group::ReplyInvite* reply_invite);
  ::qaul::net::group::ReplyInvite* unsafe_arena_release_reply_invite();

  // .qaul.net.group.RemovedMember removed = 4;
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  const ::qaul::net::group::RemovedMember& removed() const;
  PROTOBUF_NODISCARD ::qaul::net::group::RemovedMember* release_removed();
  ::qaul::net::group::RemovedMember* mutable_removed();
  void set_allocated_removed(::qaul::net::group::RemovedMember* removed);
  private:
  const ::qaul::net::group::RemovedMember& _internal_removed() const;
  ::qaul::net::group::RemovedMember* _internal_mutable_removed();
  public:
  void unsafe_arena_set_allocated_removed(
      ::qaul::net::group::RemovedMember* removed);
  ::qaul::net::group::RemovedMember* unsafe_arena_release_removed();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.net.group.GroupContainer)
 private:
  class _Internal;
  void set_has_invite_member();
  void set_has_reply_invite();
  void set_has_removed();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::net::group::InviteMember* invite_member_;
      ::qaul::net::group::ReplyInvite* reply_invite_;
      ::qaul::net::group::RemovedMember* removed_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5fnet_2eproto;
};
// -------------------------------------------------------------------

class InviteMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.group.InviteMember) */ {
 public:
  inline InviteMember() : InviteMember(nullptr) {}
  ~InviteMember() override;
  explicit PROTOBUF_CONSTEXPR InviteMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InviteMember(const InviteMember& from);
  InviteMember(InviteMember&& from) noexcept
    : InviteMember() {
    *this = ::std::move(from);
  }

  inline InviteMember& operator=(const InviteMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline InviteMember& operator=(InviteMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InviteMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const InviteMember* internal_default_instance() {
    return reinterpret_cast<const InviteMember*>(
               &_InviteMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InviteMember& a, InviteMember& b) {
    a.Swap(&b);
  }
  inline void Swap(InviteMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InviteMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InviteMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InviteMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InviteMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InviteMember& from) {
    InviteMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InviteMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.group.InviteMember";
  }
  protected:
  explicit InviteMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kAdminIdFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kMembersCountFieldNumber = 5,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // bytes admin_id = 3;
  void clear_admin_id();
  const std::string& admin_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_id();
  PROTOBUF_NODISCARD std::string* release_admin_id();
  void set_allocated_admin_id(std::string* admin_id);
  private:
  const std::string& _internal_admin_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_id(const std::string& value);
  std::string* _internal_mutable_admin_id();
  public:

  // uint64 created_at = 4;
  void clear_created_at();
  uint64_t created_at() const;
  void set_created_at(uint64_t value);
  private:
  uint64_t _internal_created_at() const;
  void _internal_set_created_at(uint64_t value);
  public:

  // uint32 members_count = 5;
  void clear_members_count();
  uint32_t members_count() const;
  void set_members_count(uint32_t value);
  private:
  uint32_t _internal_members_count() const;
  void _internal_set_members_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.group.InviteMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_id_;
    uint64_t created_at_;
    uint32_t members_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5fnet_2eproto;
};
// -------------------------------------------------------------------

class Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.group.Member) */ {
 public:
  inline Member() : Member(nullptr) {}
  ~Member() override;
  explicit PROTOBUF_CONSTEXPR Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }
  inline void Swap(Member* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Member& from) {
    Member::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.group.Member";
  }
  protected:
  explicit Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kJoinedAtFieldNumber = 3,
    kRoleFieldNumber = 2,
    kStateFieldNumber = 4,
    kLastMessageIndexFieldNumber = 5,
  };
  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint64 joined_at = 3;
  void clear_joined_at();
  uint64_t joined_at() const;
  void set_joined_at(uint64_t value);
  private:
  uint64_t _internal_joined_at() const;
  void _internal_set_joined_at(uint64_t value);
  public:

  // int32 role = 2;
  void clear_role();
  int32_t role() const;
  void set_role(int32_t value);
  private:
  int32_t _internal_role() const;
  void _internal_set_role(int32_t value);
  public:

  // int32 state = 4;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // uint32 last_message_index = 5;
  void clear_last_message_index();
  uint32_t last_message_index() const;
  void set_last_message_index(uint32_t value);
  private:
  uint32_t _internal_last_message_index() const;
  void _internal_set_last_message_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.group.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    uint64_t joined_at_;
    int32_t role_;
    int32_t state_;
    uint32_t last_message_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5fnet_2eproto;
};
// -------------------------------------------------------------------

class GroupNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.group.GroupNotify) */ {
 public:
  inline GroupNotify() : GroupNotify(nullptr) {}
  ~GroupNotify() override;
  explicit PROTOBUF_CONSTEXPR GroupNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupNotify(const GroupNotify& from);
  GroupNotify(GroupNotify&& from) noexcept
    : GroupNotify() {
    *this = ::std::move(from);
  }

  inline GroupNotify& operator=(const GroupNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupNotify& operator=(GroupNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupNotify* internal_default_instance() {
    return reinterpret_cast<const GroupNotify*>(
               &_GroupNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupNotify& a, GroupNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupNotify& from) {
    GroupNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.group.GroupNotify";
  }
  protected:
  explicit GroupNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 5,
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kCreatorIdFieldNumber = 4,
    kCreatedAtFieldNumber = 3,
  };
  // repeated .qaul.net.group.Member members = 5;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::qaul::net::group::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::group::Member >*
      mutable_members();
  private:
  const ::qaul::net::group::Member& _internal_members(int index) const;
  ::qaul::net::group::Member* _internal_add_members();
  public:
  const ::qaul::net::group::Member& members(int index) const;
  ::qaul::net::group::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::group::Member >&
      members() const;

  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // bytes creator_id = 4;
  void clear_creator_id();
  const std::string& creator_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator_id();
  PROTOBUF_NODISCARD std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // uint64 created_at = 3;
  void clear_created_at();
  uint64_t created_at() const;
  void set_created_at(uint64_t value);
  private:
  uint64_t _internal_created_at() const;
  void _internal_set_created_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.group.GroupNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::group::Member > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
    uint64_t created_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5fnet_2eproto;
};
// -------------------------------------------------------------------

class ReplyInvite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.group.ReplyInvite) */ {
 public:
  inline ReplyInvite() : ReplyInvite(nullptr) {}
  ~ReplyInvite() override;
  explicit PROTOBUF_CONSTEXPR ReplyInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyInvite(const ReplyInvite& from);
  ReplyInvite(ReplyInvite&& from) noexcept
    : ReplyInvite() {
    *this = ::std::move(from);
  }

  inline ReplyInvite& operator=(const ReplyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyInvite& operator=(ReplyInvite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyInvite* internal_default_instance() {
    return reinterpret_cast<const ReplyInvite*>(
               &_ReplyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReplyInvite& a, ReplyInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyInvite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyInvite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyInvite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyInvite& from) {
    ReplyInvite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyInvite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.group.ReplyInvite";
  }
  protected:
  explicit ReplyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kAcceptFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bool accept = 2;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.group.ReplyInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    bool accept_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5fnet_2eproto;
};
// -------------------------------------------------------------------

class RemovedMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.net.group.RemovedMember) */ {
 public:
  inline RemovedMember() : RemovedMember(nullptr) {}
  ~RemovedMember() override;
  explicit PROTOBUF_CONSTEXPR RemovedMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemovedMember(const RemovedMember& from);
  RemovedMember(RemovedMember&& from) noexcept
    : RemovedMember() {
    *this = ::std::move(from);
  }

  inline RemovedMember& operator=(const RemovedMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovedMember& operator=(RemovedMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemovedMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemovedMember* internal_default_instance() {
    return reinterpret_cast<const RemovedMember*>(
               &_RemovedMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemovedMember& a, RemovedMember& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovedMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovedMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemovedMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemovedMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemovedMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemovedMember& from) {
    RemovedMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovedMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.net.group.RemovedMember";
  }
  protected:
  explicit RemovedMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.net.group.RemovedMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5fnet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupContainer

// .qaul.net.group.InviteMember invite_member = 1;
inline bool GroupContainer::_internal_has_invite_member() const {
  return message_case() == kInviteMember;
}
inline bool GroupContainer::has_invite_member() const {
  return _internal_has_invite_member();
}
inline void GroupContainer::set_has_invite_member() {
  _impl_._oneof_case_[0] = kInviteMember;
}
inline void GroupContainer::clear_invite_member() {
  if (_internal_has_invite_member()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.invite_member_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::group::InviteMember* GroupContainer::release_invite_member() {
  // @@protoc_insertion_point(field_release:qaul.net.group.GroupContainer.invite_member)
  if (_internal_has_invite_member()) {
    clear_has_message();
    ::qaul::net::group::InviteMember* temp = _impl_.message_.invite_member_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.invite_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::group::InviteMember& GroupContainer::_internal_invite_member() const {
  return _internal_has_invite_member()
      ? *_impl_.message_.invite_member_
      : reinterpret_cast< ::qaul::net::group::InviteMember&>(::qaul::net::group::_InviteMember_default_instance_);
}
inline const ::qaul::net::group::InviteMember& GroupContainer::invite_member() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupContainer.invite_member)
  return _internal_invite_member();
}
inline ::qaul::net::group::InviteMember* GroupContainer::unsafe_arena_release_invite_member() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.group.GroupContainer.invite_member)
  if (_internal_has_invite_member()) {
    clear_has_message();
    ::qaul::net::group::InviteMember* temp = _impl_.message_.invite_member_;
    _impl_.message_.invite_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupContainer::unsafe_arena_set_allocated_invite_member(::qaul::net::group::InviteMember* invite_member) {
  clear_message();
  if (invite_member) {
    set_has_invite_member();
    _impl_.message_.invite_member_ = invite_member;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.group.GroupContainer.invite_member)
}
inline ::qaul::net::group::InviteMember* GroupContainer::_internal_mutable_invite_member() {
  if (!_internal_has_invite_member()) {
    clear_message();
    set_has_invite_member();
    _impl_.message_.invite_member_ = CreateMaybeMessage< ::qaul::net::group::InviteMember >(GetArenaForAllocation());
  }
  return _impl_.message_.invite_member_;
}
inline ::qaul::net::group::InviteMember* GroupContainer::mutable_invite_member() {
  ::qaul::net::group::InviteMember* _msg = _internal_mutable_invite_member();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.GroupContainer.invite_member)
  return _msg;
}

// .qaul.net.group.ReplyInvite reply_invite = 2;
inline bool GroupContainer::_internal_has_reply_invite() const {
  return message_case() == kReplyInvite;
}
inline bool GroupContainer::has_reply_invite() const {
  return _internal_has_reply_invite();
}
inline void GroupContainer::set_has_reply_invite() {
  _impl_._oneof_case_[0] = kReplyInvite;
}
inline void GroupContainer::clear_reply_invite() {
  if (_internal_has_reply_invite()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.reply_invite_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::group::ReplyInvite* GroupContainer::release_reply_invite() {
  // @@protoc_insertion_point(field_release:qaul.net.group.GroupContainer.reply_invite)
  if (_internal_has_reply_invite()) {
    clear_has_message();
    ::qaul::net::group::ReplyInvite* temp = _impl_.message_.reply_invite_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.reply_invite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::group::ReplyInvite& GroupContainer::_internal_reply_invite() const {
  return _internal_has_reply_invite()
      ? *_impl_.message_.reply_invite_
      : reinterpret_cast< ::qaul::net::group::ReplyInvite&>(::qaul::net::group::_ReplyInvite_default_instance_);
}
inline const ::qaul::net::group::ReplyInvite& GroupContainer::reply_invite() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupContainer.reply_invite)
  return _internal_reply_invite();
}
inline ::qaul::net::group::ReplyInvite* GroupContainer::unsafe_arena_release_reply_invite() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.group.GroupContainer.reply_invite)
  if (_internal_has_reply_invite()) {
    clear_has_message();
    ::qaul::net::group::ReplyInvite* temp = _impl_.message_.reply_invite_;
    _impl_.message_.reply_invite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupContainer::unsafe_arena_set_allocated_reply_invite(::qaul::net::group::ReplyInvite* reply_invite) {
  clear_message();
  if (reply_invite) {
    set_has_reply_invite();
    _impl_.message_.reply_invite_ = reply_invite;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.group.GroupContainer.reply_invite)
}
inline ::qaul::net::group::ReplyInvite* GroupContainer::_internal_mutable_reply_invite() {
  if (!_internal_has_reply_invite()) {
    clear_message();
    set_has_reply_invite();
    _impl_.message_.reply_invite_ = CreateMaybeMessage< ::qaul::net::group::ReplyInvite >(GetArenaForAllocation());
  }
  return _impl_.message_.reply_invite_;
}
inline ::qaul::net::group::ReplyInvite* GroupContainer::mutable_reply_invite() {
  ::qaul::net::group::ReplyInvite* _msg = _internal_mutable_reply_invite();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.GroupContainer.reply_invite)
  return _msg;
}

// .qaul.net.group.RemovedMember removed = 4;
inline bool GroupContainer::_internal_has_removed() const {
  return message_case() == kRemoved;
}
inline bool GroupContainer::has_removed() const {
  return _internal_has_removed();
}
inline void GroupContainer::set_has_removed() {
  _impl_._oneof_case_[0] = kRemoved;
}
inline void GroupContainer::clear_removed() {
  if (_internal_has_removed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.removed_;
    }
    clear_has_message();
  }
}
inline ::qaul::net::group::RemovedMember* GroupContainer::release_removed() {
  // @@protoc_insertion_point(field_release:qaul.net.group.GroupContainer.removed)
  if (_internal_has_removed()) {
    clear_has_message();
    ::qaul::net::group::RemovedMember* temp = _impl_.message_.removed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::net::group::RemovedMember& GroupContainer::_internal_removed() const {
  return _internal_has_removed()
      ? *_impl_.message_.removed_
      : reinterpret_cast< ::qaul::net::group::RemovedMember&>(::qaul::net::group::_RemovedMember_default_instance_);
}
inline const ::qaul::net::group::RemovedMember& GroupContainer::removed() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupContainer.removed)
  return _internal_removed();
}
inline ::qaul::net::group::RemovedMember* GroupContainer::unsafe_arena_release_removed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.net.group.GroupContainer.removed)
  if (_internal_has_removed()) {
    clear_has_message();
    ::qaul::net::group::RemovedMember* temp = _impl_.message_.removed_;
    _impl_.message_.removed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GroupContainer::unsafe_arena_set_allocated_removed(::qaul::net::group::RemovedMember* removed) {
  clear_message();
  if (removed) {
    set_has_removed();
    _impl_.message_.removed_ = removed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.net.group.GroupContainer.removed)
}
inline ::qaul::net::group::RemovedMember* GroupContainer::_internal_mutable_removed() {
  if (!_internal_has_removed()) {
    clear_message();
    set_has_removed();
    _impl_.message_.removed_ = CreateMaybeMessage< ::qaul::net::group::RemovedMember >(GetArenaForAllocation());
  }
  return _impl_.message_.removed_;
}
inline ::qaul::net::group::RemovedMember* GroupContainer::mutable_removed() {
  ::qaul::net::group::RemovedMember* _msg = _internal_mutable_removed();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.GroupContainer.removed)
  return _msg;
}

inline bool GroupContainer::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void GroupContainer::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline GroupContainer::MessageCase GroupContainer::message_case() const {
  return GroupContainer::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InviteMember

// bytes group_id = 1;
inline void InviteMember::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& InviteMember::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.InviteMember.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InviteMember::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.InviteMember.group_id)
}
inline std::string* InviteMember::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.InviteMember.group_id)
  return _s;
}
inline const std::string& InviteMember::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void InviteMember::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteMember::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InviteMember::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.net.group.InviteMember.group_id)
  return _impl_.group_id_.Release();
}
inline void InviteMember::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.InviteMember.group_id)
}

// string group_name = 2;
inline void InviteMember::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& InviteMember::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.InviteMember.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InviteMember::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.InviteMember.group_name)
}
inline std::string* InviteMember::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.InviteMember.group_name)
  return _s;
}
inline const std::string& InviteMember::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void InviteMember::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteMember::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* InviteMember::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.net.group.InviteMember.group_name)
  return _impl_.group_name_.Release();
}
inline void InviteMember::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.InviteMember.group_name)
}

// bytes admin_id = 3;
inline void InviteMember::clear_admin_id() {
  _impl_.admin_id_.ClearToEmpty();
}
inline const std::string& InviteMember::admin_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.InviteMember.admin_id)
  return _internal_admin_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InviteMember::set_admin_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.admin_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.InviteMember.admin_id)
}
inline std::string* InviteMember::mutable_admin_id() {
  std::string* _s = _internal_mutable_admin_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.InviteMember.admin_id)
  return _s;
}
inline const std::string& InviteMember::_internal_admin_id() const {
  return _impl_.admin_id_.Get();
}
inline void InviteMember::_internal_set_admin_id(const std::string& value) {
  
  _impl_.admin_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteMember::_internal_mutable_admin_id() {
  
  return _impl_.admin_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InviteMember::release_admin_id() {
  // @@protoc_insertion_point(field_release:qaul.net.group.InviteMember.admin_id)
  return _impl_.admin_id_.Release();
}
inline void InviteMember::set_allocated_admin_id(std::string* admin_id) {
  if (admin_id != nullptr) {
    
  } else {
    
  }
  _impl_.admin_id_.SetAllocated(admin_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.admin_id_.IsDefault()) {
    _impl_.admin_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.InviteMember.admin_id)
}

// uint64 created_at = 4;
inline void InviteMember::clear_created_at() {
  _impl_.created_at_ = uint64_t{0u};
}
inline uint64_t InviteMember::_internal_created_at() const {
  return _impl_.created_at_;
}
inline uint64_t InviteMember::created_at() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.InviteMember.created_at)
  return _internal_created_at();
}
inline void InviteMember::_internal_set_created_at(uint64_t value) {
  
  _impl_.created_at_ = value;
}
inline void InviteMember::set_created_at(uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.InviteMember.created_at)
}

// uint32 members_count = 5;
inline void InviteMember::clear_members_count() {
  _impl_.members_count_ = 0u;
}
inline uint32_t InviteMember::_internal_members_count() const {
  return _impl_.members_count_;
}
inline uint32_t InviteMember::members_count() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.InviteMember.members_count)
  return _internal_members_count();
}
inline void InviteMember::_internal_set_members_count(uint32_t value) {
  
  _impl_.members_count_ = value;
}
inline void InviteMember::set_members_count(uint32_t value) {
  _internal_set_members_count(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.InviteMember.members_count)
}

// -------------------------------------------------------------------

// Member

// bytes user_id = 1;
inline void Member::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& Member::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.Member.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Member::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.Member.user_id)
}
inline std::string* Member::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.Member.user_id)
  return _s;
}
inline const std::string& Member::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void Member::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Member::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Member::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.net.group.Member.user_id)
  return _impl_.user_id_.Release();
}
inline void Member::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.Member.user_id)
}

// int32 role = 2;
inline void Member::clear_role() {
  _impl_.role_ = 0;
}
inline int32_t Member::_internal_role() const {
  return _impl_.role_;
}
inline int32_t Member::role() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.Member.role)
  return _internal_role();
}
inline void Member::_internal_set_role(int32_t value) {
  
  _impl_.role_ = value;
}
inline void Member::set_role(int32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.Member.role)
}

// uint64 joined_at = 3;
inline void Member::clear_joined_at() {
  _impl_.joined_at_ = uint64_t{0u};
}
inline uint64_t Member::_internal_joined_at() const {
  return _impl_.joined_at_;
}
inline uint64_t Member::joined_at() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.Member.joined_at)
  return _internal_joined_at();
}
inline void Member::_internal_set_joined_at(uint64_t value) {
  
  _impl_.joined_at_ = value;
}
inline void Member::set_joined_at(uint64_t value) {
  _internal_set_joined_at(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.Member.joined_at)
}

// int32 state = 4;
inline void Member::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t Member::_internal_state() const {
  return _impl_.state_;
}
inline int32_t Member::state() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.Member.state)
  return _internal_state();
}
inline void Member::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void Member::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.Member.state)
}

// uint32 last_message_index = 5;
inline void Member::clear_last_message_index() {
  _impl_.last_message_index_ = 0u;
}
inline uint32_t Member::_internal_last_message_index() const {
  return _impl_.last_message_index_;
}
inline uint32_t Member::last_message_index() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.Member.last_message_index)
  return _internal_last_message_index();
}
inline void Member::_internal_set_last_message_index(uint32_t value) {
  
  _impl_.last_message_index_ = value;
}
inline void Member::set_last_message_index(uint32_t value) {
  _internal_set_last_message_index(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.Member.last_message_index)
}

// -------------------------------------------------------------------

// GroupNotify

// bytes group_id = 1;
inline void GroupNotify::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupNotify::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupNotify.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupNotify::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.GroupNotify.group_id)
}
inline std::string* GroupNotify::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.GroupNotify.group_id)
  return _s;
}
inline const std::string& GroupNotify::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupNotify::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupNotify::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.net.group.GroupNotify.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupNotify::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.GroupNotify.group_id)
}

// string group_name = 2;
inline void GroupNotify::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupNotify::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupNotify.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupNotify::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.GroupNotify.group_name)
}
inline std::string* GroupNotify::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.GroupNotify.group_name)
  return _s;
}
inline const std::string& GroupNotify::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupNotify::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupNotify::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupNotify::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.net.group.GroupNotify.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupNotify::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.GroupNotify.group_name)
}

// uint64 created_at = 3;
inline void GroupNotify::clear_created_at() {
  _impl_.created_at_ = uint64_t{0u};
}
inline uint64_t GroupNotify::_internal_created_at() const {
  return _impl_.created_at_;
}
inline uint64_t GroupNotify::created_at() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupNotify.created_at)
  return _internal_created_at();
}
inline void GroupNotify::_internal_set_created_at(uint64_t value) {
  
  _impl_.created_at_ = value;
}
inline void GroupNotify::set_created_at(uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.GroupNotify.created_at)
}

// bytes creator_id = 4;
inline void GroupNotify::clear_creator_id() {
  _impl_.creator_id_.ClearToEmpty();
}
inline const std::string& GroupNotify::creator_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupNotify.creator_id)
  return _internal_creator_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupNotify::set_creator_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.GroupNotify.creator_id)
}
inline std::string* GroupNotify::mutable_creator_id() {
  std::string* _s = _internal_mutable_creator_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.GroupNotify.creator_id)
  return _s;
}
inline const std::string& GroupNotify::_internal_creator_id() const {
  return _impl_.creator_id_.Get();
}
inline void GroupNotify::_internal_set_creator_id(const std::string& value) {
  
  _impl_.creator_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupNotify::_internal_mutable_creator_id() {
  
  return _impl_.creator_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupNotify::release_creator_id() {
  // @@protoc_insertion_point(field_release:qaul.net.group.GroupNotify.creator_id)
  return _impl_.creator_id_.Release();
}
inline void GroupNotify::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  _impl_.creator_id_.SetAllocated(creator_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_id_.IsDefault()) {
    _impl_.creator_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.GroupNotify.creator_id)
}

// repeated .qaul.net.group.Member members = 5;
inline int GroupNotify::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupNotify::members_size() const {
  return _internal_members_size();
}
inline void GroupNotify::clear_members() {
  _impl_.members_.Clear();
}
inline ::qaul::net::group::Member* GroupNotify::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.net.group.GroupNotify.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::group::Member >*
GroupNotify::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qaul.net.group.GroupNotify.members)
  return &_impl_.members_;
}
inline const ::qaul::net::group::Member& GroupNotify::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::qaul::net::group::Member& GroupNotify::members(int index) const {
  // @@protoc_insertion_point(field_get:qaul.net.group.GroupNotify.members)
  return _internal_members(index);
}
inline ::qaul::net::group::Member* GroupNotify::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::qaul::net::group::Member* GroupNotify::add_members() {
  ::qaul::net::group::Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:qaul.net.group.GroupNotify.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::net::group::Member >&
GroupNotify::members() const {
  // @@protoc_insertion_point(field_list:qaul.net.group.GroupNotify.members)
  return _impl_.members_;
}

// -------------------------------------------------------------------

// ReplyInvite

// bytes group_id = 1;
inline void ReplyInvite::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& ReplyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.ReplyInvite.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplyInvite::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.ReplyInvite.group_id)
}
inline std::string* ReplyInvite::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.ReplyInvite.group_id)
  return _s;
}
inline const std::string& ReplyInvite::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void ReplyInvite::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyInvite::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplyInvite::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.net.group.ReplyInvite.group_id)
  return _impl_.group_id_.Release();
}
inline void ReplyInvite::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.ReplyInvite.group_id)
}

// bool accept = 2;
inline void ReplyInvite::clear_accept() {
  _impl_.accept_ = false;
}
inline bool ReplyInvite::_internal_accept() const {
  return _impl_.accept_;
}
inline bool ReplyInvite::accept() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.ReplyInvite.accept)
  return _internal_accept();
}
inline void ReplyInvite::_internal_set_accept(bool value) {
  
  _impl_.accept_ = value;
}
inline void ReplyInvite::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:qaul.net.group.ReplyInvite.accept)
}

// -------------------------------------------------------------------

// RemovedMember

// bytes group_id = 1;
inline void RemovedMember::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& RemovedMember::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.net.group.RemovedMember.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemovedMember::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.net.group.RemovedMember.group_id)
}
inline std::string* RemovedMember::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.net.group.RemovedMember.group_id)
  return _s;
}
inline const std::string& RemovedMember::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void RemovedMember::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RemovedMember::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RemovedMember::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.net.group.RemovedMember.group_id)
  return _impl_.group_id_.Release();
}
inline void RemovedMember::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.net.group.RemovedMember.group_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace group
}  // namespace net
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5fnet_2eproto
