// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/router_net_info.proto

#include "router/router_net_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace qaul {
namespace net {
namespace router_net_info {
PROTOBUF_CONSTEXPR RouterInfoContainer::RouterInfoContainer(
    ::_pbi::ConstantInitialized)
  : signature_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RouterInfoContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterInfoContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterInfoContainerDefaultTypeInternal() {}
  union {
    RouterInfoContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterInfoContainerDefaultTypeInternal _RouterInfoContainer_default_instance_;
PROTOBUF_CONSTEXPR RouterInfoContent::RouterInfoContent(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_(uint64_t{0u}){}
struct RouterInfoContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterInfoContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterInfoContentDefaultTypeInternal() {}
  union {
    RouterInfoContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterInfoContentDefaultTypeInternal _RouterInfoContent_default_instance_;
PROTOBUF_CONSTEXPR RouterInfoMessage::RouterInfoMessage(
    ::_pbi::ConstantInitialized)
  : node_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , routes_(nullptr)
  , users_(nullptr)
  , timestamp_(uint64_t{0u}){}
struct RouterInfoMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterInfoMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterInfoMessageDefaultTypeInternal() {}
  union {
    RouterInfoMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterInfoMessageDefaultTypeInternal _RouterInfoMessage_default_instance_;
PROTOBUF_CONSTEXPR Routing::Routing(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct RoutingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingDefaultTypeInternal() {}
  union {
    Routing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingDefaultTypeInternal _Routing_default_instance_;
PROTOBUF_CONSTEXPR RoutingInfoTable::RoutingInfoTable(
    ::_pbi::ConstantInitialized)
  : entry_(){}
struct RoutingInfoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingInfoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingInfoTableDefaultTypeInternal() {}
  union {
    RoutingInfoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingInfoTableDefaultTypeInternal _RoutingInfoTable_default_instance_;
PROTOBUF_CONSTEXPR RoutingInfoEntry::RoutingInfoEntry(
    ::_pbi::ConstantInitialized)
  : user_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rtt_(0u)
  , pl_(0){}
struct RoutingInfoEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingInfoEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingInfoEntryDefaultTypeInternal() {}
  union {
    RoutingInfoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingInfoEntryDefaultTypeInternal _RoutingInfoEntry_default_instance_;
PROTOBUF_CONSTEXPR UserInfoTable::UserInfoTable(
    ::_pbi::ConstantInitialized)
  : info_(){}
struct UserInfoTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoTableDefaultTypeInternal() {}
  union {
    UserInfoTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoTableDefaultTypeInternal _UserInfoTable_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace router_net_info
}  // namespace net
}  // namespace qaul
static ::_pb::Metadata file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_router_2frouter_5fnet_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_router_2frouter_5fnet_5finfo_2eproto = nullptr;

const uint32_t TableStruct_router_2frouter_5fnet_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContainer, signature_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContainer, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, content_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoContent, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, node_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, routes_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, users_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RouterInfoMessage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::Routing, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::Routing, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::Routing, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoTable, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, user_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, rtt_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, hc_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::RoutingInfoEntry, pl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfoTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfoTable, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, id_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, key_),
  PROTOBUF_FIELD_OFFSET(::qaul::net::router_net_info::UserInfo, name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::qaul::net::router_net_info::RouterInfoContainer)},
  { 8, -1, -1, sizeof(::qaul::net::router_net_info::RouterInfoContent)},
  { 17, -1, -1, sizeof(::qaul::net::router_net_info::RouterInfoMessage)},
  { 27, -1, -1, sizeof(::qaul::net::router_net_info::Routing)},
  { 38, -1, -1, sizeof(::qaul::net::router_net_info::RoutingInfoTable)},
  { 45, -1, -1, sizeof(::qaul::net::router_net_info::RoutingInfoEntry)},
  { 55, -1, -1, sizeof(::qaul::net::router_net_info::UserInfoTable)},
  { 62, -1, -1, sizeof(::qaul::net::router_net_info::UserInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::qaul::net::router_net_info::_RouterInfoContainer_default_instance_._instance,
  &::qaul::net::router_net_info::_RouterInfoContent_default_instance_._instance,
  &::qaul::net::router_net_info::_RouterInfoMessage_default_instance_._instance,
  &::qaul::net::router_net_info::_Routing_default_instance_._instance,
  &::qaul::net::router_net_info::_RoutingInfoTable_default_instance_._instance,
  &::qaul::net::router_net_info::_RoutingInfoEntry_default_instance_._instance,
  &::qaul::net::router_net_info::_UserInfoTable_default_instance_._instance,
  &::qaul::net::router_net_info::_UserInfo_default_instance_._instance,
};

const char descriptor_table_protodef_router_2frouter_5fnet_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034router/router_net_info.proto\022\030qaul.net"
  ".router_net_info\"9\n\023RouterInfoContainer\022"
  "\021\n\tsignature\030\001 \001(\014\022\017\n\007message\030\002 \001(\014\">\n\021R"
  "outerInfoContent\022\n\n\002id\030\001 \001(\014\022\017\n\007content\030"
  "\002 \001(\014\022\014\n\004time\030\003 \001(\004\"\250\001\n\021RouterInfoMessag"
  "e\022\014\n\004node\030\001 \001(\014\022:\n\006routes\030\002 \001(\0132*.qaul.n"
  "et.router_net_info.RoutingInfoTable\0226\n\005u"
  "sers\030\003 \001(\0132\'.qaul.net.router_net_info.Us"
  "erInfoTable\022\021\n\ttimestamp\030\004 \001(\004\"\245\002\n\007Routi"
  "ng\022B\n\017user_info_table\030\001 \001(\0132\'.qaul.net.r"
  "outer_net_info.UserInfoTableH\000\0227\n\tuser_i"
  "nfo\030\002 \001(\0132\".qaul.net.router_net_info.Use"
  "rInfoH\000\022H\n\022routing_info_table\030\003 \001(\0132*.qa"
  "ul.net.router_net_info.RoutingInfoTableH"
  "\000\022H\n\022routing_info_entry\030\004 \001(\0132*.qaul.net"
  ".router_net_info.RoutingInfoEntryH\000B\t\n\007m"
  "essage\"M\n\020RoutingInfoTable\0229\n\005entry\030\001 \003("
  "\0132*.qaul.net.router_net_info.RoutingInfo"
  "Entry\"E\n\020RoutingInfoEntry\022\014\n\004user\030\001 \001(\014\022"
  "\013\n\003rtt\030\002 \001(\r\022\n\n\002hc\030\003 \001(\014\022\n\n\002pl\030\004 \001(\002\"A\n\r"
  "UserInfoTable\0220\n\004info\030\001 \003(\0132\".qaul.net.r"
  "outer_net_info.UserInfo\"1\n\010UserInfo\022\n\n\002i"
  "d\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\022\014\n\004name\030\003 \001(\tb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_router_2frouter_5fnet_5finfo_2eproto = {
    false, false, 922, descriptor_table_protodef_router_2frouter_5fnet_5finfo_2eproto,
    "router/router_net_info.proto",
    &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_router_2frouter_5fnet_5finfo_2eproto::offsets,
    file_level_metadata_router_2frouter_5fnet_5finfo_2eproto, file_level_enum_descriptors_router_2frouter_5fnet_5finfo_2eproto,
    file_level_service_descriptors_router_2frouter_5fnet_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter() {
  return &descriptor_table_router_2frouter_5fnet_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_router_2frouter_5fnet_5finfo_2eproto(&descriptor_table_router_2frouter_5fnet_5finfo_2eproto);
namespace qaul {
namespace net {
namespace router_net_info {

// ===================================================================

class RouterInfoContainer::_Internal {
 public:
};

RouterInfoContainer::RouterInfoContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RouterInfoContainer)
}
RouterInfoContainer::RouterInfoContainer(const RouterInfoContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(from._internal_signature(), 
      GetArenaForAllocation());
  }
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RouterInfoContainer)
}

inline void RouterInfoContainer::SharedCtor() {
signature_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouterInfoContainer::~RouterInfoContainer() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RouterInfoContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouterInfoContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.Destroy();
  message_.Destroy();
}

void RouterInfoContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouterInfoContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RouterInfoContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterInfoContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouterInfoContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RouterInfoContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RouterInfoContainer)
  return target;
}

size_t RouterInfoContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RouterInfoContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouterInfoContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouterInfoContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouterInfoContainer::GetClassData() const { return &_class_data_; }

void RouterInfoContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouterInfoContainer *>(to)->MergeFrom(
      static_cast<const RouterInfoContainer &>(from));
}


void RouterInfoContainer::MergeFrom(const RouterInfoContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RouterInfoContainer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouterInfoContainer::CopyFrom(const RouterInfoContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RouterInfoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoContainer::IsInitialized() const {
  return true;
}

void RouterInfoContainer::InternalSwap(RouterInfoContainer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterInfoContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[0]);
}

// ===================================================================

class RouterInfoContent::_Internal {
 public:
};

RouterInfoContent::RouterInfoContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RouterInfoContent)
}
RouterInfoContent::RouterInfoContent(const RouterInfoContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RouterInfoContent)
}

inline void RouterInfoContent::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_ = uint64_t{0u};
}

RouterInfoContent::~RouterInfoContent() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RouterInfoContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouterInfoContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  content_.Destroy();
}

void RouterInfoContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouterInfoContent::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RouterInfoContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  content_.ClearToEmpty();
  time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterInfoContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouterInfoContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RouterInfoContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RouterInfoContent)
  return target;
}

size_t RouterInfoContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RouterInfoContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // uint64 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouterInfoContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouterInfoContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouterInfoContent::GetClassData() const { return &_class_data_; }

void RouterInfoContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouterInfoContent *>(to)->MergeFrom(
      static_cast<const RouterInfoContent &>(from));
}


void RouterInfoContent::MergeFrom(const RouterInfoContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RouterInfoContent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouterInfoContent::CopyFrom(const RouterInfoContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RouterInfoContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoContent::IsInitialized() const {
  return true;
}

void RouterInfoContent::InternalSwap(RouterInfoContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterInfoContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[1]);
}

// ===================================================================

class RouterInfoMessage::_Internal {
 public:
  static const ::qaul::net::router_net_info::RoutingInfoTable& routes(const RouterInfoMessage* msg);
  static const ::qaul::net::router_net_info::UserInfoTable& users(const RouterInfoMessage* msg);
};

const ::qaul::net::router_net_info::RoutingInfoTable&
RouterInfoMessage::_Internal::routes(const RouterInfoMessage* msg) {
  return *msg->routes_;
}
const ::qaul::net::router_net_info::UserInfoTable&
RouterInfoMessage::_Internal::users(const RouterInfoMessage* msg) {
  return *msg->users_;
}
RouterInfoMessage::RouterInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RouterInfoMessage)
}
RouterInfoMessage::RouterInfoMessage(const RouterInfoMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    node_.Set(from._internal_node(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_routes()) {
    routes_ = new ::qaul::net::router_net_info::RoutingInfoTable(*from.routes_);
  } else {
    routes_ = nullptr;
  }
  if (from._internal_has_users()) {
    users_ = new ::qaul::net::router_net_info::UserInfoTable(*from.users_);
  } else {
    users_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RouterInfoMessage)
}

inline void RouterInfoMessage::SharedCtor() {
node_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&routes_)) + sizeof(timestamp_));
}

RouterInfoMessage::~RouterInfoMessage() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RouterInfoMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouterInfoMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_.Destroy();
  if (this != internal_default_instance()) delete routes_;
  if (this != internal_default_instance()) delete users_;
}

void RouterInfoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouterInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RouterInfoMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && routes_ != nullptr) {
    delete routes_;
  }
  routes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && users_ != nullptr) {
    delete users_;
  }
  users_ = nullptr;
  timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterInfoMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.RoutingInfoTable routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.UserInfoTable users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_users(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouterInfoMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RouterInfoMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node = 1;
  if (!this->_internal_node().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node(), target);
  }

  // .qaul.net.router_net_info.RoutingInfoTable routes = 2;
  if (this->_internal_has_routes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routes(this),
        _Internal::routes(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.router_net_info.UserInfoTable users = 3;
  if (this->_internal_has_users()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::users(this),
        _Internal::users(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RouterInfoMessage)
  return target;
}

size_t RouterInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RouterInfoMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node = 1;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node());
  }

  // .qaul.net.router_net_info.RoutingInfoTable routes = 2;
  if (this->_internal_has_routes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routes_);
  }

  // .qaul.net.router_net_info.UserInfoTable users = 3;
  if (this->_internal_has_users()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *users_);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouterInfoMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouterInfoMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouterInfoMessage::GetClassData() const { return &_class_data_; }

void RouterInfoMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouterInfoMessage *>(to)->MergeFrom(
      static_cast<const RouterInfoMessage &>(from));
}


void RouterInfoMessage::MergeFrom(const RouterInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RouterInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _internal_set_node(from._internal_node());
  }
  if (from._internal_has_routes()) {
    _internal_mutable_routes()->::qaul::net::router_net_info::RoutingInfoTable::MergeFrom(from._internal_routes());
  }
  if (from._internal_has_users()) {
    _internal_mutable_users()->::qaul::net::router_net_info::UserInfoTable::MergeFrom(from._internal_users());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouterInfoMessage::CopyFrom(const RouterInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RouterInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoMessage::IsInitialized() const {
  return true;
}

void RouterInfoMessage::InternalSwap(RouterInfoMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &node_, lhs_arena,
      &other->node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouterInfoMessage, timestamp_)
      + sizeof(RouterInfoMessage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(RouterInfoMessage, routes_)>(
          reinterpret_cast<char*>(&routes_),
          reinterpret_cast<char*>(&other->routes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterInfoMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[2]);
}

// ===================================================================

class Routing::_Internal {
 public:
  static const ::qaul::net::router_net_info::UserInfoTable& user_info_table(const Routing* msg);
  static const ::qaul::net::router_net_info::UserInfo& user_info(const Routing* msg);
  static const ::qaul::net::router_net_info::RoutingInfoTable& routing_info_table(const Routing* msg);
  static const ::qaul::net::router_net_info::RoutingInfoEntry& routing_info_entry(const Routing* msg);
};

const ::qaul::net::router_net_info::UserInfoTable&
Routing::_Internal::user_info_table(const Routing* msg) {
  return *msg->message_.user_info_table_;
}
const ::qaul::net::router_net_info::UserInfo&
Routing::_Internal::user_info(const Routing* msg) {
  return *msg->message_.user_info_;
}
const ::qaul::net::router_net_info::RoutingInfoTable&
Routing::_Internal::routing_info_table(const Routing* msg) {
  return *msg->message_.routing_info_table_;
}
const ::qaul::net::router_net_info::RoutingInfoEntry&
Routing::_Internal::routing_info_entry(const Routing* msg) {
  return *msg->message_.routing_info_entry_;
}
void Routing::set_allocated_user_info_table(::qaul::net::router_net_info::UserInfoTable* user_info_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (user_info_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_info_table);
    if (message_arena != submessage_arena) {
      user_info_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info_table, submessage_arena);
    }
    set_has_user_info_table();
    message_.user_info_table_ = user_info_table;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.router_net_info.Routing.user_info_table)
}
void Routing::set_allocated_user_info(::qaul::net::router_net_info::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
    message_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.router_net_info.Routing.user_info)
}
void Routing::set_allocated_routing_info_table(::qaul::net::router_net_info::RoutingInfoTable* routing_info_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (routing_info_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_info_table);
    if (message_arena != submessage_arena) {
      routing_info_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_info_table, submessage_arena);
    }
    set_has_routing_info_table();
    message_.routing_info_table_ = routing_info_table;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.router_net_info.Routing.routing_info_table)
}
void Routing::set_allocated_routing_info_entry(::qaul::net::router_net_info::RoutingInfoEntry* routing_info_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (routing_info_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_info_entry);
    if (message_arena != submessage_arena) {
      routing_info_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_info_entry, submessage_arena);
    }
    set_has_routing_info_entry();
    message_.routing_info_entry_ = routing_info_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.net.router_net_info.Routing.routing_info_entry)
}
Routing::Routing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.Routing)
}
Routing::Routing(const Routing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kUserInfoTable: {
      _internal_mutable_user_info_table()->::qaul::net::router_net_info::UserInfoTable::MergeFrom(from._internal_user_info_table());
      break;
    }
    case kUserInfo: {
      _internal_mutable_user_info()->::qaul::net::router_net_info::UserInfo::MergeFrom(from._internal_user_info());
      break;
    }
    case kRoutingInfoTable: {
      _internal_mutable_routing_info_table()->::qaul::net::router_net_info::RoutingInfoTable::MergeFrom(from._internal_routing_info_table());
      break;
    }
    case kRoutingInfoEntry: {
      _internal_mutable_routing_info_entry()->::qaul::net::router_net_info::RoutingInfoEntry::MergeFrom(from._internal_routing_info_entry());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.Routing)
}

inline void Routing::SharedCtor() {
clear_has_message();
}

Routing::~Routing() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.Routing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Routing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Routing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Routing::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.net.router_net_info.Routing)
  switch (message_case()) {
    case kUserInfoTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.user_info_table_;
      }
      break;
    }
    case kUserInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.user_info_;
      }
      break;
    }
    case kRoutingInfoTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.routing_info_table_;
      }
      break;
    }
    case kRoutingInfoEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.routing_info_entry_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Routing::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.Routing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.net.router_net_info.UserInfoTable user_info_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.UserInfo user_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.RoutingInfoTable routing_info_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_info_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .qaul.net.router_net_info.RoutingInfoEntry routing_info_entry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_info_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Routing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.Routing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.net.router_net_info.UserInfoTable user_info_table = 1;
  if (_internal_has_user_info_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_info_table(this),
        _Internal::user_info_table(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.router_net_info.UserInfo user_info = 2;
  if (_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.router_net_info.RoutingInfoTable routing_info_table = 3;
  if (_internal_has_routing_info_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::routing_info_table(this),
        _Internal::routing_info_table(this).GetCachedSize(), target, stream);
  }

  // .qaul.net.router_net_info.RoutingInfoEntry routing_info_entry = 4;
  if (_internal_has_routing_info_entry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::routing_info_entry(this),
        _Internal::routing_info_entry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.Routing)
  return target;
}

size_t Routing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.Routing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.net.router_net_info.UserInfoTable user_info_table = 1;
    case kUserInfoTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.user_info_table_);
      break;
    }
    // .qaul.net.router_net_info.UserInfo user_info = 2;
    case kUserInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.user_info_);
      break;
    }
    // .qaul.net.router_net_info.RoutingInfoTable routing_info_table = 3;
    case kRoutingInfoTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.routing_info_table_);
      break;
    }
    // .qaul.net.router_net_info.RoutingInfoEntry routing_info_entry = 4;
    case kRoutingInfoEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.routing_info_entry_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Routing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Routing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Routing::GetClassData() const { return &_class_data_; }

void Routing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Routing *>(to)->MergeFrom(
      static_cast<const Routing &>(from));
}


void Routing::MergeFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.Routing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kUserInfoTable: {
      _internal_mutable_user_info_table()->::qaul::net::router_net_info::UserInfoTable::MergeFrom(from._internal_user_info_table());
      break;
    }
    case kUserInfo: {
      _internal_mutable_user_info()->::qaul::net::router_net_info::UserInfo::MergeFrom(from._internal_user_info());
      break;
    }
    case kRoutingInfoTable: {
      _internal_mutable_routing_info_table()->::qaul::net::router_net_info::RoutingInfoTable::MergeFrom(from._internal_routing_info_table());
      break;
    }
    case kRoutingInfoEntry: {
      _internal_mutable_routing_info_entry()->::qaul::net::router_net_info::RoutingInfoEntry::MergeFrom(from._internal_routing_info_entry());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Routing::CopyFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routing::IsInitialized() const {
  return true;
}

void Routing::InternalSwap(Routing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Routing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[3]);
}

// ===================================================================

class RoutingInfoTable::_Internal {
 public:
};

RoutingInfoTable::RoutingInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entry_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RoutingInfoTable)
}
RoutingInfoTable::RoutingInfoTable(const RoutingInfoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RoutingInfoTable)
}

inline void RoutingInfoTable::SharedCtor() {
}

RoutingInfoTable::~RoutingInfoTable() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RoutingInfoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingInfoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingInfoTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingInfoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RoutingInfoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInfoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.net.router_net_info.RoutingInfoEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingInfoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RoutingInfoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.RoutingInfoEntry entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RoutingInfoTable)
  return target;
}

size_t RoutingInfoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RoutingInfoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.RoutingInfoEntry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInfoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingInfoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInfoTable::GetClassData() const { return &_class_data_; }

void RoutingInfoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingInfoTable *>(to)->MergeFrom(
      static_cast<const RoutingInfoTable &>(from));
}


void RoutingInfoTable::MergeFrom(const RoutingInfoTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RoutingInfoTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInfoTable::CopyFrom(const RoutingInfoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RoutingInfoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInfoTable::IsInitialized() const {
  return true;
}

void RoutingInfoTable::InternalSwap(RoutingInfoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInfoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[4]);
}

// ===================================================================

class RoutingInfoEntry::_Internal {
 public:
};

RoutingInfoEntry::RoutingInfoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.RoutingInfoEntry)
}
RoutingInfoEntry::RoutingInfoEntry(const RoutingInfoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    user_.Set(from._internal_user(), 
      GetArenaForAllocation());
  }
  hc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hc().empty()) {
    hc_.Set(from._internal_hc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&rtt_, &from.rtt_,
    static_cast<size_t>(reinterpret_cast<char*>(&pl_) -
    reinterpret_cast<char*>(&rtt_)) + sizeof(pl_));
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.RoutingInfoEntry)
}

inline void RoutingInfoEntry::SharedCtor() {
user_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rtt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pl_) -
    reinterpret_cast<char*>(&rtt_)) + sizeof(pl_));
}

RoutingInfoEntry::~RoutingInfoEntry() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.RoutingInfoEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingInfoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_.Destroy();
  hc_.Destroy();
}

void RoutingInfoEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingInfoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.RoutingInfoEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmpty();
  hc_.ClearToEmpty();
  ::memset(&rtt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pl_) -
      reinterpret_cast<char*>(&rtt_)) + sizeof(pl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingInfoEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rtt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float pl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          pl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingInfoEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.RoutingInfoEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user = 1;
  if (!this->_internal_user().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user(), target);
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtt(), target);
  }

  // bytes hc = 3;
  if (!this->_internal_hc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hc(), target);
  }

  // float pl = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pl = this->_internal_pl();
  uint32_t raw_pl;
  memcpy(&raw_pl, &tmp_pl, sizeof(tmp_pl));
  if (raw_pl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_pl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.RoutingInfoEntry)
  return target;
}

size_t RoutingInfoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.RoutingInfoEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user());
  }

  // bytes hc = 3;
  if (!this->_internal_hc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hc());
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtt());
  }

  // float pl = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pl = this->_internal_pl();
  uint32_t raw_pl;
  memcpy(&raw_pl, &tmp_pl, sizeof(tmp_pl));
  if (raw_pl != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingInfoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingInfoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingInfoEntry::GetClassData() const { return &_class_data_; }

void RoutingInfoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingInfoEntry *>(to)->MergeFrom(
      static_cast<const RoutingInfoEntry &>(from));
}


void RoutingInfoEntry::MergeFrom(const RoutingInfoEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.RoutingInfoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from._internal_hc().empty()) {
    _internal_set_hc(from._internal_hc());
  }
  if (from._internal_rtt() != 0) {
    _internal_set_rtt(from._internal_rtt());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pl = from._internal_pl();
  uint32_t raw_pl;
  memcpy(&raw_pl, &tmp_pl, sizeof(tmp_pl));
  if (raw_pl != 0) {
    _internal_set_pl(from._internal_pl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingInfoEntry::CopyFrom(const RoutingInfoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.RoutingInfoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingInfoEntry::IsInitialized() const {
  return true;
}

void RoutingInfoEntry::InternalSwap(RoutingInfoEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_, lhs_arena,
      &other->user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hc_, lhs_arena,
      &other->hc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingInfoEntry, pl_)
      + sizeof(RoutingInfoEntry::pl_)
      - PROTOBUF_FIELD_OFFSET(RoutingInfoEntry, rtt_)>(
          reinterpret_cast<char*>(&rtt_),
          reinterpret_cast<char*>(&other->rtt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingInfoEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[5]);
}

// ===================================================================

class UserInfoTable::_Internal {
 public:
};

UserInfoTable::UserInfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.UserInfoTable)
}
UserInfoTable::UserInfoTable(const UserInfoTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_(from.info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.UserInfoTable)
}

inline void UserInfoTable::SharedCtor() {
}

UserInfoTable::~UserInfoTable() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.UserInfoTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfoTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserInfoTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserInfoTable::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.UserInfoTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.net.router_net_info.UserInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.UserInfoTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.UserInfo info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.UserInfoTable)
  return target;
}

size_t UserInfoTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.UserInfoTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.net.router_net_info.UserInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserInfoTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoTable::GetClassData() const { return &_class_data_; }

void UserInfoTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserInfoTable *>(to)->MergeFrom(
      static_cast<const UserInfoTable &>(from));
}


void UserInfoTable::MergeFrom(const UserInfoTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.UserInfoTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoTable::CopyFrom(const UserInfoTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.UserInfoTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoTable::IsInitialized() const {
  return true;
}

void UserInfoTable::InternalSwap(UserInfoTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[6]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:qaul.net.router_net_info.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.net.router_net_info.UserInfo)
}

inline void UserInfo::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:qaul.net.router_net_info.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  key_.Destroy();
  name_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.net.router_net_info.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  key_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "qaul.net.router_net_info.UserInfo.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.net.router_net_info.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.net.router_net_info.UserInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.net.router_net_info.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.net.router_net_info.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }

void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserInfo *>(to)->MergeFrom(
      static_cast<const UserInfo &>(from));
}


void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.net.router_net_info.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.net.router_net_info.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_getter, &descriptor_table_router_2frouter_5fnet_5finfo_2eproto_once,
      file_level_metadata_router_2frouter_5fnet_5finfo_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace router_net_info
}  // namespace net
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RouterInfoContainer*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RouterInfoContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RouterInfoContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RouterInfoContent*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RouterInfoContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RouterInfoContent >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RouterInfoMessage*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RouterInfoMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RouterInfoMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::Routing*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::Routing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::Routing >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RoutingInfoTable*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RoutingInfoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RoutingInfoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::RoutingInfoEntry*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::RoutingInfoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::RoutingInfoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::UserInfoTable*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::UserInfoTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::UserInfoTable >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::net::router_net_info::UserInfo*
Arena::CreateMaybeMessage< ::qaul::net::router_net_info::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::net::router_net_info::UserInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
