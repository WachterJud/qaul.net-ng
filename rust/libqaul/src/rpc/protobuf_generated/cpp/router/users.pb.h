// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/users.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2fusers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2fusers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2fusers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2fusers_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2fusers_2eproto;
namespace qaul {
namespace rpc {
namespace users {
class UserEntry;
struct UserEntryDefaultTypeInternal;
extern UserEntryDefaultTypeInternal _UserEntry_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
class UserOnlineRequest;
struct UserOnlineRequestDefaultTypeInternal;
extern UserOnlineRequestDefaultTypeInternal _UserOnlineRequest_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class Users;
struct UsersDefaultTypeInternal;
extern UsersDefaultTypeInternal _Users_default_instance_;
}  // namespace users
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::users::UserEntry* Arena::CreateMaybeMessage<::qaul::rpc::users::UserEntry>(Arena*);
template<> ::qaul::rpc::users::UserList* Arena::CreateMaybeMessage<::qaul::rpc::users::UserList>(Arena*);
template<> ::qaul::rpc::users::UserOnlineRequest* Arena::CreateMaybeMessage<::qaul::rpc::users::UserOnlineRequest>(Arena*);
template<> ::qaul::rpc::users::UserRequest* Arena::CreateMaybeMessage<::qaul::rpc::users::UserRequest>(Arena*);
template<> ::qaul::rpc::users::Users* Arena::CreateMaybeMessage<::qaul::rpc::users::Users>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace users {

enum Connectivity : int {
  Online = 0,
  Reachable = 1,
  Offline = 2,
  Connectivity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Connectivity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Connectivity_IsValid(int value);
constexpr Connectivity Connectivity_MIN = Online;
constexpr Connectivity Connectivity_MAX = Offline;
constexpr int Connectivity_ARRAYSIZE = Connectivity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Connectivity_descriptor();
template<typename T>
inline const std::string& Connectivity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Connectivity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Connectivity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Connectivity_descriptor(), enum_t_value);
}
inline bool Connectivity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Connectivity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Connectivity>(
    Connectivity_descriptor(), name, value);
}
// ===================================================================

class Users final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.Users) */ {
 public:
  inline Users() : Users(nullptr) {}
  ~Users() override;
  explicit PROTOBUF_CONSTEXPR Users(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Users(const Users& from);
  Users(Users&& from) noexcept
    : Users() {
    *this = ::std::move(from);
  }

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }
  inline Users& operator=(Users&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Users& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kUserRequest = 1,
    kUserOnlineRequest = 2,
    kUserList = 3,
    kUserUpdate = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Users* internal_default_instance() {
    return reinterpret_cast<const Users*>(
               &_Users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Users& a, Users& b) {
    a.Swap(&b);
  }
  inline void Swap(Users* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Users>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Users& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Users& from) {
    Users::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Users* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.Users";
  }
  protected:
  explicit Users(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserRequestFieldNumber = 1,
    kUserOnlineRequestFieldNumber = 2,
    kUserListFieldNumber = 3,
    kUserUpdateFieldNumber = 4,
  };
  // .qaul.rpc.users.UserRequest user_request = 1;
  bool has_user_request() const;
  private:
  bool _internal_has_user_request() const;
  public:
  void clear_user_request();
  const ::qaul::rpc::users::UserRequest& user_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserRequest* release_user_request();
  ::qaul::rpc::users::UserRequest* mutable_user_request();
  void set_allocated_user_request(::qaul::rpc::users::UserRequest* user_request);
  private:
  const ::qaul::rpc::users::UserRequest& _internal_user_request() const;
  ::qaul::rpc::users::UserRequest* _internal_mutable_user_request();
  public:
  void unsafe_arena_set_allocated_user_request(
      ::qaul::rpc::users::UserRequest* user_request);
  ::qaul::rpc::users::UserRequest* unsafe_arena_release_user_request();

  // .qaul.rpc.users.UserOnlineRequest user_online_request = 2;
  bool has_user_online_request() const;
  private:
  bool _internal_has_user_online_request() const;
  public:
  void clear_user_online_request();
  const ::qaul::rpc::users::UserOnlineRequest& user_online_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserOnlineRequest* release_user_online_request();
  ::qaul::rpc::users::UserOnlineRequest* mutable_user_online_request();
  void set_allocated_user_online_request(::qaul::rpc::users::UserOnlineRequest* user_online_request);
  private:
  const ::qaul::rpc::users::UserOnlineRequest& _internal_user_online_request() const;
  ::qaul::rpc::users::UserOnlineRequest* _internal_mutable_user_online_request();
  public:
  void unsafe_arena_set_allocated_user_online_request(
      ::qaul::rpc::users::UserOnlineRequest* user_online_request);
  ::qaul::rpc::users::UserOnlineRequest* unsafe_arena_release_user_online_request();

  // .qaul.rpc.users.UserList user_list = 3;
  bool has_user_list() const;
  private:
  bool _internal_has_user_list() const;
  public:
  void clear_user_list();
  const ::qaul::rpc::users::UserList& user_list() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserList* release_user_list();
  ::qaul::rpc::users::UserList* mutable_user_list();
  void set_allocated_user_list(::qaul::rpc::users::UserList* user_list);
  private:
  const ::qaul::rpc::users::UserList& _internal_user_list() const;
  ::qaul::rpc::users::UserList* _internal_mutable_user_list();
  public:
  void unsafe_arena_set_allocated_user_list(
      ::qaul::rpc::users::UserList* user_list);
  ::qaul::rpc::users::UserList* unsafe_arena_release_user_list();

  // .qaul.rpc.users.UserEntry user_update = 4;
  bool has_user_update() const;
  private:
  bool _internal_has_user_update() const;
  public:
  void clear_user_update();
  const ::qaul::rpc::users::UserEntry& user_update() const;
  PROTOBUF_NODISCARD ::qaul::rpc::users::UserEntry* release_user_update();
  ::qaul::rpc::users::UserEntry* mutable_user_update();
  void set_allocated_user_update(::qaul::rpc::users::UserEntry* user_update);
  private:
  const ::qaul::rpc::users::UserEntry& _internal_user_update() const;
  ::qaul::rpc::users::UserEntry* _internal_mutable_user_update();
  public:
  void unsafe_arena_set_allocated_user_update(
      ::qaul::rpc::users::UserEntry* user_update);
  ::qaul::rpc::users::UserEntry* unsafe_arena_release_user_update();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.users.Users)
 private:
  class _Internal;
  void set_has_user_request();
  void set_has_user_online_request();
  void set_has_user_list();
  void set_has_user_update();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::users::UserRequest* user_request_;
      ::qaul::rpc::users::UserOnlineRequest* user_online_request_;
      ::qaul::rpc::users::UserList* user_list_;
      ::qaul::rpc::users::UserEntry* user_update_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UserRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UserRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserOnlineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserOnlineRequest) */ {
 public:
  inline UserOnlineRequest() : UserOnlineRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UserOnlineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserOnlineRequest(const UserOnlineRequest& from);
  UserOnlineRequest(UserOnlineRequest&& from) noexcept
    : UserOnlineRequest() {
    *this = ::std::move(from);
  }

  inline UserOnlineRequest& operator=(const UserOnlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOnlineRequest& operator=(UserOnlineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOnlineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOnlineRequest* internal_default_instance() {
    return reinterpret_cast<const UserOnlineRequest*>(
               &_UserOnlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserOnlineRequest& a, UserOnlineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOnlineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOnlineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOnlineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserOnlineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UserOnlineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UserOnlineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserOnlineRequest";
  }
  protected:
  explicit UserOnlineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserOnlineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  explicit PROTOBUF_CONSTEXPR UserList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserList& from) {
    UserList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserList";
  }
  protected:
  explicit UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .qaul.rpc.users.UserEntry user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::qaul::rpc::users::UserEntry* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >*
      mutable_user();
  private:
  const ::qaul::rpc::users::UserEntry& _internal_user(int index) const;
  ::qaul::rpc::users::UserEntry* _internal_add_user();
  public:
  const ::qaul::rpc::users::UserEntry& user(int index) const;
  ::qaul::rpc::users::UserEntry* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >&
      user() const;

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry > user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// -------------------------------------------------------------------

class UserEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.users.UserEntry) */ {
 public:
  inline UserEntry() : UserEntry(nullptr) {}
  ~UserEntry() override;
  explicit PROTOBUF_CONSTEXPR UserEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEntry(const UserEntry& from);
  UserEntry(UserEntry&& from) noexcept
    : UserEntry() {
    *this = ::std::move(from);
  }

  inline UserEntry& operator=(const UserEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEntry& operator=(UserEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEntry* internal_default_instance() {
    return reinterpret_cast<const UserEntry*>(
               &_UserEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserEntry& a, UserEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserEntry& from) {
    UserEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.users.UserEntry";
  }
  protected:
  explicit UserEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kIdBase58FieldNumber = 4,
    kKeyFieldNumber = 5,
    kKeyTypeFieldNumber = 6,
    kKeyBase58FieldNumber = 7,
    kConnectivityFieldNumber = 8,
    kVerifiedFieldNumber = 9,
    kBlockedFieldNumber = 10,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string id_base58 = 4;
  void clear_id_base58();
  const std::string& id_base58() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_base58(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_base58();
  PROTOBUF_NODISCARD std::string* release_id_base58();
  void set_allocated_id_base58(std::string* id_base58);
  private:
  const std::string& _internal_id_base58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_base58(const std::string& value);
  std::string* _internal_mutable_id_base58();
  public:

  // bytes key = 5;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string key_type = 6;
  void clear_key_type();
  const std::string& key_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_type();
  PROTOBUF_NODISCARD std::string* release_key_type();
  void set_allocated_key_type(std::string* key_type);
  private:
  const std::string& _internal_key_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_type(const std::string& value);
  std::string* _internal_mutable_key_type();
  public:

  // string key_base58 = 7;
  void clear_key_base58();
  const std::string& key_base58() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_base58(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_base58();
  PROTOBUF_NODISCARD std::string* release_key_base58();
  void set_allocated_key_base58(std::string* key_base58);
  private:
  const std::string& _internal_key_base58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_base58(const std::string& value);
  std::string* _internal_mutable_key_base58();
  public:

  // .qaul.rpc.users.Connectivity connectivity = 8;
  void clear_connectivity();
  ::qaul::rpc::users::Connectivity connectivity() const;
  void set_connectivity(::qaul::rpc::users::Connectivity value);
  private:
  ::qaul::rpc::users::Connectivity _internal_connectivity() const;
  void _internal_set_connectivity(::qaul::rpc::users::Connectivity value);
  public:

  // bool verified = 9;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // bool blocked = 10;
  void clear_blocked();
  bool blocked() const;
  void set_blocked(bool value);
  private:
  bool _internal_blocked() const;
  void _internal_set_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.users.UserEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_base58_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_base58_;
    int connectivity_;
    bool verified_;
    bool blocked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2fusers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Users

// .qaul.rpc.users.UserRequest user_request = 1;
inline bool Users::_internal_has_user_request() const {
  return message_case() == kUserRequest;
}
inline bool Users::has_user_request() const {
  return _internal_has_user_request();
}
inline void Users::set_has_user_request() {
  _impl_._oneof_case_[0] = kUserRequest;
}
inline void Users::clear_user_request() {
  if (_internal_has_user_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserRequest* Users::release_user_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_request)
  if (_internal_has_user_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserRequest* temp = _impl_.message_.user_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserRequest& Users::_internal_user_request() const {
  return _internal_has_user_request()
      ? *_impl_.message_.user_request_
      : reinterpret_cast< ::qaul::rpc::users::UserRequest&>(::qaul::rpc::users::_UserRequest_default_instance_);
}
inline const ::qaul::rpc::users::UserRequest& Users::user_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_request)
  return _internal_user_request();
}
inline ::qaul::rpc::users::UserRequest* Users::unsafe_arena_release_user_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_request)
  if (_internal_has_user_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserRequest* temp = _impl_.message_.user_request_;
    _impl_.message_.user_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_request(::qaul::rpc::users::UserRequest* user_request) {
  clear_message();
  if (user_request) {
    set_has_user_request();
    _impl_.message_.user_request_ = user_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_request)
}
inline ::qaul::rpc::users::UserRequest* Users::_internal_mutable_user_request() {
  if (!_internal_has_user_request()) {
    clear_message();
    set_has_user_request();
    _impl_.message_.user_request_ = CreateMaybeMessage< ::qaul::rpc::users::UserRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.user_request_;
}
inline ::qaul::rpc::users::UserRequest* Users::mutable_user_request() {
  ::qaul::rpc::users::UserRequest* _msg = _internal_mutable_user_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_request)
  return _msg;
}

// .qaul.rpc.users.UserOnlineRequest user_online_request = 2;
inline bool Users::_internal_has_user_online_request() const {
  return message_case() == kUserOnlineRequest;
}
inline bool Users::has_user_online_request() const {
  return _internal_has_user_online_request();
}
inline void Users::set_has_user_online_request() {
  _impl_._oneof_case_[0] = kUserOnlineRequest;
}
inline void Users::clear_user_online_request() {
  if (_internal_has_user_online_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_online_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::release_user_online_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_online_request)
  if (_internal_has_user_online_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserOnlineRequest* temp = _impl_.message_.user_online_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_online_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserOnlineRequest& Users::_internal_user_online_request() const {
  return _internal_has_user_online_request()
      ? *_impl_.message_.user_online_request_
      : reinterpret_cast< ::qaul::rpc::users::UserOnlineRequest&>(::qaul::rpc::users::_UserOnlineRequest_default_instance_);
}
inline const ::qaul::rpc::users::UserOnlineRequest& Users::user_online_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_online_request)
  return _internal_user_online_request();
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::unsafe_arena_release_user_online_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_online_request)
  if (_internal_has_user_online_request()) {
    clear_has_message();
    ::qaul::rpc::users::UserOnlineRequest* temp = _impl_.message_.user_online_request_;
    _impl_.message_.user_online_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_online_request(::qaul::rpc::users::UserOnlineRequest* user_online_request) {
  clear_message();
  if (user_online_request) {
    set_has_user_online_request();
    _impl_.message_.user_online_request_ = user_online_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_online_request)
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::_internal_mutable_user_online_request() {
  if (!_internal_has_user_online_request()) {
    clear_message();
    set_has_user_online_request();
    _impl_.message_.user_online_request_ = CreateMaybeMessage< ::qaul::rpc::users::UserOnlineRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.user_online_request_;
}
inline ::qaul::rpc::users::UserOnlineRequest* Users::mutable_user_online_request() {
  ::qaul::rpc::users::UserOnlineRequest* _msg = _internal_mutable_user_online_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_online_request)
  return _msg;
}

// .qaul.rpc.users.UserList user_list = 3;
inline bool Users::_internal_has_user_list() const {
  return message_case() == kUserList;
}
inline bool Users::has_user_list() const {
  return _internal_has_user_list();
}
inline void Users::set_has_user_list() {
  _impl_._oneof_case_[0] = kUserList;
}
inline void Users::clear_user_list() {
  if (_internal_has_user_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_list_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserList* Users::release_user_list() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_list)
  if (_internal_has_user_list()) {
    clear_has_message();
    ::qaul::rpc::users::UserList* temp = _impl_.message_.user_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserList& Users::_internal_user_list() const {
  return _internal_has_user_list()
      ? *_impl_.message_.user_list_
      : reinterpret_cast< ::qaul::rpc::users::UserList&>(::qaul::rpc::users::_UserList_default_instance_);
}
inline const ::qaul::rpc::users::UserList& Users::user_list() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_list)
  return _internal_user_list();
}
inline ::qaul::rpc::users::UserList* Users::unsafe_arena_release_user_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_list)
  if (_internal_has_user_list()) {
    clear_has_message();
    ::qaul::rpc::users::UserList* temp = _impl_.message_.user_list_;
    _impl_.message_.user_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_list(::qaul::rpc::users::UserList* user_list) {
  clear_message();
  if (user_list) {
    set_has_user_list();
    _impl_.message_.user_list_ = user_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_list)
}
inline ::qaul::rpc::users::UserList* Users::_internal_mutable_user_list() {
  if (!_internal_has_user_list()) {
    clear_message();
    set_has_user_list();
    _impl_.message_.user_list_ = CreateMaybeMessage< ::qaul::rpc::users::UserList >(GetArenaForAllocation());
  }
  return _impl_.message_.user_list_;
}
inline ::qaul::rpc::users::UserList* Users::mutable_user_list() {
  ::qaul::rpc::users::UserList* _msg = _internal_mutable_user_list();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_list)
  return _msg;
}

// .qaul.rpc.users.UserEntry user_update = 4;
inline bool Users::_internal_has_user_update() const {
  return message_case() == kUserUpdate;
}
inline bool Users::has_user_update() const {
  return _internal_has_user_update();
}
inline void Users::set_has_user_update() {
  _impl_._oneof_case_[0] = kUserUpdate;
}
inline void Users::clear_user_update() {
  if (_internal_has_user_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.user_update_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::users::UserEntry* Users::release_user_update() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.Users.user_update)
  if (_internal_has_user_update()) {
    clear_has_message();
    ::qaul::rpc::users::UserEntry* temp = _impl_.message_.user_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::users::UserEntry& Users::_internal_user_update() const {
  return _internal_has_user_update()
      ? *_impl_.message_.user_update_
      : reinterpret_cast< ::qaul::rpc::users::UserEntry&>(::qaul::rpc::users::_UserEntry_default_instance_);
}
inline const ::qaul::rpc::users::UserEntry& Users::user_update() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.Users.user_update)
  return _internal_user_update();
}
inline ::qaul::rpc::users::UserEntry* Users::unsafe_arena_release_user_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.users.Users.user_update)
  if (_internal_has_user_update()) {
    clear_has_message();
    ::qaul::rpc::users::UserEntry* temp = _impl_.message_.user_update_;
    _impl_.message_.user_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Users::unsafe_arena_set_allocated_user_update(::qaul::rpc::users::UserEntry* user_update) {
  clear_message();
  if (user_update) {
    set_has_user_update();
    _impl_.message_.user_update_ = user_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.users.Users.user_update)
}
inline ::qaul::rpc::users::UserEntry* Users::_internal_mutable_user_update() {
  if (!_internal_has_user_update()) {
    clear_message();
    set_has_user_update();
    _impl_.message_.user_update_ = CreateMaybeMessage< ::qaul::rpc::users::UserEntry >(GetArenaForAllocation());
  }
  return _impl_.message_.user_update_;
}
inline ::qaul::rpc::users::UserEntry* Users::mutable_user_update() {
  ::qaul::rpc::users::UserEntry* _msg = _internal_mutable_user_update();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.Users.user_update)
  return _msg;
}

inline bool Users::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Users::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Users::MessageCase Users::message_case() const {
  return Users::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserRequest

// -------------------------------------------------------------------

// UserOnlineRequest

// -------------------------------------------------------------------

// UserList

// repeated .qaul.rpc.users.UserEntry user = 1;
inline int UserList::_internal_user_size() const {
  return _impl_.user_.size();
}
inline int UserList::user_size() const {
  return _internal_user_size();
}
inline void UserList::clear_user() {
  _impl_.user_.Clear();
}
inline ::qaul::rpc::users::UserEntry* UserList::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserList.user)
  return _impl_.user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >*
UserList::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.users.UserList.user)
  return &_impl_.user_;
}
inline const ::qaul::rpc::users::UserEntry& UserList::_internal_user(int index) const {
  return _impl_.user_.Get(index);
}
inline const ::qaul::rpc::users::UserEntry& UserList::user(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserList.user)
  return _internal_user(index);
}
inline ::qaul::rpc::users::UserEntry* UserList::_internal_add_user() {
  return _impl_.user_.Add();
}
inline ::qaul::rpc::users::UserEntry* UserList::add_user() {
  ::qaul::rpc::users::UserEntry* _add = _internal_add_user();
  // @@protoc_insertion_point(field_add:qaul.rpc.users.UserList.user)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::users::UserEntry >&
UserList::user() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.users.UserList.user)
  return _impl_.user_;
}

// -------------------------------------------------------------------

// UserEntry

// string name = 1;
inline void UserEntry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserEntry::name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.name)
}
inline std::string* UserEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.name)
  return _s;
}
inline const std::string& UserEntry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserEntry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.name)
  return _impl_.name_.Release();
}
inline void UserEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.name)
}

// bytes id = 2;
inline void UserEntry::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserEntry::id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.id)
}
inline std::string* UserEntry::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.id)
  return _s;
}
inline const std::string& UserEntry::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UserEntry::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.id)
  return _impl_.id_.Release();
}
inline void UserEntry::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.id)
}

// string id_base58 = 4;
inline void UserEntry::clear_id_base58() {
  _impl_.id_base58_.ClearToEmpty();
}
inline const std::string& UserEntry::id_base58() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.id_base58)
  return _internal_id_base58();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_id_base58(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_base58_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.id_base58)
}
inline std::string* UserEntry::mutable_id_base58() {
  std::string* _s = _internal_mutable_id_base58();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.id_base58)
  return _s;
}
inline const std::string& UserEntry::_internal_id_base58() const {
  return _impl_.id_base58_.Get();
}
inline void UserEntry::_internal_set_id_base58(const std::string& value) {
  
  _impl_.id_base58_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_id_base58() {
  
  return _impl_.id_base58_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_id_base58() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.id_base58)
  return _impl_.id_base58_.Release();
}
inline void UserEntry::set_allocated_id_base58(std::string* id_base58) {
  if (id_base58 != nullptr) {
    
  } else {
    
  }
  _impl_.id_base58_.SetAllocated(id_base58, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_base58_.IsDefault()) {
    _impl_.id_base58_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.id_base58)
}

// bytes key = 5;
inline void UserEntry::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& UserEntry::key() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.key)
}
inline std::string* UserEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.key)
  return _s;
}
inline const std::string& UserEntry::_internal_key() const {
  return _impl_.key_.Get();
}
inline void UserEntry::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_key() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.key)
  return _impl_.key_.Release();
}
inline void UserEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.key)
}

// string key_type = 6;
inline void UserEntry::clear_key_type() {
  _impl_.key_type_.ClearToEmpty();
}
inline const std::string& UserEntry::key_type() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.key_type)
  return _internal_key_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_key_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.key_type)
}
inline std::string* UserEntry::mutable_key_type() {
  std::string* _s = _internal_mutable_key_type();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.key_type)
  return _s;
}
inline const std::string& UserEntry::_internal_key_type() const {
  return _impl_.key_type_.Get();
}
inline void UserEntry::_internal_set_key_type(const std::string& value) {
  
  _impl_.key_type_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_key_type() {
  
  return _impl_.key_type_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_key_type() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.key_type)
  return _impl_.key_type_.Release();
}
inline void UserEntry::set_allocated_key_type(std::string* key_type) {
  if (key_type != nullptr) {
    
  } else {
    
  }
  _impl_.key_type_.SetAllocated(key_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_type_.IsDefault()) {
    _impl_.key_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.key_type)
}

// string key_base58 = 7;
inline void UserEntry::clear_key_base58() {
  _impl_.key_base58_.ClearToEmpty();
}
inline const std::string& UserEntry::key_base58() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.key_base58)
  return _internal_key_base58();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEntry::set_key_base58(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_base58_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.key_base58)
}
inline std::string* UserEntry::mutable_key_base58() {
  std::string* _s = _internal_mutable_key_base58();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.users.UserEntry.key_base58)
  return _s;
}
inline const std::string& UserEntry::_internal_key_base58() const {
  return _impl_.key_base58_.Get();
}
inline void UserEntry::_internal_set_key_base58(const std::string& value) {
  
  _impl_.key_base58_.Set(value, GetArenaForAllocation());
}
inline std::string* UserEntry::_internal_mutable_key_base58() {
  
  return _impl_.key_base58_.Mutable(GetArenaForAllocation());
}
inline std::string* UserEntry::release_key_base58() {
  // @@protoc_insertion_point(field_release:qaul.rpc.users.UserEntry.key_base58)
  return _impl_.key_base58_.Release();
}
inline void UserEntry::set_allocated_key_base58(std::string* key_base58) {
  if (key_base58 != nullptr) {
    
  } else {
    
  }
  _impl_.key_base58_.SetAllocated(key_base58, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_base58_.IsDefault()) {
    _impl_.key_base58_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.UserEntry.key_base58)
}

// .qaul.rpc.users.Connectivity connectivity = 8;
inline void UserEntry::clear_connectivity() {
  _impl_.connectivity_ = 0;
}
inline ::qaul::rpc::users::Connectivity UserEntry::_internal_connectivity() const {
  return static_cast< ::qaul::rpc::users::Connectivity >(_impl_.connectivity_);
}
inline ::qaul::rpc::users::Connectivity UserEntry::connectivity() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.connectivity)
  return _internal_connectivity();
}
inline void UserEntry::_internal_set_connectivity(::qaul::rpc::users::Connectivity value) {
  
  _impl_.connectivity_ = value;
}
inline void UserEntry::set_connectivity(::qaul::rpc::users::Connectivity value) {
  _internal_set_connectivity(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.connectivity)
}

// bool verified = 9;
inline void UserEntry::clear_verified() {
  _impl_.verified_ = false;
}
inline bool UserEntry::_internal_verified() const {
  return _impl_.verified_;
}
inline bool UserEntry::verified() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.verified)
  return _internal_verified();
}
inline void UserEntry::_internal_set_verified(bool value) {
  
  _impl_.verified_ = value;
}
inline void UserEntry::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.verified)
}

// bool blocked = 10;
inline void UserEntry::clear_blocked() {
  _impl_.blocked_ = false;
}
inline bool UserEntry::_internal_blocked() const {
  return _impl_.blocked_;
}
inline bool UserEntry::blocked() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.users.UserEntry.blocked)
  return _internal_blocked();
}
inline void UserEntry::_internal_set_blocked(bool value) {
  
  _impl_.blocked_ = value;
}
inline void UserEntry::set_blocked(bool value) {
  _internal_set_blocked(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.users.UserEntry.blocked)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace users
}  // namespace rpc
}  // namespace qaul

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::qaul::rpc::users::Connectivity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qaul::rpc::users::Connectivity>() {
  return ::qaul::rpc::users::Connectivity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2fusers_2eproto
