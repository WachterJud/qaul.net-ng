// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: router/router_net_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Router information Container
struct Qaul_Net_RouterNetInfo_RouterInfoContainer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// signature
  var signature: Data = Data()

  /// message content
  var message: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Router information content
struct Qaul_Net_RouterNetInfo_RouterInfoContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// node id
  var id: Data = Data()

  /// message content
  var content: Data = Data()

  /// timestamp in milli seconds
  var time: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Router information message
struct Qaul_Net_RouterNetInfo_RouterInfoMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// node id
  var node: Data = Data()

  /// Routing information table
  var routes: Qaul_Net_RouterNetInfo_RoutingInfoTable {
    get {return _routes ?? Qaul_Net_RouterNetInfo_RoutingInfoTable()}
    set {_routes = newValue}
  }
  /// Returns true if `routes` has been explicitly set.
  var hasRoutes: Bool {return self._routes != nil}
  /// Clears the value of `routes`. Subsequent reads from it will return its default value.
  mutating func clearRoutes() {self._routes = nil}

  /// Users information table
  var users: Qaul_Net_RouterNetInfo_UserInfoTable {
    get {return _users ?? Qaul_Net_RouterNetInfo_UserInfoTable()}
    set {_users = newValue}
  }
  /// Returns true if `users` has been explicitly set.
  var hasUsers: Bool {return self._users != nil}
  /// Clears the value of `users`. Subsequent reads from it will return its default value.
  mutating func clearUsers() {self._users = nil}

  /// timestamp
  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _routes: Qaul_Net_RouterNetInfo_RoutingInfoTable? = nil
  fileprivate var _users: Qaul_Net_RouterNetInfo_UserInfoTable? = nil
}

struct Qaul_Net_RouterNetInfo_Routing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Qaul_Net_RouterNetInfo_Routing.OneOf_Message? = nil

  var userInfoTable: Qaul_Net_RouterNetInfo_UserInfoTable {
    get {
      if case .userInfoTable(let v)? = message {return v}
      return Qaul_Net_RouterNetInfo_UserInfoTable()
    }
    set {message = .userInfoTable(newValue)}
  }

  var userInfo: Qaul_Net_RouterNetInfo_UserInfo {
    get {
      if case .userInfo(let v)? = message {return v}
      return Qaul_Net_RouterNetInfo_UserInfo()
    }
    set {message = .userInfo(newValue)}
  }

  var routingInfoTable: Qaul_Net_RouterNetInfo_RoutingInfoTable {
    get {
      if case .routingInfoTable(let v)? = message {return v}
      return Qaul_Net_RouterNetInfo_RoutingInfoTable()
    }
    set {message = .routingInfoTable(newValue)}
  }

  var routingInfoEntry: Qaul_Net_RouterNetInfo_RoutingInfoEntry {
    get {
      if case .routingInfoEntry(let v)? = message {return v}
      return Qaul_Net_RouterNetInfo_RoutingInfoEntry()
    }
    set {message = .routingInfoEntry(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    case userInfoTable(Qaul_Net_RouterNetInfo_UserInfoTable)
    case userInfo(Qaul_Net_RouterNetInfo_UserInfo)
    case routingInfoTable(Qaul_Net_RouterNetInfo_RoutingInfoTable)
    case routingInfoEntry(Qaul_Net_RouterNetInfo_RoutingInfoEntry)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Net_RouterNetInfo_Routing.OneOf_Message, rhs: Qaul_Net_RouterNetInfo_Routing.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.userInfoTable, .userInfoTable): return {
        guard case .userInfoTable(let l) = lhs, case .userInfoTable(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userInfo, .userInfo): return {
        guard case .userInfo(let l) = lhs, case .userInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.routingInfoTable, .routingInfoTable): return {
        guard case .routingInfoTable(let l) = lhs, case .routingInfoTable(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.routingInfoEntry, .routingInfoEntry): return {
        guard case .routingInfoEntry(let l) = lhs, case .routingInfoEntry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Routing information to send to neighbours
struct Qaul_Net_RouterNetInfo_RoutingInfoTable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entry: [Qaul_Net_RouterNetInfo_RoutingInfoEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Routing structures to send over the network
struct Qaul_Net_RouterNetInfo_RoutingInfoEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// user id
  var user: Data = Data()

  //// round trip time
  var rtt: UInt32 = 0

  //// hop count
  var hc: Data = Data()

  //// package loss
  var pl: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// User information table
struct Qaul_Net_RouterNetInfo_UserInfoTable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var info: [Qaul_Net_RouterNetInfo_UserInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// User info structure for sending to the  
struct Qaul_Net_RouterNetInfo_UserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Data = Data()

  var key: Data = Data()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.net.router_net_info"

extension Qaul_Net_RouterNetInfo_RouterInfoContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RouterInfoContainer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularBytesField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_RouterInfoContainer, rhs: Qaul_Net_RouterNetInfo_RouterInfoContainer) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Net_RouterNetInfo_RouterInfoContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RouterInfoContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "content"),
    3: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularUInt64Field(value: self.time, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_RouterInfoContent, rhs: Qaul_Net_RouterNetInfo_RouterInfoContent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.content != rhs.content {return false}
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Net_RouterNetInfo_RouterInfoMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RouterInfoMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .same(proto: "routes"),
    3: .same(proto: "users"),
    4: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.node) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._routes) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._users) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.node.isEmpty {
      try visitor.visitSingularBytesField(value: self.node, fieldNumber: 1)
    }
    try { if let v = self._routes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._users {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_RouterInfoMessage, rhs: Qaul_Net_RouterNetInfo_RouterInfoMessage) -> Bool {
    if lhs.node != rhs.node {return false}
    if lhs._routes != rhs._routes {return false}
    if lhs._users != rhs._users {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Net_RouterNetInfo_Routing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Routing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_info_table"),
    2: .standard(proto: "user_info"),
    3: .standard(proto: "routing_info_table"),
    4: .standard(proto: "routing_info_entry"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Net_RouterNetInfo_UserInfoTable?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .userInfoTable(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .userInfoTable(v)
        }
      }()
      case 2: try {
        var v: Qaul_Net_RouterNetInfo_UserInfo?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .userInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .userInfo(v)
        }
      }()
      case 3: try {
        var v: Qaul_Net_RouterNetInfo_RoutingInfoTable?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .routingInfoTable(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .routingInfoTable(v)
        }
      }()
      case 4: try {
        var v: Qaul_Net_RouterNetInfo_RoutingInfoEntry?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .routingInfoEntry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .routingInfoEntry(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .userInfoTable?: try {
      guard case .userInfoTable(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .userInfo?: try {
      guard case .userInfo(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .routingInfoTable?: try {
      guard case .routingInfoTable(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .routingInfoEntry?: try {
      guard case .routingInfoEntry(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_Routing, rhs: Qaul_Net_RouterNetInfo_Routing) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Net_RouterNetInfo_RoutingInfoTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoutingInfoTable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entry"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entry) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entry.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entry, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_RoutingInfoTable, rhs: Qaul_Net_RouterNetInfo_RoutingInfoTable) -> Bool {
    if lhs.entry != rhs.entry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Net_RouterNetInfo_RoutingInfoEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoutingInfoEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "rtt"),
    3: .same(proto: "hc"),
    4: .same(proto: "pl"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.user) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.rtt) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.hc) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.pl) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.user.isEmpty {
      try visitor.visitSingularBytesField(value: self.user, fieldNumber: 1)
    }
    if self.rtt != 0 {
      try visitor.visitSingularUInt32Field(value: self.rtt, fieldNumber: 2)
    }
    if !self.hc.isEmpty {
      try visitor.visitSingularBytesField(value: self.hc, fieldNumber: 3)
    }
    if self.pl != 0 {
      try visitor.visitSingularFloatField(value: self.pl, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_RoutingInfoEntry, rhs: Qaul_Net_RouterNetInfo_RoutingInfoEntry) -> Bool {
    if lhs.user != rhs.user {return false}
    if lhs.rtt != rhs.rtt {return false}
    if lhs.hc != rhs.hc {return false}
    if lhs.pl != rhs.pl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Net_RouterNetInfo_UserInfoTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfoTable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.info) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.info.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.info, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_UserInfoTable, rhs: Qaul_Net_RouterNetInfo_UserInfoTable) -> Bool {
    if lhs.info != rhs.info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Net_RouterNetInfo_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Net_RouterNetInfo_UserInfo, rhs: Qaul_Net_RouterNetInfo_UserInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.key != rhs.key {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
