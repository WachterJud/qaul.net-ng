// Copyright (c) 2021 Open Community Project Association https://ocpa.ch
// This software is published under the AGPLv3 license.

//! Qaul Community Router
//! 
//! This module implements all the tables and logic of the 
//! qaul router.

use prost::Message;

pub mod neighbours;
pub mod users;
pub mod flooder;
pub mod table;
pub mod connections;
pub mod info;

use neighbours::Neighbours;
use users::Users;
use flooder::Flooder;
use table::RoutingTable;
use connections::ConnectionTable;
use info::RouterInfo;

/// Import protobuf message definition generated by 
/// the rust module prost-build.
pub mod proto { include!("qaul.rpc.router.rs"); }
pub mod router_net_proto { include!("qaul.net.router_net_info.rs"); }

/// qaul community router access
pub struct Router {

}

impl Router {
    /// Initialize the qaul router
    pub fn init() {
        // initialize direct neighbours table
        Neighbours::init();

        // initialize users table
        Users::init();

        // initialize flooder queue
        Flooder::init();

        // initialize the global routing table
        RoutingTable::init();

        // initialize the routing information collection
        // tables per connection module
        ConnectionTable::init();

        // initialize RouterInfo submodule that 
        // scheduals the sending of the routing information
        // to the neighbouring nodes.
        RouterInfo::init(10);
    }

    /// Process incoming RPC request messages and send them to
    /// the submodules
    pub fn rpc(data: Vec<u8>) {
        match proto::Router::decode(&data[..]) {
            Ok(router) => {
                match router.message {
                    Some(proto::router::Message::RoutingTableRequest(_request)) => {
                        // send routing table list
                        RoutingTable::rpc_send_routing_table();
                    },
                    Some(proto::router::Message::ConnectionsRequest(_request)) => {
                        // send connections list
                        ConnectionTable::rpc_send_connections_list();
                    },
                    Some(proto::router::Message::NeighboursRequest(_request)) => {
                        // send neighbours list
                        Neighbours::rpc_send_neighbours_list();
                    },
                    _ => {},
                }
            },
            Err(error) => {
                log::error!("{:?}", error);
            },
        }
    }
}
