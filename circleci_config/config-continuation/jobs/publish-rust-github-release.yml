executor: rust-linux
steps:
  - checkout-project
  - attach_workspace:
      at: ~/qaul-libp2p
  - run:
      name: Copy binaries to ./artifacts
      shell: /bin/bash --login +eo pipefail
      command: |
        mkdir artifacts

        # Android
        cp -a android/blemodule/build/outputs/aar/. ./artifacts/
        cp -a android/libqaul/build/outputs/aar/. ./artifacts/

        # iOS
        cp rust/target/release/liblibqaul.dylib ./artifacts/

        # Linux - libqaul
        cp rust/target/release/liblibqaul.so ./artifacts/
        cp rust/target/release/cli-binaries/linux-cli-binaries.zip ./artifacts/

        # Linux - qauld debian installers
        cp rust/target/debian/*.deb ./artifacts/
        cp rust/target/armv7-unknown-linux-gnueabihf/debian/*.deb ./artifacts/

        # MacOS
        cp rust/target/universal/release/liblibqaul.a ./artifacts/
        cp rust/target/release/cli-binaries/macos-cli-binaries.zip ./artifacts/

        # Windows
        cp rust/target/release/libqaul.dll ./artifacts/
        cp rust/target/release/cli-binaries/windows-cli-binaries.zip ./artifacts/

        # +eo pipefail + exit 0 >> step succeeds regardless of a command failing
        exit 0
  - run:
      name: Install ghr
      command: |
        GHR_VERSION=0.14.0
        GHR_URL=https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz
        wget "$GHR_URL"
        tar xzf ghr_v${GHR_VERSION}_linux_amd64.tar.gz
        rm -r ghr_v${GHR_VERSION}_linux_amd64.tar.gz
        echo "export PATH=$(pwd)/ghr_v${GHR_VERSION}_linux_amd64:${PATH}" >> $BASH_ENV
  - run:
      name: Add utilities/bin to PATH
      command: |
        cd utilities/bin
        chmod +x filename
        echo "export PATH=$(pwd):${PATH}" > $BASH_ENV
  - run:
      name: Publish Release on GitHub
      command: |
        RUST_VERSION=$(cd rust/libqaul && cargo generate-lockfile -q && cargo pkgid | cut -d# -f2 | cut -d: -f2)
        TAG="v${RUST_VERSION}"

        cd artifacts

        AMD64_FILE=$(filename deb | grep "amd64" | cut -f1)
        ARMHF_FILE=$(filename deb | grep "armhf" |cut -f1)

        # Flutter Filenames make use of Flutter's App Version
        FLUTTER_VERSION=$(grep "version:" qaul_ui/pubspec.yaml | awk '{ print $2 }' | sed 's/+.*$//')

        APK_FILE="qaul-$VERSION.apk"
        LINUX_FILE="qaul-$VERSION.snap"
        MACOS_FILE="qaul-$VERSION.dmg"
        WINDOWS_FILE="qaul_installer_$FLUTTER_VERSION.exe"

        DESCRIPTION=$(cat ../utilities/release-templates/release-template.md \
          | sed "s/TAGNAME/${TAG}/g" \
          | sed "s/DEB_AMD/${AMD64_FILE}/g" \
          | sed "s/DEB_ARM/${ARMHF_FILE}/g" \
          | sed "s/APKVERSION/${APK_FILE}/g" \
          | sed "s/SNAPVERSION/${LINUX_FILE}/g" \
          | sed "s/MACOSVERSION/${MACOS_FILE}/g" \
          | sed "s/WINDOWSVERSION/${WINDOWS_FILE}/g" \
        )

        echo "Version Found: $RUST_VERSION"
        echo "Tag built:     $TAG"
        echo "Description:"
        echo "$DESCRIPTION"
        echo ""

        ghr -t "${GITHUB_TOKEN}" \
          -u "${CIRCLE_PROJECT_USERNAME}" \
          -r "${CIRCLE_PROJECT_REPONAME}" \
          -c "${CIRCLE_SHA1}" \
          -n "qaul - v${RUST_VERSION}" \
          -b "${DESCRIPTION}" \
          -replace \
          "${TAG}" .
